<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端处理动态 url 和 pushStatus 的使用</title>
    <url>//post/History-API.html</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>起因是这样的，在尝试前后端分离的这条道路上，我自己也在不断摸索，感觉要把大部分的坑都踩踩了。目前我用的技术是：</p>
<span id="more"></span>
<ul>
<li>webpack 自动构建</li>
<li>AMD 模块化 js</li>
<li>Sass 预处理 CSS</li>
<li>使用前端模板引擎 handlebars 解决动态操作将 html 拼接在 js 中的问题</li>
</ul>
<p>但最近写了一个项目类似知乎这样的多页网站。前端 url 的处理让我觉得不够优雅。我使用的是 hash 的方式处理动态 url 的，为此我专门在知乎上提了一个问题：<a href="https://www.zhihu.com/question/38802932">前端如何处理动态url？</a></p>
<p>这里我将问题描述如下：</p>
<blockquote>
<p>前后端彻底分离的情况下，页面跳转页全部由前端控制。那么如何更好的处理动态url地址？<br>例如本问题的url为<br><a href="https://www.zhihu.com/question/38802932">https://www.zhihu.com/question/38802932</a><br>这肯定是用后台路由处理的url</p>
<p>纯前端怎么处理？用hash吗，如下:<br><a href="https://www.zhihu.com/question#38802932">https://www.zhihu.com/question#38802932</a><br>那如果本页跳转，只改变hash的话，页面不会刷新。<br>使用<code>location.reload()</code>倒是可以解决。</p>
<p><strong>但总觉得这样处理不够优雅。大家在工作中是如何处理此类场景的？还是用传统的后台路由来提供动态url？</strong></p>
</blockquote>
<p>感谢郑海波和剧中人的热心回答。都提到了<code>history</code>对象中的<code>pushState</code>，这是我第一次接触到这方面的内容（顿时觉得自己真是才疏学浅）。</p>
<p>同时也有人提到了<code>pjax</code>，这个就是<code>pushState</code>+<code>Ajax</code>的封装，也很有意思。</p>
<p>下面就来研究和实践一下吧。</p>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p><code>window</code>对象通过<code>history</code>对象提供对浏览器历史记录的访问能力。它暴露了一些非常有用的方法和属性，让你在历史记录中自由前进和后退，而在 HTML5 中，更可以操纵历史记录中的数据。</p>
<h3 id="back-forward-go-length"><a href="#back-forward-go-length" class="headerlink" title="back(), forward(), go(), length"></a><code>back()</code>, <code>forward()</code>, <code>go()</code>, <code>length</code></h3><p>浏览器的历史记录就好像一个栈，最新的在最上面，较早之前看过的在下面。</p>
<p>如下图，Chrome的历史记录：</p>
<p><img data-src="http://ww2.sinaimg.cn/large/7011d6cfjw1ezb16fn2bfj20k008htan.jpg" alt="chrome history"></p>
<p>下面介绍怎么在这些历史记录中跳转，但要<strong>注意</strong>，上图中的浏览器历史记录和本文说的 history 还不太同。</p>
<ul>
<li><p><code>back()</code></p>
<p>  在历史记录中后退</p>
<pre><code>  history.back();
</code></pre>
</li>
<li><p><code>forward()</code></p>
<p>  在历史记录中前进</p>
<pre><code>  history.forward();
</code></pre>
</li>
<li><p><code>go()</code></p>
<p>  移动到指定的历史记录点</p>
<pre><code>  history.go(-1);
</code></pre>
<p>  通过指定一个相对于当前页面位置的数值，你可以使用go()方法从当前会话的历史记录中加载页面（当前页面位置索引值为0，上一页就是-1，下一页为1）。</p>
<p>  <strong>go()不填参数或参数为go(0)时，页面会刷新，即<code>history.go()</code>或<code>history.go(0)</code>相当于<code>location.reload()</code></strong></p>
</li>
<li><p><code>length</code></p>
<p>  <code>length</code>为history的属性，显示history长度。</p>
</li>
</ul>
<p>本节在线demo见：<a href="http://gaohaoyang.github.io/history-pjax-demo/">History &amp; pjax demo</a> 源代码：<a href></a></p>
<p><strong>经过亲自测试，<code>history</code>对象只记录同一个 tab 页内的历史。如果是在新窗口打开的，则无效。如：在a标签中添加<code>target=&quot;_blank&quot;</code>，或按住<code>ctrl</code>点击，这类场景下，在新的tab页中，<code>history</code>对象也是新的。</strong></p>
<p><strong>且<code>history</code>对象记录的信息与是否同源也无关，所以唯一要满足的就是同一个标签页。</strong></p>
<h3 id="pushState-replaceState"><a href="#pushState-replaceState" class="headerlink" title="pushState(), replaceState()"></a><code>pushState()</code>, <code>replaceState()</code></h3><p>HTML5 引进了<code>history.pushState()</code>方法和<code>history.replaceState()</code>方法，它们允许你逐条地添加和修改历史记录条目，能够在不加载新页面的情况下没改变浏览器的URL。这些方法可以协同<code>window.onpopstate</code>事件一起工作。</p>
<p>使用<code>history.pushState()</code>会改变<code>referrer</code>的值，而在你调用方法后创建的  XMLHttpRequest 对象会在 HTTP 请求头中使用这个值。<code>referrer的</code>值则是创建  XMLHttpRequest 对象时所处的窗口的 URL。</p>
<ul>
<li><p><code>pushState(any data, string title, [string url])</code></p>
<p>  第一个参数为<code>history</code>对象的<code>state</code>属性值，可以放任意数据，记录历史状态。第二个参数是新状态的标题，目前浏览器基本不支持。第三个参数为可选的相对url。</p>
<p>  执行<code>pushState</code>后，可以在不加载新页面的情况下，更改url。同时<code>history</code>栈中新增一条数据。</p>
<p>  例如，我们有这样一段代码：</p>
<pre><code>  &lt;button id=&quot;push1&quot;&gt;pushState()&lt;/button&gt;

  document.querySelector(&#39;#push1&#39;).addEventListener(&#39;click&#39;, function() &#123;
      history.pushState(&#39;abc&#39;,&#39;pushStatePageTitle&#39;,&#39;pushState.html&#39;);
      document.querySelector(&#39;#length&#39;).innerHTML = history.length;//重新读取历史长度
  &#125;);
</code></pre>
<p>  当点击按钮的时候，页面不会刷新，但<code>url</code>地址的最后已经变为<code>pushState.html</code>。这一点非常像<code>hash</code>的作用，但比<code>hash</code>更优雅。</p>
</li>
</ul>
<ul>
<li><p><code>replaceState(any data, string title, [string url])</code></p>
<p>  与<code>pushState()</code>类似，只是在<code>history</code>栈中不是新增记录，而是替换一条记录。</p>
</li>
</ul>
<p><strong>需要注意的是：</strong><code>pushState()</code>和<code>replaceState()</code>方法存在安全方面的限制，本地测试是无效的，会报错，可以简单放到任何服务端测试，或者使用<code>http-server</code>开启简单服务器，通过访问<code>localhost</code>来查看效果。</p>
<p>本节demo见：<a href="http://gaohaoyang.github.io/history-pjax-demo/index.html">History &amp; pjax demo - pushState</a></p>
<h2 id="pjax"><a href="#pjax" class="headerlink" title="pjax"></a>pjax</h2><p>现在再看本文一开始提出的问题，如何让前端优雅的控制 url，这里就可以考虑 pjax 技术了。我们把 pushState + ajax 进行封装，合起来简称为 pjax。虽然不是什么新的技术，但概念已然不同。</p>
<p>如果不使用 pjax。我们依然可以使用<code>hash</code>来实现文本开始的需求。但会不利于 SEO，看着也不够优雅。</p>
<p>Pjax的原理十分简单。</p>
<ol>
<li>拦截 a 标签的默认跳转动作或某些按钮的点击事件。</li>
<li>使用 Ajax 请求新页面。</li>
<li>将返回的 Html 替换到页面中。</li>
<li>使用 HTML5 的<code>pushState()</code>修改Url。</li>
</ol>
<p>个人理解3中也可以仅仅请求数据，再由浏览器渲染。</p>
<p>每当同一个文档的浏览历史（即history对象）出现变化时，会触发<code>window.onpopstate</code>事件。</p>
<pre><code>window.onpopstate = function(event) &#123;
    console.log(event.state);
    console.log(location);
&#125;;
</code></pre>
<p>这样在用户点击前进后退时也可以很好的监听url，来做相应的页面渲染。</p>
<p>若用户刷新了页面，但没有相应的页面资源，这时页面就会显示不存在。所以我认为较好的方法是在写<code>pushState()</code>第三个参数的时候，写为<code>?a=1</code>这样的参数形式。<a href="https://github.com/browserstate/history.js">History.js</a> 也是这么写的。但是这样应该会多一次请求。也许使用 nodeJS 作为中间层会好一些吧。</p>
<p>对于上述的探索，不知道是不是我还不够深入，总觉得还是不够完美。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/History">MDN History</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/DOM/Manipulating_the_browser_history">MDN 操纵浏览器的历史记录</a></li>
<li><a href="https://www.zhihu.com/question/20289254">pjax 是如何工作的？ 知乎</a></li>
<li><a href="http://www.cnblogs.com/hustskyking/p/history-api-in-html5.html">PJAX的实现与应用 小胡子哥</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/03/url_hash.html">URL的井号-阮一峰</a></li>
<li><a href="http://javascript.ruanyifeng.com/bom/history.html">history对象 JavaScript 标准参考教程（alpha） 阮一峰</a></li>
<li><a href="http://www.ayqy.net/blog/pjaxpushstate-and-ajax/">Pjax(pushState and Ajax) 黯羽轻扬</a></li>
<li><a href="http://www.clanfei.com/2012/09/1646.html">操纵历史，利用HTML5 History API实现无刷新跳转 蓝飞</a></li>
<li><a href="http://segmentfault.com/a/1190000002920768">前端：将网站打造成单页面应用SPA（一） Coffce</a></li>
<li><a href="https://github.com/Coffcer/coffce-pjax">coffce-pjax</a></li>
<li><a href="https://github.com/browserstate/history.js">History.js</a></li>
<li><a href="https://github.com/defunkt/jquery-pjax">defunkt/jquery-pjax GitHub</a></li>
<li><a href="https://github.com/welefen/pjax">welefen/pjax</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的闭包</title>
    <url>//post/JavaScript-closure.html</url>
    <content><![CDATA[<h2 id="闭包的例子"><a href="#闭包的例子" class="headerlink" title="闭包的例子"></a>闭包的例子</h2><pre><code>function outer() &#123;
    var localVal = 30;
    return localVal;
&#125;

console.log(outer()); //30

function outer2() &#123;
    var localVal = 30;
    return function() &#123;
        return localVal;
    &#125;;
&#125;

var func = outer2();
console.log(func()); //30
</code></pre>
<p>对于第一个普通的函数，在执行过之后，它的局部变量就可以被释放。</p>
<p>对于第二个函数，<code>localVal</code> 是不能被释放的。因为调用 <code>outer2()</code> 后，返回的是匿名函数，匿名函数可以访问外部的 <code>outer2()</code> 中的局部变量，并返回了这个局部变量 localVal。当 <code>outer2()</code> 赋值给 <code>func</code> 后，再次调用 <code>func()</code>，仍能访问到局部变量 <code>localVal</code>。这种情况就是闭包。</p>
<span id="more"></span>
<hr>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li><p><strong>所谓闭包就是：子函数可以使用父函数中的局部变量。</strong></p>
<pre><code>  ! function() &#123;
      var localData = &quot;localData here&quot;;
      document.addEventListener(&#39;click&#39;,
          function() &#123;
              console.log(localData); //这里访问外部数据
          &#125;);
  &#125;();

  ! function() &#123;
      var localData = &quot;localData here&quot;;
      var url = &quot;http://www.baidu.com/&quot;;
      $.ajax(&#123;
          url: url,
          success: function() &#123;
              // do sth...
              console.log(localData); //这里访问外部数据
          &#125;
      &#125;);
  &#125;()
</code></pre>
</li>
</ul>
<hr>
<h2 id="常见错误之循环闭包"><a href="#常见错误之循环闭包" class="headerlink" title="常见错误之循环闭包"></a>常见错误之循环闭包</h2><p>比如我们想循环绑定点击事件</p>
<pre><code>document.body.innerHTML = &quot;&lt;div id=div1&gt;aaa&lt;/div&gt;&lt;div id=div2&gt;bbb&lt;/div&gt;&lt;div id=div3&gt;ccc&lt;/div&gt;&quot;;
for (var i = 1; i &lt; 4; i++) &#123;
    document.getElementById(&#39;div&#39; + i).
    addEventListener(&#39;click&#39;, function() &#123;
        alert(i); // all are 4!
    &#125;);
&#125;
</code></pre>
<p>上面的代码，我们点击任何一个 div，弹出的都是 4</p>
<p>这是因为，for 循环中的 i 是一个全局变量。这里内函数的点击事件，访问到的是循环后的 i 值，所以是 4</p>
<pre><code>document.body.innerHTML = &quot;&lt;div id=div1&gt;aaa&lt;/div&gt;&lt;div id=div2&gt;bbb&lt;/div&gt;&lt;div id=div3&gt;ccc&lt;/div&gt;&quot;;
for (var i = 1; i &lt; 4; i++) &#123;
    ! function(i) &#123;
        document.getElementById(&#39;div&#39; + i).
        addEventListener(&#39;click&#39;, function() &#123;
            alert(i); // 1, 2, 3
        &#125;);
    &#125;(i);
&#125;
</code></pre>
<p>这里使用了立即执行函数，并给匿名函数赋值 i，这样点击事件每一次就会访问到相应的 i。</p>
<hr>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><pre><code>(function() &#123;
    var _userId = 9527;
    var _typeId = &quot;item&quot;;
    var exp = &#123;&#125;;

    function converter(userId) &#123;
        return +userId;
    &#125;

    exp.getUserId = function() &#123;
        return converter(_userId);
    &#125;;

    exp.getTypeId = function() &#123;
        return _typeId;
    &#125;;

    window.a = exp;
&#125;)();

console.log(a.getUserId()); //9527
console.log(a.getTypeId()); //item

console.log(a._userId); //undefined
console.log(a._typeId); //undefined
console.log(converter); //Uncaught ReferenceError: converter is not defined
</code></pre>
<p>上面的代码通过闭包实现了一个封装。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<ul>
<li><p>在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。</p>
</li>
<li><p>闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。</p>
</li>
</ul>
<p>from 维基百科</p>
</blockquote>
<ul>
<li><p>闭包的优点</p>
<ul>
<li>灵活和方便</li>
<li>封装</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>空间浪费</li>
<li>内存泄露</li>
<li>性能消耗</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 面向对象</title>
    <url>//post/JavaScript-Object-Oriented.html</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>面向对象程序设计（Object-oriented programming，OOP）是一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。</p>
<p>——维基百科</p>
</blockquote>
<span id="more"></span>
<p>一般面向对象包含：继承，封装，多态，抽象</p>
<hr>
<h2 id="基于原型的继承"><a href="#基于原型的继承" class="headerlink" title="基于原型的继承"></a>基于原型的继承</h2><pre><code>function Foo() &#123;
    this.y = 2;
&#125;
console.log(typeof Foo.prototype); //object

Foo.prototype.x = 1;
var obj3 = new Foo();

console.log(obj3.y); //2
console.log(obj3.x); //1
</code></pre>
<p>创建函数 <code>Foo</code> 的时候，就会有一个内置的 <code>Foo.prototype</code> 属性，并且这个属性是对象。</p>
<p>在使用 <code>new Foo();</code> 创建对象实例时。<code>this</code> 会指向一个对象，并且这个对象的原型会指向 <code>Foo.prototype</code> 属性。<code>this.y = 2</code> 给这个对象赋值，并把这个对象返回。把这个对象赋值给 <code>obj3</code>。</p>
<p><code>y</code> 是 <code>obj3</code> 上的，<code>x</code> 是 <code>obj3</code> 的原型 <code>Foo.prototype</code> 上的。</p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-prototype.png" alt="prototype"></p>
<hr>
<h3 id="prototype-属性与原型"><a href="#prototype-属性与原型" class="headerlink" title="prototype 属性与原型"></a>prototype 属性与原型</h3><p>prototype 是函数对象上预设的对象属性。</p>
<p>原型是对象上的原型，通常是构造器的 prototype 属性。</p>
<hr>
<h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><pre><code>function Person(name, age) &#123;
    this.name = name;
    this.age = age;
&#125;

Person.prototype.LEGS_NUM = 2;
Person.prototype.ARMS_NUM = 2;

Person.prototype.hi = function() &#123;
    console.log(&#39;Hi, my name is &#39; + this.name + &quot;. I&#39;m &quot; + this.age + &#39; years old now&#39;);
&#125;;

Person.prototype.walking = function() &#123;
    console.log(this.name + &#39; is walking...&#39;);
&#125;;

function Student(name, age, className) &#123;
    Person.call(this, name, age); //使 Person 中的 this 指向 Student
    this.className = className;
&#125;

Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;

Student.prototype.hi = function() &#123;
    console.log(&#39;Hi, my name is &#39; + this.name + &quot;. I&#39;m &quot; + this.age + &#39; years old now, and from &#39; + this.className + &quot;.&quot;);
&#125;;

Student.prototype.learn = function(subject) &#123;
    console.log(this.name + &#39; is learning &#39; + subject + &#39; at &#39; + this.className + &#39;.&#39;);
&#125;

//test
var gao = new Student(&#39;Gao&#39;, &#39;24&#39;, &#39;Class 3123&#39;);
console.log(gao); // 这个对象的具体内容见下图
gao.hi(); //Hi, my name is Gao. I&#39;m 24 years old now, and from Class 3123.
gao.LEGS_NUM; //2
gao.walking(); //Gao is walking...
gao.learn(&#39;JavaScript&#39;); //Gao is learning JavaScript at Class 3123.
</code></pre>
<ul>
<li><code>Object.create(arg)</code> 创建一个空对象，并且这个对象的原型指向参数 <code>arg</code>。</li>
<li><code>Student.prototype.constructor = Student</code> 为了保证一致性，否则 constructor 指向 Person。</li>
</ul>
<hr>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>gao 对象的原型链：</p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-oop-gao.png" alt="Object"></p>
<p>下面通过图形展示原型链：</p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链"></p>
<hr>
<h4 id="Object-create-null-amp-bind-null"><a href="#Object-create-null-amp-bind-null" class="headerlink" title="Object.create(null) &amp; .bind(null)"></a><code>Object.create(null)</code> &amp; <code>.bind(null)</code></h4><p>这两种算是特例。</p>
<p><code>Object.create(null)</code> 和 <code>.bind(null)</code> 这两种方式创建出来的对象是没有 <code>prototype</code> 属性的，为 <code>undefined</code>。</p>
<hr>
<h2 id="prototype-属性"><a href="#prototype-属性" class="headerlink" title="prototype 属性"></a>prototype 属性</h2><h3 id="改变-prototype"><a href="#改变-prototype" class="headerlink" title="改变 prototype"></a>改变 prototype</h3><p>JavaScript 中的 prototype 是对象，在运行的时候可以修改。</p>
<p>给 prototype 添加或删除一些属性，是会影响到已经创建好的实例对象的。</p>
<p>但是，直接修改 prototype 属性，是不会影响到已经创建好的实例对象的。但是会影响到新的实例对象。如下代码：</p>
<pre><code>// 上接上面的代码

// 给 prototype 添加或删除一些属性
Student.prototype.x = 101;
console.log(gao.x); //101

// 直接修改 prototype 属性
Student.prototype = &#123;
    y: 2
&#125;;

// 不会影响到已创建好的实例对象
console.log(gao.x); //101
console.log(gao.y); //undefined

// 会影响到新创建的实例对象
var ying = new Student(&#39;Ying&#39;, 24, &#39;UI&#39;);
console.log(ying.x); //undefined
console.log(ying.y); //2
</code></pre>
<hr>
<h3 id="内置构造器的-prototype-属性"><a href="#内置构造器的-prototype-属性" class="headerlink" title="内置构造器的 prototype 属性"></a>内置构造器的 <code>prototype</code> 属性</h3><p>修改内置构造器的 <code>prototype</code> 属性后，在实例化这个对象后，枚举其属性时，会把修改的内置构造器的 <code>prototype</code> 属性也枚举出来，有时候这是要避免的。可用 <code>defineProperty</code> 方法解决。如下代码：</p>
<pre><code>Object.prototype.x = 1;
var obj = &#123;&#125;;
console.log(obj.x); //1
console.log(obj);

for (var k in obj) &#123;
    console.log(&#39;result---&gt;&#39; + k);
&#125;
// result---&gt;x
</code></pre>
<p>使用 <code>defineProperty</code> 后：</p>
<pre><code>Object.defineProperty(Object.prototype, &#39;x&#39;, &#123;
    writable: true,
    value: 1
&#125;);
var obj = &#123;&#125;;
console.log(obj.x);//1
console.log(obj);
for (var k in obj) &#123;
    console.log(&#39;result---&gt;&#39; + k);
&#125;
// nothing output here
</code></pre>
<p>其实也可以这样枚举，使用 <code>hasOwnProperty</code> 方法：</p>
<pre><code>for (var key in obj) &#123;
    if (obj.hasOwnProperty(key)) &#123;
        console.log(&quot;result---&gt;&quot; + key);
    &#125;
&#125;
</code></pre>
<hr>
<h3 id="创建对象-new-原型链"><a href="#创建对象-new-原型链" class="headerlink" title="创建对象-new/原型链"></a>创建对象-new/原型链</h3><p>![prototype](<a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-new">http://7q5cdt.com1.z0.glb.clouddn.com/blog-new</a> prototype.png)</p>
<hr>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><pre><code>console.log([1, 2] instanceof Array); //true
console.log([1, 2] instanceof Object); //true
console.log(new Object() instanceof Array); //false
</code></pre>
<p>左边要求是对象，右边要求是构造器或函数。它会判断：<strong>右边的构造器中的 <code>prototype</code> 属性是否出现在左边的对象的原型链上。</strong></p>
<ul>
<li><strong>注意：</strong>不同的 window 或 iframe 间的对象类型检测<strong>不能</strong>使用 <code>instanceof</code>！</li>
</ul>
<hr>
<h2 id="实现继承的方式"><a href="#实现继承的方式" class="headerlink" title="实现继承的方式"></a>实现继承的方式</h2><pre><code>function Person() &#123;&#125;

function Student() &#123;&#125;

Student.prototype = Person.prototype; //1

Student.prototype = new Person(); //2

Student.prototype = Object.create(Person.prototype); //3

Student.prototype.constructor = Student;
</code></pre>
<p>注释中：</p>
<p>1 是错误的。如果改变了 Student 就会改变 Person</p>
<p>2 可以实现继承，但是其调用了构造函数，若父类构造函数中有形参，那么传值就会比较奇怪。</p>
<p>3 是最好的方法。创建了一个空对象，并且对象的原型指向参数 Person.prototype。这样便实现了继承。同时原型链写，不向上查找。但是 <code>Object.create</code> 是ES5 中的方法，所以可以使用下列代码做兼容：</p>
<pre><code>if (!Object.create) &#123;
    Object.create = function(proto) &#123;
        function F() &#123;&#125;
        F.prototype = proto;
        return new F;
    &#125;;
&#125;
</code></pre>
<hr>
<h2 id="模拟重载"><a href="#模拟重载" class="headerlink" title="模拟重载"></a>模拟重载</h2><pre><code>function Person() &#123;
    var args = arguments;
    if (typeof args[0] === &#39;object&#39; &amp;&amp; args[0]) &#123;
        if (args[0].name) &#123;
            this.name = args[0].name;
        &#125;
        if(args[0].age)&#123;
            this.age = args[0].age;
        &#125;
    &#125; else &#123;
        if (args[0]) &#123;
            this.name = args[0];
        &#125;
        if (args[1]) &#123;
            this.age = args[1];
        &#125;
    &#125;
&#125;

//重写 toString 方法
Person.prototype.toString = function() &#123;
    console.log(&#39;name=&#39;+this.name+&#39;, age=&#39;+this.age);
&#125;;

var gao = new Person(&#123;name:&#39;Gao&#39;,age:24&#125;);
gao.toString(); // name=Gao, age=24

var ying = new Person(&#39;Ying&#39;,25);
ying.toString(); // name=Ying, age=25
</code></pre>
<p>对参数进行判断，模拟实现重载。</p>
<hr>
<h2 id="调用子类方法"><a href="#调用子类方法" class="headerlink" title="调用子类方法"></a>调用子类方法</h2><pre><code>function Person(name) &#123;
    this.name = name;
&#125;

function Student(name, className) &#123;
    this.className = className;
    Person.call(this, name); // 调用基类的构造器
&#125;

var gao = new Student(&#39;Gao&#39;, &#39;3123&#39;);
console.log(gao); // Student &#123;className: &quot;3123&quot;, name: &quot;Gao&quot;&#125;

Person.prototype.init = function() &#123;&#125;;

Student.prototype.init = function() &#123;
    // do sth...
    Person.prototype.init.apply(this, arguments); // 同时也想调用父类被覆盖的方法
&#125;;
</code></pre>
<p>主要是两种：调用父类的构造器，调用原型链上父类被覆盖的方法。</p>
<hr>
<h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><pre><code>function ClassManager() &#123;&#125;
ClassManager.prototype.addClass = function(str) &#123;
    console.log(&#39;Class: &#39; + str + &#39; added&#39;);
    return this;
&#125;;

var manager = new ClassManager();
manager.addClass(&#39;classA&#39;).addClass(&#39;classB&#39;).addClass(&#39;classC&#39;);
// Class: classA added
// Class: classB added
// Class: classC added
</code></pre>
<p>重点在于 return this。返回这个 ClassManager 的实例。这样这个实例又可以继续调用方法。</p>
<hr>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>在构造器中 <code>throw new Error(&#39;&#39;);</code> 抛异常。这样防止这个类被直接调用。</p>
<pre><code>function DetectorBase() &#123;
    throw new Error(&#39;Abstract class can not be invoked directly!&#39;);
&#125;

DetectorBase.detect = function() &#123;
    console.log(&#39;Detection starting...&#39;);
&#125;
DetectorBase.stop = function() &#123;
    console.log(&#39;Detection stopped.&#39;);
&#125;;
DetectorBase.init = function() &#123;
    throw new Error(&#39;Error&#39;);
&#125;

var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly!

function LinkDetector() &#123;&#125;
LinkDetector.prototype = Object.create(DetectorBase.prototype);
LinkDetector.prototype.constructor = LinkDetector;

var l = new LinkDetector();
console.log(l); //LinkDetector &#123;&#125;__proto__: LinkDetector
l.detect(); //Uncaught TypeError: l.detect is not a function
l.init(); //Uncaught TypeError: l.init is not a function
</code></pre>
<p><code>var d = new DetectorBase();</code> 是不能实例化的，会报错</p>
<p><code>l.detect();</code> 但是这个为什么报错我就不知道了。</p>
<p>已经在原课程下提问了，期待老师的讲解。 <a href="http://www.imooc.com/qadetail/82732">抽象类中子类为什么不能调用父类的非抽象方法？</a></p>
<p>问题已经解决了，应该是老师当时的课件写错了，应该再基类中将这两个方法写在其原型 prototype 上。如下：</p>
<pre><code>function DetectorBase() &#123;
    throw new Error(&#39;Abstract class can not be invoked directly!&#39;);
&#125;

DetectorBase.prototype.detect = function() &#123;
    console.log(&#39;Detection starting...&#39;);
&#125;;
DetectorBase.prototype.stop = function() &#123;
    console.log(&#39;Detection stopped.&#39;);
&#125;;
DetectorBase.prototype.init = function() &#123;
    throw new Error(&#39;Error&#39;);
&#125;;

// var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly!

function LinkDetector() &#123;&#125;
LinkDetector.prototype = Object.create(DetectorBase.prototype);
LinkDetector.prototype.constructor = LinkDetector;

var l = new LinkDetector();
console.log(l); //LinkDetector &#123;&#125;__proto__: LinkDetector
l.detect(); //Detection starting...
l.init(); //Uncaught Error: Error
</code></pre>
<hr>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><pre><code>var moduleA;
moduleA = function() &#123;
    var prop = 1;

    function func() &#123;&#125;

    return &#123;
        func: func,
        prop: prop
    &#125;;
&#125;(); // 立即执行匿名函数
</code></pre>
<p>prop，func 不会被泄露到全局作用域。</p>
<p>或者另一种写法，使用 new</p>
<pre><code>moduleA = new function() &#123;
    var prop = 1;

    function func() &#123;&#125;

    this.func = func;
    this.prop = prop;
&#125;
</code></pre>
<p>更复杂的可以使用 Sea.js Kissy Require.js 模块化工具。</p>
<hr>
<p>最后补充一点设计模式相关的资料，我还没有来得及看的：</p>
<ul>
<li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns">学用 JavaScript 设计模式</a></li>
<li><a href="http://blog.jobbole.com/29454/">常用的Javascript设计模式</a></li>
<li><a href="http://developer.51cto.com/art/201109/288650_all.htm">JavaScript设计模式深入分析</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 函数</title>
    <url>//post/JavaScript-function.html</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>函数是一块JavaScript代码，被定义一次，但可执行和调用多次。</p>
<p>JS中的函数也是对象，所以JS函数可以像其它对象那样操作和传递。</p>
<p>所以我们也常叫JS中的函数为函数对象。</p>
<span id="more"></span>

<p>例如：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span>
        <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一般由3部分组成：</p>
<ul>
<li>函数名</li>
<li>参数列表</li>
<li>函数体</li>
</ul>
<h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><ul>
<li>直接调用</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>对象方法</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">o<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>构造器</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>call/apply/bind</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>就是对函数进行普通的声明</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><ul>
<li>将函数赋值给变量</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//function variable</span>
<span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// body...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>立即执行函数</p>
<p>  把匿名函数用括号括起来，再直接调用。</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// IEF(Immediately Executed Function)</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// body...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>函数对象作为返回值</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// body...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>命名式函数表达式</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//NFE(Named Function Expression)</span>
<span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// body...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里大家肯定会好奇，这个函数怎么调用？到底用哪个名字呢？</p>
<p>做一个测试：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">nfe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func <span class="token operator">===</span> nfe<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在 IE6~8，得到 false</span>
<span class="token comment">// 在 IE9+ 及现代浏览器中 Uncaught ReferenceError: nfe is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么命名函数表达式有什么使用场景呢？</p>
<ul>
<li>一般用于调试方便，如果使用匿名函数，执行的时候看不到函数名，命名函数表达式是可以看到函数名的。</li>
<li>或者在递归时，使用名字调用自己。</li>
</ul>
<p>但是这两种用法都不常见。</p>
<h3 id="变量-amp-函数的声明前置"><a href="#变量-amp-函数的声明前置" class="headerlink" title="变量 &amp; 函数的声明前置"></a>变量 &amp; 函数的声明前置</h3><p>举两个例子</p>
<p>例1，函数声明：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例2，函数表达式：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例1中得到的结果是 3，而例2中是 <code>Uncaught TypeError: add is not a function</code>。</p>
<p>因为函数和变量在声明的时候，会被前置到当前作用域的顶端。例1将函数声明 <code>function add(a, b)</code> 前置到作用域前端，例2将声明 <code>var add</code> 前置到其作用域的前端了，并没有赋值。<strong>赋值的过程是在函数执行到响应位置的时候才进行的</strong>。</p>
<h3 id="Function-构造器"><a href="#Function-构造器" class="headerlink" title="Function 构造器"></a>Function 构造器</h3><p>除了函数声明、函数表达式。还有一种创建函数对象的方式，是使用函数构造器。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'console.log(a+b);'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>

<span class="token keyword">var</span> func2 <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'console.log(a+b);'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Function 中前面的参数为后面函数体的形参，最后一个参数为函数体。可以看到传入的都是字符串，这样的创建函数对象的方法是不安全的。</p>
<p>还有一点，Function 构造器的得到的函数对象，拿不到外层函数的变量，但是可以拿到全局变量。它的作用域与众不同，这也是很少使用的原因之一。</p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-function.png" alt="函数对比"></p>
<hr>
<h2 id="函数属性-amp-arguments"><a href="#函数属性-amp-arguments" class="headerlink" title="函数属性 &amp; arguments"></a>函数属性 &amp; arguments</h2><h3 id="函数属性-amp-arguments-1"><a href="#函数属性-amp-arguments-1" class="headerlink" title="函数属性 &amp; arguments"></a>函数属性 &amp; arguments</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 2</span>
    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    x<span class="token punctuation">;</span> <span class="token comment">// change to 10</span>

    arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    z<span class="token punctuation">;</span> <span class="token comment">// still undefined!!!</span>
    arguments<span class="token punctuation">.</span>callee <span class="token operator">===</span> foo<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 3</span>
foo<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">//"foo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>foo.name</code> 函数名</li>
<li><code>foo.length</code> 形参个数</li>
<li><code>arguments.length</code> 实参个数</li>
</ul>
<p>未传参数时，arguments[i] 相应的位置仍然是 undefined。</p>
<p>严格模式下，代码中的改变实参失效。即 x 仍为 1。同时 callee 属性失效。</p>
<ul>
<li><p>关于 <code>callee</code></p>
<p>  callee 属性的初始值就是正被执行的 Function 对象。</p>
<p>  callee 属性是 arguments 对象的一个成员，它表示对函数对象本身的引用，这有利于匿名函数的递归或者保证函数的封装性，例如下边示例的递归计算1到n的自然数之和。而该属性仅当相关函数正在执行时才可用。还有需要注意的是callee拥有length属性，这个属性有时用于验证还是比较好的。</p>
<p>  arguments.length是实参长度，arguments.callee.length是形参长度，由此可以判断调用时形参长度是否和实参长度一致。</p>
</li>
</ul>
<h3 id="apply-call-方法（浏览器）"><a href="#apply-call-方法（浏览器）" class="headerlink" title="apply/call 方法（浏览器）"></a>apply/call 方法（浏览器）</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1 2 Number &#123;[[PrimitiveValue]]: 100&#125;</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3 4 Boolean &#123;[[PrimitiveValue]]: true&#125;</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined undefined Window</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined undefined Window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>call/apply 的作用：调用一个对象的一个方法，以另一个对象替换当前对象(其实就是更改对象的内部指针，即改变对象的this指向的内容)。</li>
<li>call/apply 的第一个参数为对象，即使不是对象，也会被包装为对象。</li>
<li>call 为扁平化传参，apply 后面的参数为数组</li>
<li>传入 null/undefined 时，实际为 Window 对象</li>
<li>在严格模式下：上述代码最后两行分别输出 <code>null</code>, <code>undefined</code></li>
</ul>
<h3 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind 方法"></a>bind 方法</h3><p><code>bind</code> 是 ES5 中提出的方法，所以浏览器支持为 IE9+ 及现代浏览器。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">81</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getX</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//81</span>

<span class="token keyword">var</span> getX <span class="token operator">=</span> module<span class="token punctuation">.</span>getX<span class="token punctuation">;</span>
<span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9</span>

<span class="token keyword">var</span> boundGetX <span class="token operator">=</span> <span class="token function">getX</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">boundGetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>bind</code> 主要用于改变函数中的 <code>this</code></p>
<ul>
<li><code>module.getX(); </code> 直接通过对象调用自己的方法，结果是 81</li>
<li><code>var getX = module.getX;</code> 将这个方法赋值给一个全局变量，这时 this 指向了 Window，所以结果为 9</li>
<li><code>var boundGetX = getX.bind(module);</code> 使用 bind 绑定了自己的对象，这样 this 仍然指向 module 对象，所以结果为 81</li>
</ul>
<h4 id="bind-与-currying"><a href="#bind-与-currying" class="headerlink" title="bind 与 currying"></a>bind 与 currying</h4><p>bind 可以使函数柯里化，那么什么是柯里化？</p>
<blockquote>
<p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//103</span>

<span class="token keyword">var</span> func2 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//310</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>add 函数拥有 3 个参数。我们想先传入一个参数，再去传其他参数。</p>
<p><code>var func = add.bind(undefined, 100);</code> add 函数对象调用 bind 方法，由于不需要将 this 指向原来的 add 函数对象，所以第一个参数写为 undefined 或 null。第二个参数 100 传给了 add 函数中的形参 a，并赋值给一个新的函数对象 func。</p>
<p>这时，<code>func(1, 2)</code> 即相当于传入后两个参数，所以结果为 103。</p>
<p>同理，基于 func 可以创造一个函数 func2。它只用传最后一个参数。</p>
<h4 id="bind-与-new"><a href="#bind-与-new" class="headerlink" title="bind 与 new"></a>bind 与 new</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>

<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//foo &#123;b: 100&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于使用了 <code>new func()</code> 这种方式创建对象，其返回值为一个对象。</p>
<p>而原函数 foo 的返回值不是对象，所以会直接忽视这个 return 方法。而是变为 <code>return this;</code>。并且 this 会被初始化为一个空对象，这个空对象的原型指向 foo.prototype。所以后面的 bind 是不起作用的。</p>
<p>这里面这个 this 对象包含一个属性 <code>b = 100</code>。所以返回的是对象 <code>&#123;b: 100&#125;</code>。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 语言精粹笔记1-语法、对象、函数</title>
    <url>//post/JavaScript-good-parts-note1.html</url>
    <content><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。</p>
<p><img data-src="https://img3.doubanio.com/lpic/s3651235.jpg"></p>
<p>原书中第一章为精华，做了一些周边介绍，略去。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h3><p>这里说一下JavaScript的注释，一种是 <code>/* */</code> 包围的块注释，另一种是 <code>//</code> 开头的行注释。</p>
<p>因为块注释的字符可能是JavaScript中正则表达式字面量，因此不是很安全，如：</p>
<span id="more"></span>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*
    var rm_a = /a*/</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">*</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符由一个字母开头，后面可选择性的加上一个或多个字母、数字或下划线。要避免保留字。</p>
<p>标识符被用于语句、变量、参数、属性名、运算符和标记。</p>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>可以存在指数部分，100和1e2完全相等</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">100</span> <span class="token operator">===</span> <span class="token number">1e2</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用<code>isNaN</code>来检测<code>NaN</code>。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>当年 JavaScript 被创建的时候，Unicode 是16位字符集，因此 JavaScript 字符串是16位的。</p>
<p>用双引号或单引号包裹。</p>
<p>重点说一下转义字符<code>\</code></p>
<p>反斜杠后面可以跟<code>&quot;</code>, <code>&#39;</code>, <code>\</code>, <code>/</code>, <code>b</code> (backspace), <code>f</code> (formfeed), <code>n</code>, <code>r</code> (carriage return), <code>t</code>, <code>u1234</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">'A'</span> <span class="token operator">===</span> <span class="token string">'\u0041'</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>每个<code>&lt;script&gt;</code>标签的内容被一起抛到一个公共的全局名字空间中。</p>
<p><code>&#123;...&#125;</code>代码块不会创建新的作用域，因此变量应该被定义在函数的头部，而不是在代码块中。</p>
<p>下列值当做假：</p>
<ul>
<li><code>false</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
<li><code>&#39;&#39;</code></li>
<li><code>0</code></li>
<li><code>NaN</code></li>
</ul>
<p>其他所有值都当做真</p>
<p><code>for in</code>语句枚举对象的所有属性名（键名），使用<code>object.hasOwnProperty(variable)</code>来确定这个属性名是该对象成员，还是来自原型链。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>myvar <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>myvar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>运算符优先级</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.</code> <code>[]</code> <code>()</code></td>
<td>提取属性与调用函数</td>
</tr>
<tr>
<td><code>delete</code> <code>new</code> <code>typeof</code> <code>+</code> <code>-</code> <code>!</code></td>
<td>一元运算符</td>
</tr>
<tr>
<td><code>*</code> <code>/</code> <code>%</code></td>
<td></td>
</tr>
<tr>
<td><code>+</code> <code>-</code></td>
<td></td>
</tr>
<tr>
<td><code>&gt;=</code> <code>&lt;=</code> <code>&gt;</code> <code>&lt;</code></td>
<td></td>
</tr>
<tr>
<td><code>===</code> <code>!==</code></td>
<td></td>
</tr>
<tr>
<td><code>&amp;&amp;</code></td>
<td>逻辑与</td>
</tr>
<tr>
<td>`</td>
<td></td>
</tr>
<tr>
<td><code>?:</code></td>
<td>三目</td>
</tr>
</tbody></table>
<h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>对象字面量是一种可以方便地按指定规格创建新对象的表示法。</p>
<p>数组字面量是一种可以方便地按指定规格创建新数组的表示法。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数字面量定义了函数值。后续章节详谈。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是属性的容器，每一个属性都拥有名字和值。属性的名字可以是包含空字符串在内的任意字符串。属性的值可以是除<code>undefined</code>值之外的任何值。</p>
<p>JavaScript 包含一种原型链的特性，允许对象继承另一个对象的属性。正确地使用它能减少对象初始化时消耗的时间和内存。</p>
<h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p>一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> empty_object <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> stooge <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'Haoyang'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Gao'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Haoyang</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">[</span><span class="token string">'firstName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Haoyang</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>不存在的属性返回<code>undefined</code>。</p>
<p>使用<code>||</code>来填充默认值。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">.</span>firstName <span class="token operator">||</span> <span class="token string">'Joe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Haoyang</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">.</span>age <span class="token operator">||</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>直接使用赋值语句更新，若不存在这个属性，则作为扩充操作。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">stooge<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">'aaa'</span>
stooge<span class="token punctuation">.</span>nickName <span class="token operator">=</span> <span class="token string">'peip'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">)</span> <span class="token comment">//Object &#123;firstName: "aaa", lastName: "Gao", nickName: "peip"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>对象通过引用来传递他们永远不会被复制。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> stooge
x<span class="token punctuation">.</span>hair <span class="token operator">=</span> <span class="token string">'black'</span>
stooge<span class="token punctuation">.</span>hair <span class="token comment">//"black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>每一个对象都连接到一个原型对象，并且它可以从中继承属性。所有通过字面量创建的对象都连接到<code>Object.prototype</code>，它是JavaScript中的标配对象。</p>
<p>可以使用<code>Object.create()</code>方法创建一个使用原对象作为其原型的新对象。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> anotherStooge <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>stooge<span class="token punctuation">)</span>
anotherStooge<span class="token punctuation">.</span>firstName <span class="token comment">//"aaa"</span>
anotherStooge<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">'bbb'</span>
anotherStooge<span class="token punctuation">.</span>firstName <span class="token comment">//"bbb"</span>
anotherStooge<span class="token punctuation">.</span>hair <span class="token comment">//"black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>新对象先查找自己的属性，若不存在则会向原型方向查找。</p>
<p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4ieu7focqj207h05caaf.jpg"></p>
<p>当我们对某个对象作出改变时，不会触及该对象的原型。</p>
<p>原型关系是一种动态关系。如果我们添加一个新的属性到原型中，该属性会立即对所有基于该原型创建的对象可见。</p>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。</p>
<p>检查对象并确定对象有什么属性是很容易的事情，只要试着去检索该属性并验证取得的值。</p>
<p><code>typeof</code>用来确定对象属性的类型。</p>
<p><code>hasOwnProperty</code>，若对象拥有独有的属性，它将返回<code>true</code>。不会检查原型链。</p>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>使用<code>for in</code>可以遍历一个对象中的所有属性名，包括原型链上的属性名。可以使用<code>hasOwnProperty</code>过滤原型链上的属性，使用<code>typeof</code>来排除函数。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> anotherStooge<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anotherStooge<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> anotherStooge<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'--->'</span> <span class="token operator">+</span> anotherStooge<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// firstName--->bbb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>属性名是无序的，若想保持顺序应使用数组和<code>for</code>循环。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>delete</code>可以用来删除对象的属性。若对象包含该属性，则会被移除。它不会触及原型链中的任何对象。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">anotherStooge<span class="token punctuation">.</span>firstName <span class="token comment">//"bbb"</span>
<span class="token keyword">delete</span> anotherStooge<span class="token punctuation">.</span>firstName
anotherStooge<span class="token punctuation">.</span>firstName <span class="token comment">//"aaa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="减少全局变量污染"><a href="#减少全局变量污染" class="headerlink" title="减少全局变量污染"></a>减少全局变量污染</h3><p>JavaScript 可以随意的定义全局变量来容纳应用的所有资源。但这会削弱程序的灵活性，应避免使用全局变量。</p>
<p>最小化使用全局变量的方法之一是为应用只创建一个唯一的全局变量。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">MYAPP</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token constant">MYAPP</span><span class="token punctuation">.</span>stooge <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>

<span class="token constant">MYAPP</span><span class="token punctuation">.</span>flight <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下一章将使用闭包来进行信息隐藏，是另一种有效减少全局污染的方法。</p>
<h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>JavaScript 中的函数就是对象。函数对象连接到<code>Function.prototype</code>（该原型对象本身连接到<code>Object.prototype</code>）。每个函数对象在创建时会附加两个隐藏属性：函数的上下文和实现函数行为的代码。</p>
<p>函数对象在创建时也随配有一个<code>prototype</code>属性。它的值是一个拥有<code>constructor</code>属性且值即为该函数对象。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4lrei2b3pj208f06et95.jpg"></p>
<p>因为函数是对象，所以可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。函数也可以拥有方法。</p>
<p>函数的与众不同之处在于可以被调用。</p>
<h3 id="函数字面量"><a href="#函数字面量" class="headerlink" title="函数字面量"></a>函数字面量</h3><p>函数对象通过函数字面量来创建。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>函数字面量包含4部分，分别是：保留字 function、函数名、参数、花括号中的语句。</p>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形式参数，还有两个附加参数：<code>this</code>和<code>arguments</code>。参数<code>this</code>在面向对象编程中非常重要，它的值取决于调用的模式。JavaScript中一共有4中调用模式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。</p>
<p>实参和形参个数不匹配时，不会有运行时错误。实参过多时，超出的实参被忽略。形参过多时，缺失的值被替换为<code>undefined</code>。</p>
<p>下面的内容也可以参考我以前的博文 <a href="http://gaohaoyang.github.io/2015/06/12/JavaScript-this/">JavaScript 中的 this</a></p>
<h4 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h4><p>当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，<code>this</code>被绑定到该对象。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">inc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token keyword">typeof</span> inc <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">?</span> inc <span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

myObject<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">//1</span>

myObject<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h4><p>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。</p>
<p>此时<code>this</code>被绑定到全局对象。即时是内部函数也会将<code>this</code>绑定到全局对象。</p>
<p>可以在函数内创建一个属性并赋值为<code>this</code>来解决这个问题。如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">&#125;</span>

myObject<span class="token punctuation">.</span><span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">var</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        that<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">,</span> that<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

myObject<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">//8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="构造器调用模式"><a href="#构造器调用模式" class="headerlink" title="构造器调用模式"></a>构造器调用模式</h4><p>JavaScript是一门基于原型继承的语言。对象可以直接从其他对象继承属性。该语言是无类型的。</p>
<p>如果在一个函数前面带上<code>new</code>来调用，那么背地里将会创建一个连接到该函数的<code>prototype</code>成员的新对象，同时<code>this</code>会被绑定到那个新对象上。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//创建构造器函数</span>
<span class="token keyword">var</span> <span class="token function-variable function">Quo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> string
<span class="token punctuation">&#125;</span>

<span class="token comment">//给Que的所有实例提供一个公共方法</span>
<span class="token class-name">Quo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getStatus</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status
<span class="token punctuation">&#125;</span>

<span class="token comment">//实例化</span>
<span class="token keyword">var</span> myQuo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Quo</span><span class="token punctuation">(</span><span class="token string">'confused'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myQuo<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//confused</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>书中不推荐这种形式的构造器函数，下一章有更好的解决方案。</p>
<h4 id="Apply-调用模式"><a href="#Apply-调用模式" class="headerlink" title="Apply 调用模式"></a>Apply 调用模式</h4><p><code>apply</code>方法让我们构建一个参数数组传递给调用函数。他也允许我们选择<code>this</code>的值。<code>apply</code>方法接受两个参数，第一个是要绑定给<code>this</code>的值，第二个是参数数组。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment">//7</span>

<span class="token keyword">var</span> statusObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">'hello'</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token class-name">Quo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>statusObject<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token comment">//hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>当函数被调用时，会得到一个<code>arguments</code>数组。通过此参数可以访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形参的多余参数。这使得编写一个无须指定参数个数的函数成为可能。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> i<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sum <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> sum
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因语言的设计错误，<code>arguments</code>并不是一个真正的数组。是一个“类似数组”的对象。有<code>length</code>属性，但没有任何数组的方法。</p>
<h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>函数执行时遇到关闭函数体的<code>&#125;</code>时结束。然后把控制权交还给调用该函数的程序。</p>
<p><code>return</code>可以使函数提前返回，不在执行余下的语句。</p>
<p>函数总是会返回一个值，若没有指定，则返回<code>undefined</code>。</p>
<p>若函数调用时在前面加上了<code>new</code>前缀，且返回值不是一个对象的时候，则返回<code>this</code>（该新对象）。</p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常是干扰程序的正常流畅的不寻常的事故。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">add2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">!==</span> <span class="token string">'number'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">!==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'TypeError'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'add needs numbers'</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4mprafcvhj20ml00xjrj.jpg"></p>
<p><code>throw</code>语句中断函数的执行。抛出一个<code>exception</code>对象，该对象包含一个用来识别异常类型的<code>name</code>属性和一个描述性的<code>message</code>属性。也可以自定义其他属性。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">try_it</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token function">add2</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">try_it</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//TypeError: add needs numbers</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果在<code>try</code>代码块内抛出一个异常，控制权就会跳转到它的<code>catch</code>语句中。</p>
<h3 id="扩充类型的功能"><a href="#扩充类型的功能" class="headerlink" title="扩充类型的功能"></a>扩充类型的功能</h3><p>JavaScript 允许给语言的基本类型扩充功能。通过<code>Object.prototype</code>添加方法，可以让该方法对所有对象都适用。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 先添加方法使得该方法对所有函数可用</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> func
    <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//添加一个取整方法</span>
Number<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'integer'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">[</span><span class="token keyword">this</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'ceil'</span> <span class="token operator">:</span> <span class="token string">'floor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//-3</span>

<span class="token comment">//添加 trim()</span>
String<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'trim'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  hello alibaba  '</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//hello alibaba</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>JavaScript 原型继承是动态的，因此新的方法立刻被赋予到所有的对象实例上，即使对象实例是在方法被增加之前就创建好了。</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归函数就是会直接或者间接地调用自身的一种函数。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">walkTheDom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">func</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    node <span class="token operator">=</span> node<span class="token punctuation">.</span>firstChild
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> func<span class="token punctuation">)</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>nextSibling
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> <span class="token function-variable function">getElementsByAttribute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">att<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token function">walkTheDom</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> actual <span class="token operator">=</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>att<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> actual <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>actual <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> results
<span class="token punctuation">&#125;</span>

<span class="token comment">//在知乎主页上操作</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getElementsByAttribute</span><span class="token punctuation">(</span><span class="token string">'data-za-module'</span><span class="token punctuation">,</span> <span class="token string">'AnswerItem'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//得到下列数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域控制着变量与参数的可见性及生命周期。它减少了名称冲突，并提供了自动内存管理。</p>
<p>无块级作用域。</p>
<p>有函数作用域。</p>
<p>建议在函数体的顶部声明函数中可能用到的所有变量。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了<code>this</code>和<code>arguments</code>）。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">quo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token function-variable function">get_status</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> status
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> myQuo <span class="token operator">=</span> <span class="token function">quo</span><span class="token punctuation">(</span><span class="token string">'amazed'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myQuo<span class="token punctuation">.</span><span class="token function">get_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//amazed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>狭义的说，返回的那个对象即闭包，它里面的方法可以访问它被创建时所处的上下文环境。</p>
<p>避免在循环中创建函数，容易引起混淆。可以现在循环之外创建一个辅助函数，让辅助函数在返回一个绑定了当前<code>i</code>值的函数，这样就不会导致混淆了。</p>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>将一个函数作为参数，一旦接收到响应，再调用这个函数。</p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>可以用函数和闭包构造模块。</p>
<p>模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问到的地方。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> numberCal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">half</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> n <span class="token operator">/</span> <span class="token number">2</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">tribble</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">3</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">half</span><span class="token operator">:</span> half<span class="token punctuation">,</span>
        <span class="token literal-property property">double</span><span class="token operator">:</span> double<span class="token punctuation">,</span>
        <span class="token literal-property property">tribble</span><span class="token operator">:</span> tribble
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberCal<span class="token punctuation">.</span><span class="token function">half</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//2.5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberCal<span class="token punctuation">.</span><span class="token function">half</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberCal<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//14</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberCal<span class="token punctuation">.</span><span class="token function">tribble</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p>如果让方法返回<code>this</code>而不是默认的<code>undefined</code>，就可以启用级联，即连续调用。</p>
<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数。</p>
<p>详情见以前的博文 <a href="http://gaohaoyang.github.io/2015/06/11/JavaScript-function/#bind--currying">JavaScript 函数 -bind 与 currying</a>。</p>
<h3 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h3><p>函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算。这种优化被称为记忆（memoization）。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>对象 函数 this 闭包 面向对象 作用域</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的 this</title>
    <url>//post/JavaScript-this.html</url>
    <content><![CDATA[<h2 id="全局的-this"><a href="#全局的-this" class="headerlink" title="全局的 this"></a>全局的 this</h2><p>全局 this 一般指向全局对象，浏览器中的全局对象就是 <code>window</code>。</p>
<span id="more"></span>
<p>例如：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>document <span class="token operator">===</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">91</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//91</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="一般函数的-this"><a href="#一般函数的-this" class="headerlink" title="一般函数的 this"></a>一般函数的 this</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true, global object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到一般函数的 this 也指向 window，在 nodeJS 中为 global object</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">//使用严格模式</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>严格模式中，函数的 this 为 undefined</p>
<h2 id="作为对象方法的函数的-this"><a href="#作为对象方法的函数的-this" class="headerlink" title="作为对象方法的函数的 this"></a>作为对象方法的函数的 this</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>
    <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码通过字面量创建对象 o。</p>
<p>f 为对象 o 的方法。这个方法的 this 指向这个对象，在这里即对象 o。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">37</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">independent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
o<span class="token punctuation">.</span>f <span class="token operator">=</span> independent<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码，创建了对象 o，但是没有给对象 o，添加方法。而是通过 <code>o.f = independent</code> 临时添加了方法属性。这样这个方法中的 this 同样也指向这个对象 o。</p>
<h2 id="对象原型链上的-this"><a href="#对象原型链上的-this" class="headerlink" title="对象原型链上的 this"></a>对象原型链上的 this</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过 <code>var p = Object.create(o)</code> 创建的对象，p 是基于原型 o 创建出的对象。</p>
<p>p 的原型是 o，调用 f() 的时候是调用了 o 上的方法 f()，这里面的 this 是可以指向当前对象的，即对象 p。</p>
<h2 id="get-set-方法与-this"><a href="#get-set-方法与-this" class="headerlink" title="get/set 方法与 this"></a>get/set 方法与 this</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">modulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>re <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>re <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>im <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">re</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">im</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">phase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>im<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'modulus'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">get</span><span class="token operator">:</span> modulus<span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>phase<span class="token punctuation">,</span> o<span class="token punctuation">.</span>modulus<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -0.78 1.4142</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>get/set 方法中的 this 也会指向 get/set 方法所在的对象的。</p>
<h2 id="构造器中的-this"><a href="#构造器中的-this" class="headerlink" title="构造器中的 this"></a>构造器中的 this</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>new MyClass() 的时候，MyClass()中的 this 会指向一个空对象，这个对象的原型会指向 MyClass.prototype。MyClass()没有返回值或者返回为基本类型时，默认将 this 返回。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">24</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为返回了对象，将这个对象作为返回值</p>
<h2 id="call-apply-方法与-this"><a href="#call-apply-方法与-this" class="headerlink" title="call/apply 方法与 this"></a>call/apply 方法与 this</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 + 3 + 5 + 7 = 16</span>
<span class="token function">add</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 + 3 + 10 + 20 = 34</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Number]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="bind-方法与-this"><a href="#bind-方法与-this" class="headerlink" title="bind 方法与 this"></a>bind 方法与 this</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">"test"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>
    <span class="token literal-property property">f</span><span class="token operator">:</span> f<span class="token punctuation">,</span>
    <span class="token literal-property property">g</span><span class="token operator">:</span> g
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37, test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>绑定之后再调用时，仍然会按绑定时的内容走，所以 o.g() 结果是 test</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 语言精粹笔记2-继承、数组、正则表达式</title>
    <url>//post/JavaScript-good-parts-note2.html</url>
    <content><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为书中以下章节的笔记：继承、数组和正则表达式。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承的两大好处：代码重用，引入一套类型系统的规范。</p>
<span id="more"></span>
<h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>JavaScript 通过构造器函数产生对象。</p>
<p>构造器调用模式，即用<code>new</code>前缀去调用一个函数。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">Mammal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">&#125;</span>

<span class="token class-name">Mammal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
<span class="token punctuation">&#125;</span>

<span class="token class-name">Mammal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">says</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saying <span class="token operator">||</span> <span class="token string">''</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> myMammal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mammal</span><span class="token punctuation">(</span><span class="token string">'Herb'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMammal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Herb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>书中不推荐这样的写法。有很多风险。若忘记添加<code>new</code>前缀，<code>this</code>无法绑定到新的对象上。而是绑定到了全局对象上，破坏了全局变量环境。</p>
<h3 id="对象说明符"><a href="#对象说明符" class="headerlink" title="对象说明符"></a>对象说明符</h3><p>上一节中的构造器可能要接受一大串参数。我们可以这样写：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token function">Maker</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">first</span><span class="token operator">:</span> f<span class="token punctuation">,</span>
    <span class="token literal-property property">middle</span><span class="token operator">:</span> m<span class="token punctuation">,</span>
    <span class="token literal-property property">last</span><span class="token operator">:</span> l<span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> s<span class="token punctuation">,</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> c
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将JSON对象传递给构造器，而它返回一个构造完全的对象。</p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>在一个纯粹的原型模式中，我们将摒弃类，转而专注于对象。一个新对象可以继承一个就对象的属性。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myMammal <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MM'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">says</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saying <span class="token operator">||</span> <span class="token string">''</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> myCat <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>myMammal<span class="token punctuation">)</span>
myCat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kitty'</span>
myCat<span class="token punctuation">.</span>saying <span class="token operator">=</span> <span class="token string">'meow'</span>
myCat<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'Kitty is running'</span>
<span class="token punctuation">&#125;</span>
myCat<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>says <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>says
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是一种差异化继承。</p>
<h3 id="函数化"><a href="#函数化" class="headerlink" title="函数化"></a>函数化</h3><p>前文看到的继承模式没法保护隐私。对象的所有属性都是可见的。无法得到私有变量和私有函数。为了解决这一问题，我们有模块模式。</p>
<p>构造一个生成对象的函数需要4步骤：</p>
<ol>
<li>创建一个新对象。</li>
<li>有选择的定义私有变量和方法。</li>
<li>给这个新对象扩充方法。</li>
<li>返回那个新对象。</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">mammal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">spec</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    that<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> spec<span class="token punctuation">.</span>name
    <span class="token punctuation">&#125;</span>
    that<span class="token punctuation">.</span><span class="token function-variable function">says</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> spec<span class="token punctuation">.</span>saying <span class="token operator">||</span> <span class="token string">''</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> that
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> myMammal <span class="token operator">=</span> <span class="token function">mammal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Herb'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">saying</span><span class="token operator">:</span> <span class="token string">'Cheers!'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMammal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Herb</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMammal<span class="token punctuation">.</span><span class="token function">says</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Cheers!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以参考上一篇文章，<a href="http://gaohaoyang.github.io/2016/06/07/JavaScript-good-parts-note1/#section-34">JavaScript 语言精粹笔记1-语法、对象、函数 之模块部分</a>。</p>
<h3 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h3><p>这一部分看的不是特别懂，我想等我学完ES2015中的类和模块部分后再看看吧。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h3><p>一个数组字面量是在一对方括号中包围零个或多个用逗号分隔的值的表达式。</p>
<p>再大多数语言中，一个数组的多有元素都要求是相同的类型。JavaScript 允许数组包含任意混合类型的值。</p>
<h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>JavaScript 数组的<code>length</code>属性是没有上界的。如果用大于或等于当前<code>length</code>的数字作为下标来存储一个元素，那么<code>length</code>值会被增大以容纳新元素，不会发生数组越界错误。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>数组也是对象，可以用<code>delete</code>来删除元素</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'wu'</span><span class="token punctuation">]</span>

<span class="token keyword">delete</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以使用<code>splice</code>方法，进行删除和修改操作。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">numbers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//two</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>使用常规<code>for</code>循环即可，可以保证数组的顺序。</p>
<h3 id="容易混淆的地方"><a href="#容易混淆的地方" class="headerlink" title="容易混淆的地方"></a>容易混淆的地方</h3><p>当属性名是小而连续的整数时，应该使用数组，否则使用对象。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//object</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>返回数组的类型是<code>object</code>，没有任何意义。</p>
<p>判断数组类型的方法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ECMAScript 5.1 (ECMA-262) 和 ECMAScript 2015 (6th Edition, ECMA-262) 标准中的方法。</p>
<p>或者下面这个方法。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">is_array</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>数组的方法被存储在<code>Array.prototype</code>中的函数。</p>
<p>数组是对象，因此<code>Array.prototype</code>也是可扩充的。</p>
<h3 id="指定初始值"><a href="#指定初始值" class="headerlink" title="指定初始值"></a>指定初始值</h3><p>JavaScript 的数组不会预制值。</p>
<p>JavaScript 没有多维数组，单项大多数类 C 语言一样，支持元素为数组的数组。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>关于正则表达式，以前的博文写的比较多了，详情见：</p>
<p><a href="http://gaohaoyang.github.io/2015/04/22/baidu-ife-2-javascript/#section-10">百度Web前端技术学院(2)-JavaScript 基础 之正则表达式部分1</a></p>
<p><a href="http://gaohaoyang.github.io/2015/04/22/baidu-ife-2-javascript/#section-12">百度Web前端技术学院(2)-JavaScript 基础 之正则表达式部分2</a></p>
<p><a href="http://gaohaoyang.github.io/2016/05/06/regular-expression-group/">浅谈正则表达式中的分组和引用</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>继承 对象 原型 Array 正则</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 语言精粹笔记3-方法、毒瘤等</title>
    <url>//post/JavaScript-good-parts-note3.html</url>
    <content><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>这一章主要介绍了一些方法集。这里写几个我不太熟悉的方法和要点吧。</p>
<span id="more"></span>
<ul>
<li><p><code>array.join()</code></p>
<blockquote>
<p>对于IE6/7，使用<code>array.join()</code>连接大量字符串的效率确实优于使用<code>+</code>元素运算符。但是目前主流的浏览器，包括IE8以后的版本，都对<code>+</code>元素运算符连接字符串做了特别优化，性能已经显著高于<code>array.join()</code>。</p>
</blockquote>
</li>
<li><p><code>number.toExponential(fractionDigits)</code></p>
<p>  把这个<code>number</code>转换成一个指数形式的字符串。</p>
</li>
<li><p><code>number.toFixed(fractionDigits)</code></p>
<p>  将这个<code>number</code>转换成一个十进制形式的字符串。</p>
</li>
</ul>
<h2 id="毒瘤"><a href="#毒瘤" class="headerlink" title="毒瘤"></a>毒瘤</h2><ul>
<li><p>注意全局变量的引入。</p>
</li>
<li><p>JavaScript 中 Unicode 是16位的。包含65536个字符（基本多文种平面 Basic Multilingual Plane）。剩下的百万字符中的每一个都可以用一对字符来表示。Unicode 把一对字符视为一个单一的字符，而 JavaScript 认为一对字符是两个不同的字符。</p>
</li>
<li><p>检测<code>null</code>的方式。</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//object</span>

myValue <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token comment">//检测 null</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>myValue <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> myValue <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// myValue 是一个对象或数组！</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><code>parseInt</code> 把字符串转化为整数的函数。它遇到非数字时会停止解析，所以<code>parseInt(&#39;16&#39;)</code>和<code>parseInt(&#39;16ton&#39;)</code>产生相同的结果。</p>
<p>  如果该字符串第一个字符是0，那么该字符串会基于八进制而不是十进制来求职。在八进制中，8和9不是数字，所以<code>parseInt(&#39;08&#39;)</code>和<code>parseInt(&#39;09&#39;)</code>都产生0作为结果。但<code>parseInt()</code>可以接受基数，因此<code>parseInt(&#39;08&#39;,10)</code>结果为8，建议总是加上这个基数参数。</p>
</li>
<li><p>JavaScript 的对象永远不会是真的空对象，因为它们可以送原型链中取得成员属性。</p>
</li>
</ul>
<h2 id="糟粕"><a href="#糟粕" class="headerlink" title="糟粕"></a>糟粕</h2><ul>
<li><p>避免使用<code>with</code>语句。</p>
</li>
<li><p>避免使用<code>eval</code>语句。</p>
</li>
<li><p><code>continue</code>可能会降低运算性能。</p>
</li>
<li><p>位运算符在 JavaScript 会非常慢。</p>
<p>  Java 里，位运算符处理的是整数。JavaScript 没有整数类型，它只有双精度的浮点数，因此，位运算符把它们的数字运算数先转换为整数，执行运算，在转换回去。JavaScript 的执行环境一般接触不到硬件，所以非常慢。</p>
</li>
<li><p>避免使用包装对象。<code>new Object</code>和<code>new Array</code>等。</p>
</li>
<li><p>避免使用<code>void</code>。</p>
</li>
</ul>
<p>本系列结束。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>判断两个数组是否相似 (arraysSimilar)</title>
    <url>//post/arrays-similar.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目来自 <a href="http://imooc.com/code/5760">慕课网 JavaScript 深入浅出 1-6 编程练习</a>    </p>
<p>请在 index.html 文件中，编写 arraysSimilar 函数，实现判断传入的两个数组是否相似。具体需求：   </p>
<span id="more"></span>
<ol>
<li>数组中的成员类型相同，顺序可以不同。例如 [1, true] 与 [false, 2] 是相似的。</li>
<li>数组的长度一致。</li>
<li>类型的判断范围，需要区分: String, Boolean, Number, undefined, null, 函数, 日期, window.</li>
</ol>
<p>当以上全部满足，则返回**”判定结果:通过”<strong>，否则返回</strong>“判定结果:不通过”**。    </p>
<p>题目给出了 index.html 如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Untitled Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   
        <span class="token comment">/*
         * param1 Array
         * param2 Array
         * return true or false
         */</span>
        <span class="token keyword">function</span> <span class="token function">arraysSimilar</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testData.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中 testData.js 是测试用例，代码如下</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//以下为多组测试数据</span>
    <span class="token keyword">var</span> cases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token number">100</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token number">444</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span>window<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hahaha"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"okokok"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> window<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span>window<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token keyword">null</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">arr1</span><span class="token operator">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr2</span><span class="token operator">:</span> <span class="token string">"cba"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//使用for循环, 通过arraysSimilar函数验证以上数据是否相似，如相似显示“通过”,否则"不通过",所以大家要完成arraysSimilar函数,具体要求，详见任务要求。    </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cases<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arraysSimilar</span><span class="token punctuation">(</span>cases<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>arr1<span class="token punctuation">,</span> cases<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>arr2<span class="token punctuation">)</span> <span class="token operator">!==</span> cases<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"不通过！case"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"不正确！arr1="</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>cases<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>arr1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", arr2="</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>cases<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>arr2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的判断结果不是"</span> <span class="token operator">+</span> cases<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"判定结果:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token string">"通过"</span> <span class="token operator">:</span> <span class="token string">"不通过"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>各位读者在看解答前也可以自己考虑一下，看看咱们的想法是否一致，期待您在本文的留言。</p>
<hr>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过观察测试用例，可以发现，最后三个用例有不是数组的。所以我们可以先判断传入的参数是否是数组。<br>又因为题目中要求数组长度必须一致，这也是第二个限制条件。<br>最后再区分具体的类型。   </p>
<p>理清思路我们可以分为以下步骤：   </p>
<ol>
<li>判断传入的参数是否为数组 (使用 <code>instanceof</code> 方法)</li>
<li>检查两个数组长度是否一致</li>
<li>分别判断数组内元素的基本数据类型 (使用 <code>typeof</code> 方法)</li>
<li>因为 <code>typeof</code> 只能检查基本数据类型，对于 <code>null</code>, <code>Date</code>, <code>window</code> 返回的都是 <code>object</code>，所以使用 <code>Object.prototype.toString.apply()</code> 来检查这些对象类型，其返回值为：<code>&#39;[object Null]&#39;</code>, <code>&#39;[object Date]&#39;</code>, <code>&#39;[object global]&#39;</code></li>
<li>分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。</li>
</ol>
<h3 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h3><p>JavaScript代码如下</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * =====================================================
 * 请在index.html文件中，编写arraysSimilar函数，实现判断传入的两个数组是否相似。具体需求：
 * 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。
 * 2. 数组的长度一致。
 * 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.
 *
 * 当以上全部满足，则返回"判定结果:通过"，否则返回"判定结果:不通过"。
 * =====================================================
 */</span>

<span class="token comment">/*
* param1 Array
* param2 Array
* return true or false
*/</span>
<span class="token keyword">function</span> <span class="token function">arraysSimilar</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先判断传入的是否是数组</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">==</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//判断数组长度</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"same-length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//开始判断数组内部是否相似</span>
            <span class="token keyword">return</span> <span class="token function">sameLengthArraysSimilar</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//两个数组长度不同返回false</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//传入的参数不是数组返回false</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 判断两个等长的数组内部是否相似
 * 遍历数组
 * arr1中元素各种类型出现的个数是否和arr2中元素各种类型出现的个数相同
 * @param  &#123;Array&#125; arr1 数组1
 * @param  &#123;Array&#125; arr2 数组2
 * @return &#123;true,false&#125;
 */</span>
<span class="token keyword">function</span> <span class="token function">sameLengthArraysSimilar</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span>arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> numInArr1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> numInArr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> booleanInArr1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> booleanInArr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> funInArr1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> funInArr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> undefinedInArr1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> undefinedInArr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> stringInArr1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> stringInArr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> nullInArr1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> nullInArr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> dateInArr1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> dateInArr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> windowInArr1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> windowInArr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            numInArr1 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            booleanInArr1 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            funInArr1 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            undefinedInArr1 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            stringInArr1 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Null]'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                nullInArr1 <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Date]'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                dateInArr1 <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object global]'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                windowInArr1 <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            numInArr2 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            booleanInArr2 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            funInArr2 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            undefinedInArr2 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            stringInArr2 <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Null]'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                nullInArr2 <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Date]'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                dateInArr2 <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object global]'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                windowInArr2 <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"num---"</span><span class="token operator">+</span>numInArr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"num---"</span><span class="token operator">+</span>numInArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"boo---"</span><span class="token operator">+</span>booleanInArr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"boo---"</span><span class="token operator">+</span>booleanInArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"null---"</span><span class="token operator">+</span>nullInArr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"null---"</span><span class="token operator">+</span>nullInArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"window---"</span><span class="token operator">+</span>windowInArr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"window---"</span><span class="token operator">+</span>windowInArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"date---"</span><span class="token operator">+</span>dateInArr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"date---"</span><span class="token operator">+</span>dateInArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"string---"</span><span class="token operator">+</span>stringInArr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"string---"</span><span class="token operator">+</span>stringInArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fun---"</span><span class="token operator">+</span>funInArr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fun---"</span><span class="token operator">+</span>funInArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"undefined---"</span><span class="token operator">+</span>undefinedInArr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"undefined---"</span><span class="token operator">+</span>undefinedInArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>numInArr1 <span class="token operator">==</span> numInArr2 <span class="token operator">&amp;&amp;</span> booleanInArr1<span class="token operator">==</span>booleanInArr2 <span class="token operator">&amp;&amp;</span> funInArr1<span class="token operator">==</span>funInArr2 <span class="token operator">&amp;&amp;</span> undefinedInArr1<span class="token operator">==</span>undefinedInArr2 <span class="token operator">&amp;&amp;</span> stringInArr1<span class="token operator">==</span>stringInArr2 <span class="token operator">&amp;&amp;</span> nullInArr1<span class="token operator">==</span>nullInArr2 <span class="token operator">&amp;&amp;</span> dateInArr1<span class="token operator">==</span>dateInArr2 <span class="token operator">&amp;&amp;</span> windowInArr1<span class="token operator">==</span>windowInArr2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'================================true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'================================false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>上述代码完美的跑完所有的测试用例，读者 <a href="http://gaohaoyang.github.io/javascript-test/arraysSimilar/">点击这里查看结果</a>，并且可以按 <code>f12</code> 看 Console 信息， 里面有代码的执行过程。  </li>
<li>当然你也可以复制本文的 JavaScript 代码，在 <a href="http://imooc.com/code/5760">慕课网的习题</a> 下跑一下，也可以看到 <code>判定结果:通过</code> 的结果</li>
<li>完整源代码在我的 GitHub <a href="https://github.com/Gaohaoyang/javascript-test/tree/master/arraysSimilar">javascript-test/arraysSimilar/</a> 仓库中   </li>
<li>其实我的代码逻辑并不复杂，有点<strong>空间换时间</strong>的感觉，执行效率应该是较高的。没有用 JavaScript 封装的任何函数，完全是自己写的。其实代码除去 <code>console.log()</code> 也并没有多少行。</li>
<li>各位读者有什么好的想法欢迎留言交流！</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7定时任务详解</title>
    <url>//post/centos-crontab.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作中需要开启一个定时任务：每天晚上2点进行爬虫代码的运行，这不得不去学习一下linux 下的定时任务crontab</p>
<span id="more"></span>
<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>yum install crontabs</p>
<p>说明：<br>/sbin/service crond start //启动服务<br>/sbin/service crond stop //关闭服务<br>/sbin/service crond restart //重启服务<br>/sbin/service crond reload //重新载入配置<br>查看crontab服务状态：service crond status<br>手动启动crontab服务：service crond start<br>查看crontab服务是否已设置为开机启动，执行命令：ntsysv<br>加入开机自动启动:<br>chkconfig crond on</p>
<h2 id="1，crontab命令"><a href="#1，crontab命令" class="headerlink" title="1，crontab命令"></a>1，crontab命令</h2><p>功能说明：设置计时器。<br>语　　法：crontab [-u &lt;用户名称&gt;][配置文件] 或 crontab [-u &lt;用户名称&gt;][-elr]</p>
<p>补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使 用计时器的功能。</p>
<p>其配置文件格式如下：<br>Minute Hour Day Month DayOFWeek Command</p>
<p>参　　数：<br>-e 　编辑该用户的计时器设置。<br>-l 　列出该用户的计时器设置。<br>-r 　删除该用户的计时器设置。<br>-u&lt;用户名称&gt; 　指定要设定计时器的用户名称。</p>
<h2 id="2，crontab-格式"><a href="#2，crontab-格式" class="headerlink" title="2，crontab 格式"></a>2，crontab 格式</h2><p>基本格式 :</p>
<ul>
<li>*　 *　 *　 *　　command<br>分　时　日　月　周　 命令<br>第1列表示分钟1～59 每分钟用*或者 */1表示<br>第2列表示小时1～23（0表示0点）<br>第3列表示日期1～31<br>第4列 表示月份1～12<br>第5列标识号星期0～6（0表示星期天）<br>第6列要运行的命令<pre class="line-numbers language-js" data-language="js"><code class="language-js">
# Use the hash sign to prefix a comment
# <span class="token operator">+</span>—————<span class="token operator">-</span> <span class="token function">minute</span> <span class="token punctuation">(</span><span class="token number">0</span> – <span class="token number">59</span><span class="token punctuation">)</span>
# <span class="token operator">|</span> <span class="token operator">+</span>————<span class="token operator">-</span> <span class="token function">hour</span> <span class="token punctuation">(</span><span class="token number">0</span> – <span class="token number">23</span><span class="token punctuation">)</span>
# <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">+</span>———<span class="token operator">-</span> day <span class="token keyword">of</span> <span class="token function">month</span> <span class="token punctuation">(</span><span class="token number">1</span> – <span class="token number">31</span><span class="token punctuation">)</span>
# <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">+</span>——<span class="token operator">-</span> <span class="token function">month</span> <span class="token punctuation">(</span><span class="token number">1</span> – <span class="token number">12</span><span class="token punctuation">)</span>
# <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">+</span>—<span class="token operator">-</span> day <span class="token keyword">of</span> <span class="token function">week</span> <span class="token punctuation">(</span><span class="token number">0</span> – <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Sunday<span class="token operator">=</span><span class="token number">0</span> or <span class="token number">7</span><span class="token punctuation">)</span>
# <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>
# <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> command to be executed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3，crontab文件的一些例子："><a href="#3，crontab文件的一些例子：" class="headerlink" title="3，crontab文件的一些例子："></a>3，crontab文件的一些例子：</h2></li>
</ul>
<blockquote>
<p>1 简单打印</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
每天早上<span class="token number">6</span>点 
<span class="token number">0</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> echo <span class="token string">"Good morning."</span> <span class="token operator">>></span> <span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token punctuation">.</span>txt <span class="token comment">//注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。</span>

每两个小时 
<span class="token number">0</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> echo <span class="token string">"Have a break now."</span> <span class="token operator">>></span> <span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token punctuation">.</span>txt  

晚上<span class="token number">11</span>点到早上<span class="token number">8</span>点之间每两个小时和早上八点 
<span class="token number">0</span> <span class="token number">23</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">2</span>，<span class="token number">8</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> echo <span class="token string">"Have a good dream"</span> <span class="token operator">>></span> <span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token punctuation">.</span>txt

每个月的<span class="token number">4</span>号和每个礼拜的礼拜一到礼拜三的早上<span class="token number">11</span>点 
<span class="token number">0</span> <span class="token number">11</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span> command line

<span class="token number">1</span>月<span class="token number">1</span>日早上<span class="token number">4</span>点 
<span class="token number">0</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token operator">*</span> command line <span class="token constant">SHELL</span><span class="token operator">=</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash <span class="token constant">PATH</span><span class="token operator">=</span><span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin <span class="token constant">MAILTO</span><span class="token operator">=</span>root <span class="token comment">//如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ </span>

每小时执行<span class="token operator">/</span>etc<span class="token operator">/</span>cron<span class="token punctuation">.</span>hourly内的脚本
<span class="token number">01</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> root run<span class="token operator">-</span>parts <span class="token operator">/</span>etc<span class="token operator">/</span>cron<span class="token punctuation">.</span>hourly

每天执行<span class="token operator">/</span>etc<span class="token operator">/</span>cron<span class="token punctuation">.</span>daily内的脚本
<span class="token number">02</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> root run<span class="token operator">-</span>parts <span class="token operator">/</span>etc<span class="token operator">/</span>cron<span class="token punctuation">.</span>daily 

每星期执行<span class="token operator">/</span>etc<span class="token operator">/</span>cron<span class="token punctuation">.</span>weekly内的脚本
<span class="token number">22</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">0</span> root run<span class="token operator">-</span>parts <span class="token operator">/</span>etc<span class="token operator">/</span>cron<span class="token punctuation">.</span>weekly 

每月去执行<span class="token operator">/</span>etc<span class="token operator">/</span>cron<span class="token punctuation">.</span>monthly内的脚本 
<span class="token number">42</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">*</span> root run<span class="token operator">-</span>parts <span class="token operator">/</span>etc<span class="token operator">/</span>cron<span class="token punctuation">.</span>monthly 

<span class="token literal-property property">注意</span><span class="token operator">:</span> <span class="token string">"run-parts"</span>这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 

每天的下午<span class="token number">4</span>点、<span class="token number">5</span>点、<span class="token number">6</span>点的<span class="token number">5</span> min、<span class="token number">15</span> min、<span class="token number">25</span> min、<span class="token number">35</span> min、<span class="token number">45</span> min、<span class="token number">55</span> min时执行命令。 
<span class="token number">5</span>，<span class="token number">15</span>，<span class="token number">25</span>，<span class="token number">35</span>，<span class="token number">45</span>，<span class="token number">55</span> <span class="token number">16</span>，<span class="token number">17</span>，<span class="token number">18</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> command

每周一，三，五的下午<span class="token number">3</span>：<span class="token number">00</span>系统进入维护状态，重新启动系统。
<span class="token number">00</span> <span class="token number">15</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">1</span>，<span class="token number">3</span>，<span class="token number">5</span> shutdown <span class="token operator">-</span>r <span class="token operator">+</span><span class="token number">5</span>

每小时的<span class="token number">10</span>分，<span class="token number">40</span>分执行用户目录下的innd<span class="token operator">/</span>bbslin这个指令： 
<span class="token number">10</span>，<span class="token number">40</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> innd<span class="token operator">/</span>bbslink 

每小时的<span class="token number">1</span>分执行用户目录下的bin<span class="token operator">/</span>account这个指令： 
<span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> bin<span class="token operator">/</span>account

每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以<span class="token punctuation">;</span>分隔）： 
<span class="token number">20</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> （<span class="token operator">/</span>bin<span class="token operator">/</span>rm <span class="token operator">-</span>f expire<span class="token punctuation">.</span>ls logins<span class="token punctuation">.</span>bad<span class="token punctuation">;</span>bin<span class="token operator">/</span>expire$#@<span class="token number">62</span><span class="token punctuation">;</span>expire<span class="token punctuation">.</span>1st）　　

每年的一月和四月，<span class="token number">4</span>号到<span class="token number">9</span>号的<span class="token number">3</span>点<span class="token number">12</span>分和<span class="token number">3</span>点<span class="token number">55</span>分执行<span class="token operator">/</span>bin<span class="token operator">/</span>rm <span class="token operator">-</span>f expire<span class="token punctuation">.</span>1st这个指令，并把结果添加在mm<span class="token punctuation">.</span>txt这个文件之后（mm<span class="token punctuation">.</span>txt文件位于用户自己的目录位置）。 
<span class="token number">12</span><span class="token punctuation">,</span><span class="token number">55</span> <span class="token number">3</span> <span class="token number">4</span><span class="token operator">-</span><span class="token number">9</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token operator">/</span>bin<span class="token operator">/</span>rm <span class="token operator">-</span>f expire<span class="token punctuation">.</span>1st$#@<span class="token number">62</span><span class="token punctuation">;</span>$#@<span class="token number">62</span><span class="token punctuation">;</span>mm<span class="token punctuation">.</span>txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<blockquote>
<p>2 nginx示例</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
<span class="token number">30</span> <span class="token number">21</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
每晚的<span class="token number">21</span><span class="token operator">:</span><span class="token number">30</span>重启 nginx。

<span class="token number">45</span> <span class="token number">4</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">22</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
每月<span class="token number">1</span>、 <span class="token number">10</span>、<span class="token number">22</span>日的<span class="token number">4</span> <span class="token operator">:</span> <span class="token number">45</span>重启nginx。

<span class="token number">10</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
每周六、周日的<span class="token number">1</span> <span class="token operator">:</span> <span class="token number">10</span>重启nginx。

<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span> <span class="token number">18</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
每天<span class="token number">18</span> <span class="token operator">:</span> <span class="token number">00</span>至<span class="token number">23</span> <span class="token operator">:</span> <span class="token number">00</span>之间每隔<span class="token number">30</span>分钟重启nginx。

<span class="token number">0</span> <span class="token number">23</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
每星期六的<span class="token number">11</span> <span class="token operator">:</span> <span class="token number">00</span> pm重启nginx。

<span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
每一小时重启nginx

<span class="token operator">*</span> <span class="token number">23</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
晚上<span class="token number">11</span>点到早上<span class="token number">7</span>点之间，每 隔一小时重启nginx

<span class="token number">0</span> <span class="token number">11</span> <span class="token number">4</span> <span class="token operator">*</span> mon<span class="token operator">-</span>wed <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
每月的<span class="token number">4</span>号与每周一到周三 的<span class="token number">11</span>点重启nginx

<span class="token number">0</span> <span class="token number">4</span> <span class="token number">1</span> jan <span class="token operator">*</span> <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx restart
一月一号的<span class="token number">4</span>点重启nginx

<span class="token operator">*</span><span class="token operator">/</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>ntpdate <span class="token number">210.72</span><span class="token number">.145</span><span class="token number">.20</span>
每半小时同步一下时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-创建cron脚本"><a href="#4-创建cron脚本" class="headerlink" title="4 创建cron脚本"></a>4 创建cron脚本</h2><ol>
<li><p>第一步：写cron脚本文件,命名为crontest.cron。<br>15,30,45,59 * * * * echo “xgmtest…..” &gt;&gt; xgmtest.txt  表示，每隔15分钟，执行打印一次命令 </p>
</li>
<li><p>第二步：添加定时任务。执行命令 “crontab crontest.cron”。搞定 </p>
</li>
<li><p>第三步：”crontab -l” 查看定时任务是否成功或者检测/var/spool/cron下是否生成对应cron脚本</p>
</li>
</ol>
<h2 id="将脚本改为可执行（针对shell，-sh文件）"><a href="#将脚本改为可执行（针对shell，-sh文件）" class="headerlink" title="将脚本改为可执行（针对shell，.sh文件）"></a>将脚本改为可执行（针对shell，.sh文件）</h2><blockquote>
<p>chmod +x filename</p>
</blockquote>
<p>引用：</p>
<p><a href="http://blog.csdn.net/u012402276/article/details/51063269">http://blog.csdn.net/u012402276/article/details/51063269</a><br><a href="https://www.cnblogs.com/longjshz/p/5779215.html">https://www.cnblogs.com/longjshz/p/5779215.html</a><br><a href="http://blog.csdn.net/edgdvcyz/article/details/53348832">http://blog.csdn.net/edgdvcyz/article/details/53348832</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos7 crontab linux 工具软件</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 关闭更新</title>
    <url>//post/close-win10-update.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为自己的电脑装了双系统（win10 跟Ubuntu16.04），在win10下，有时候每次关机的时候都说要进行更新后进行关机，就是自动更新功能，现在的选项中没有关闭自动更新的选项了，这是一个bug，微软要强制更新。</p>
<span id="more"></span>
<p>我就忍受不了自动更新，会拉取网络，影响我们的上网体验，但是我们不要他自动更新，那怎么办呢，其实还是有解决方法的，下面就介绍怎么关闭自动更新功能！（ps：百度有些人写的其实是win8的自动更新，根本就不是win10的，我这个才是win10的处理方法）希望能帮到你们。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1 右键点击左下角微软按钮，找到“运行”   也可用键盘的win+R     </p>
<p><img data-src="http://upload-images.jianshu.io/upload_images/2577413-07f3d54cc3ce1538.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<p>2 在运行处输入 “services.msc”   点击确定。</p>
<p><img data-src="http://upload-images.jianshu.io/upload_images/2577413-2df616c88439415a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<p>3 在弹出来的服务中，找到“Windows Update”</p>
<p><img data-src="http://upload-images.jianshu.io/upload_images/2577413-403c9d7761ad60b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<p>4 选择禁用</p>
<p><img data-src="http://upload-images.jianshu.io/upload_images/2577413-1728ba13ad50acfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<p>5 点击确定或者启动就可以了，这时候我们可以看到：<br><img data-src="http://upload-images.jianshu.io/upload_images/2577413-8d901951002a4bc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<p>会多出这两个位置，这样子就设置成功了。</p>
]]></content>
      <categories>
        <category>win10</category>
      </categories>
      <tags>
        <tag>win10 工具软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 如何 clone 非 master 分支的代码</title>
    <url>//post/git-clone-not-master-branch.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们每次使用命令</p>
<pre class="line-numbers language-none"><code class="language-none">git clone git@gitlab.xxx.com:xxxxx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在<code>daily/1.4.1</code>分支上，我们希望拿到这个分支上的代码。</p>
<span id="more"></span>



<p><img data-src="https://ooo.0o0.ooo/2016/07/07/577e349ab42ed.png" alt="7f07c8f6deef169ef6be5103bbd3e932f8676bb1.png"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>刚刚开周会的时候，自己洋洋得意的分享我的解决方案，但是……经过与团队成员的的讨论，自己的方法弱爆了，现在把更优雅的方法写一下。原来写的方法并不太适合用在这个场景里。</strong> 我之前写的方法在文章后面。</p>
<p>直接使用命令</p>
<pre class="line-numbers language-none"><code class="language-none">git branch -r #查看远程分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-none"><code class="language-none">git branch -a #查看所有分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>会显示</p>
<pre class="line-numbers language-none"><code class="language-none">origin&#x2F;HEAD -&gt; origin&#x2F;master
origin&#x2F;daily&#x2F;1.2.2
origin&#x2F;daily&#x2F;1.3.0
origin&#x2F;daily&#x2F;1.4.1
origin&#x2F;develop
origin&#x2F;feature&#x2F;daily-1.0.0
origin&#x2F;master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后直接</p>
<pre class="line-numbers language-none"><code class="language-none">git checkout origin&#x2F;daily&#x2F;1.4.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就好了。。。</p>
<h2 id="原来的解决方案"><a href="#原来的解决方案" class="headerlink" title="原来的解决方案"></a>原来的解决方案</h2><p><strong>其实我原来写的这个方法更多的是：设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支。</strong></p>
<p>我们在本地先建立一个分支，建议名称和远程的想要同步的分支名称一样。</p>
<pre class="line-numbers language-none"><code class="language-none">git branch daily&#x2F;1.4.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在切换到这个本地分支</p>
<pre class="line-numbers language-none"><code class="language-none">git checkout daily&#x2F;1.4.1
# Switched to branch &#39;daily&#x2F;1.4.1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>接下来就可以去建立上游分支的关联了，但是这个命令比较长，不好记，我们可以直接先<code>pull</code>一下，git 会提示我们相应的操作和命令。</p>
<pre class="line-numbers language-none"><code class="language-none">git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to&#x3D;origin&#x2F;&lt;branch&gt; daily&#x2F;1.4.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们看到最后一行，执行这个命令，即可完成与上游分支的关联。</p>
<pre class="line-numbers language-none"><code class="language-none">git branch --set-upstream-to&#x3D;origin&#x2F;daily&#x2F;1.4.1 daily&#x2F;1.4.1
# Branch daily&#x2F;1.4.1 set up to track remote branch daily&#x2F;1.4.1 from origin.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后再<code>pull</code>一下就好了！</p>
<pre class="line-numbers language-none"><code class="language-none">git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 babel</title>
    <url>//post/how-to-use-babel.html</url>
    <content><![CDATA[<p><a href="https://babeljs.io/">Babel</a> 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做准备。本文将介绍如何使用 babel，以及一些相关的配置。</p>
<span id="more"></span>



<p><img data-src="https://babeljs.io/images/logo.svg"></p>
<p>学习 Babel 可以通过其手册 Babel handbook。</p>
<ul>
<li><a href="https://github.com/thejameskyle/babel-handbook">babel-handbook</a></li>
</ul>
<p>其中包含多语言版本，分为<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md">用户手册</a>和<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md">插件手册</a>。这是一个很好的学习 Babel 的资料。</p>
<h2 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a>babel-cli</h2><p>在 node 和 npm 环境安装好的前提下，安装 babel，如下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install --global babel-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装完成后就可以编译文件了。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">babel main.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>编译后的文件显示在终端上，可以添加其他命令让它输出到指定文件下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">babel example.js --out-file compiled.js
或
babel example.js -o compiled.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>或将整个目录编译成一个新的目录：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">babel src --out-dir lib
或
babel src -d lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但这很麻烦，并且并不是一个很好的解决方案，请看下一节项目内运行 babel-cli。</p>
<h2 id="在项目内运行-babel-cli"><a href="#在项目内运行-babel-cli" class="headerlink" title="在项目内运行 babel-cli"></a>在项目内运行 babel-cli</h2><p>初始化项目</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再安装 babel-cli</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install --save-dev babel-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>项目中的<code>package.json</code>应该包含如下内容：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
  &quot;name&quot;: &quot;learn-es6&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;devDependencies&quot;: &#123;
    &quot;babel-cli&quot;: &quot;^6.10.1&quot;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>添加 npm scripts 命令。</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&#123;
  &quot;name&quot;: &quot;learn-es6&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
+   &quot;scripts&quot;: &#123;
+     &quot;build&quot;: &quot;babel src -d lib&quot;
+   &#125;,
  &quot;devDependencies&quot;: &#123;
    &quot;babel-cli&quot;: &quot;^6.10.1&quot;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时在终端里运行</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>还不能成功编译，因为没有配置<code>.babelrc</code>文件。</p>
<h2 id="配置-babelrc"><a href="#配置-babelrc" class="headerlink" title="配置.babelrc"></a>配置<code>.babelrc</code></h2><p>通过配置<code>.babelrc</code>来告诉 babel 来做什么。</p>
<p>在项目的根路径下创建<code>.babelrc</code>文件。然后输入以下内容作为开始：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;presets&quot;: [],
    &quot;plugins&quot;: []
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了让 babel 将 ES2015 转化为 ES5，我们要安装如下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install --save-dev babel-preset-es2015<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装完成后在<code>.babelrc</code>中添加参数：</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&#123;
    &quot;presets&quot;: [
+       &quot;es2015&quot;
    ],
    &quot;plugins&quot;: []
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在在项目<code>src/main.js</code>中写一些 ES2015 的代码试试吧。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在终端中输入命令</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行后终端中显示：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; learn-es6@1.0.0 build c:\gitWorkSpace\learn-es6
&gt; babel src -d lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后可以看到目录中出现了<code>lib/main.js</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>即编译成功。</p>
<h2 id="配置-jshintrc"><a href="#配置-jshintrc" class="headerlink" title="配置.jshintrc"></a>配置<code>.jshintrc</code></h2><p>若编辑器中安装了 jshint 语法检查的插件。默认对于 ES2015 的代码可能会报错或者警告，看着可能会不爽。我们可以在配置文件中将它设置为允许 ES2015 的模式。</p>
<p>在项目根目录下创建文件<code>.jshintrc</code>。内容如下：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;asi&quot;: true,
    &quot;esversion&quot;: 2015
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述文件我分别设置了，使用无分号模式，es 版本使用 2015。</p>
<p>关于<code>.jshintrc</code>的更详细配置可以参见官方示例：<a href="https://github.com/jshint/jshint/blob/master/examples/.jshintrc">https://github.com/jshint/jshint/blob/master/examples/.jshintrc</a></p>
<p>好，babel 就说到这里，下面开始进入真正的 ES2015 的学习！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES2015 ES6 ES5 babel</tag>
      </tags>
  </entry>
  <entry>
    <title>前端如何写一个精确的倒计时</title>
    <url>//post/how-to-write-a-count-down.html</url>
    <content><![CDATA[<p>关于写倒计时大家可能都都比较熟悉，使用 setTimeout 或 setInterval 就可以搞定。几秒钟或者几分钟的倒计时这样写没有问题，但是如果是长时间的倒计时，这样写就会不准确。如果用户修改了他的设备时间，这样的倒计时就没有意义了。今天就说说写一个精确的倒计时的方法。</p>
<span id="more"></span>
<p><img data-src="https://img.alicdn.com/tfs/TB18QnlOpXXXXcVXpXXXXXXXXXX-388-256.png"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>众所周知 setTimeout 或者 setInterval 调用的时候会有微小的误差。有人做了一个 <a href="https://bl.ocks.org/kenpenn/raw/92ebaa71696b4c4c3acd672b1bb3f49a/">demo</a> 来观察这个现象并对其做了修正。短时间的误差倒也可以接受，但是作为一个长时间的倒计时，误差累计就会导致倒计时不准确。</p>
<p>因此我们可以在获取剩余时间的时候，每次 new 一个设备时间，因为设备时间的流逝相对是准确的，并且如果设备打开了网络时间同步，也会解决这个问题。</p>
<p>但是，如果用户修改了设备时间，那么整个倒计时就没有意义了，用户只要将设备时间修改为倒计时的 endTime 就可以轻易看到倒计时结束是页面的变化。因此一开始获取服务端时间就是很重要的。</p>
<p>简单的说，一个简单的精确倒计时原理如下：</p>
<ul>
<li>初始化时请求一次服务器时间 serverTime，再 new 一个设备时间 deviceTime</li>
<li>deviceTime 与 serverTime 的差作为时间偏移修正</li>
<li>每次递归时 new 一个系统时间，解决 setTimeout 不准确的问题</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>获取剩余时间的代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 获取剩余时间
 * @param  &#123;Number&#125; endTime    截止时间
 * @param  &#123;Number&#125; deviceTime 设备时间
 * @param  &#123;Number&#125; serverTime 服务端时间
 * @return &#123;Object&#125;            剩余时间对象
 */</span>
<span class="token keyword">let</span> <span class="token function-variable function">getRemainTime</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">endTime<span class="token punctuation">,</span> deviceTime<span class="token punctuation">,</span> serverTime</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> t <span class="token operator">=</span> endTime <span class="token operator">-</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> serverTime <span class="token operator">+</span> deviceTime
    <span class="token keyword">let</span> seconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> minutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> hours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> days <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>t <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">'total'</span><span class="token operator">:</span> t<span class="token punctuation">,</span>
        <span class="token string-property property">'days'</span><span class="token operator">:</span> days<span class="token punctuation">,</span>
        <span class="token string-property property">'hours'</span><span class="token operator">:</span> hours<span class="token punctuation">,</span>
        <span class="token string-property property">'minutes'</span><span class="token operator">:</span> minutes<span class="token punctuation">,</span>
        <span class="token string-property property">'seconds'</span><span class="token operator">:</span> seconds
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><del>获取服务器时间可以使用 mtop 接口 <code>mtop.common.getTimestamp</code> </del></p>
<p>然后可以通过下面的方式来使用：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取服务端时间（获取服务端时间代码略）</span>
<span class="token function">getServerTime</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">serverTime</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//设置定时器</span>
    <span class="token keyword">let</span> intervalTimer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

        <span class="token comment">// 得到剩余时间</span>
        <span class="token keyword">let</span> remainTime <span class="token operator">=</span> <span class="token function">getRemainTime</span><span class="token punctuation">(</span>endTime<span class="token punctuation">,</span> deviceTime<span class="token punctuation">,</span> serverTime<span class="token punctuation">)</span>

        <span class="token comment">// 倒计时到两个小时内</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime<span class="token punctuation">.</span>total <span class="token operator">&lt;=</span> <span class="token number">7200000</span> <span class="token operator">&amp;&amp;</span> remainTime<span class="token punctuation">.</span>total <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// do something</span>

        <span class="token comment">//倒计时结束</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime<span class="token punctuation">.</span>total <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// do something</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样的的写法也可以做到准确倒计时，同时也比较简洁。不需要隔段时间再去同步一次服务端时间。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在写倒计时的时候遇到了一个坑这里记录一下。</p>
<p><strong>千万别在倒计时结束的时候请求接口</strong>。会让服务端瞬间 QPS 峰值达到非常高。</p>
<p><img data-src="https://img.alicdn.com/tfs/TB1LBzjOpXXXXcnXpXXXXXXXXXX-154-71.png"></p>
<p>如果在倒计时结束的时候要使用新的数据渲染页面，正确的做法是：</p>
<p>在倒计时结束前的一段时间里，先请求好数据，倒计时结束后，再渲染页面。</p>
<p>关于倒计时，如果你有什么更好的解决方案，欢迎评论交流。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 JavaScript 创建并下载文件</title>
    <url>//post/js-create-file-and-download.html</url>
    <content><![CDATA[<p>本文将介绍如何使用 JavaScript 创建文件，并自动/手动将文件下载。这在导出原始数据时会比较方便。</p>
<span id="more"></span>
<h2 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 创建并下载文件
 * @param  &#123;String&#125; fileName 文件名
 */</span>
    <span class="token keyword">var</span> aTag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    aTag<span class="token punctuation">.</span>download <span class="token operator">=</span> fileName<span class="token punctuation">;</span>
    aTag<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
    aTag<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>很简单对吧，直接调用这个方法，传入文件名和文件内容，程序新建 a 标签，新建 Blob 对象，将文件名赋给 a 标签，同时将 Blob 对象作为 Url 也赋给 a 标签，模拟点击事件，自动下载成功，最后再回收内存。下面我们来看看具体是怎么操作的。</p>
<p><img data-src="https://img.alicdn.com/tfs/TB16.GnOpXXXXXdapXXXXXXXXXX-307-134.png"></p>
<h2 id="Blob-对象"><a href="#Blob-对象" class="headerlink" title="Blob 对象"></a>Blob 对象</h2><p>Blob 对象是一个字节序列。拥有 <code>size</code> 和 <code>type</code> 等属性。</p>
<p>拥有 2 个只读状态 <code>OPEND</code> 和 <code>CLOSED。</code></p>
<p>Blob 对象属于 JavaScript Web APIs 中的 File API 规定的部分，可以参考 W3C 文档中的 <a href="https://www.w3.org/TR/2015/WD-FileAPI-20150421/#blob"> The Blob Interface and Binary Data</a></p>
<p>再回来看看我们的代码里是这么写的，使用了 Blob 的构造函数：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">

使用方括号的原因是，其构造函数的参数为以下4中：

- ArrayBuffer [TypedArrays] elements.
- ArrayBufferView [TypedArrays] elements.
- Blob elements.
- DOMString [WebIDL] elements.

所谓 </span><span class="token template-punctuation string">`</span></span>ArrayBuffer<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 是一种用于呈现通用、固定长度的二进制数据的类型。详情可以参考 [ArrayBuffer -MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) 以及 [ECMAScript2015 标准中的 ArrayBuffer](http://www.ecma-international.org/ecma-262/6.0/#sec-arraybuffer-objects)。

## Blob URLs

Blob URLs 被创建或注销是使用 </span><span class="token template-punctuation string">`</span></span><span class="token constant">URL</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 对象上的方法。这个 </span><span class="token template-punctuation string">`</span></span><span class="token constant">URL</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 对象被挂在 </span><span class="token template-punctuation string">`</span></span>Window<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> (HTML) 对象下，或者 </span><span class="token template-punctuation string">`</span></span>WorkerGlobalScope<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> (Web Workers)对象下。

拥有以下静态方法 </span><span class="token template-punctuation string">`</span></span>createObjectURL<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 和 </span><span class="token template-punctuation string">`</span></span>revokeObjectURL<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">，用于创建一个 blob 对象的 url 和注销这个 blob url。

详情可查看 [关于创建和注销 Blob URL 的 W3C 标准文档]( https://www.w3.org/TR/2015/WD-FileAPI-20150421/#creating-revoking)

## 模拟 click

</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>js
element<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 W3C 中很早就有这个<a href="https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-2651361">规范</a>，不需要写繁琐的模拟事件触发的代码。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>目前我将这个技术使用在 天猫双十一技术和UED庆功会 的摇火箭大屏游戏中。最后的游戏结果排名，在请求了接口后，在前端直接生成并下载到了本地，作为记录保存。主要也是因为服务端暂时没有提供这个一张表去记录游戏结果，于是采用了前端记录的解决方案。</p>
<p>大家当时都玩的好开心啊，😁。你们的甘其食和全家卡的名单就是这样生成的！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.alloyteam.com/2014/01/use-js-file-download/">在浏览器端用JS创建和下载文件 -alloyteam</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对这个 jekyll 博客主题的改版和重构</title>
    <url>//post/jekyll-theme-version-2-0.html</url>
    <content><![CDATA[<p>本文主要说明对这个博客主题的改版和代码重构的过程。这个简洁高雅的博客主题受到了很多朋友的喜欢。在写第一版界面时，我对前端并不是很熟悉，对<code>Jekyll</code>也不熟悉。现在距离当时也一年了，对自己当时写的代码也不太满意了，同时<code>Jekyll</code>如今也已经升级了，目前最新版为3.1.2。因此我在临近毕业尚未入职前做一下博客主题的代码重构和改版吧。</p>
<span id="more"></span>
<p>主要想做这些事情有：添加归档，添加标签，添加分类页面，主页显示文章摘要，代码去除 jQuery 和 BootStrap，优化移动端显示，将所有变量写入配置文件<code>_config.yml</code>中等。再优化一些细节吧。希望更多人会喜欢。</p>
<h2 id="改版重构说明"><a href="#改版重构说明" class="headerlink" title="改版重构说明"></a>改版重构说明</h2><ul>
<li><p><strong>使用 GitHub 风格的代码块 Markdown 写法 (Fenced code blocks)。</strong></p>
<p>  即 GFM(github flavored markdown) 的方式。</p>
<p>  Jekyll 已经升级至 3.1.2（2016-03），其中有一些新的要注意的地方，比如官网上说使用了 <code>Rouge</code> 去做代码高亮而不是默认的 <code>Pygments</code>，因为 <code>Jekyll</code> 本身是基于 Ruby 的，因此我看到官方说希望不再使用基于 Python 的 <code>Pygments</code> 了，而是都使用基于 Ruby 的代码。详情见官网升级说明 <a href="https://jekyllrb.com/docs/upgrading/2-to-3/#syntax-highlighter-changed">syntax-highlighter-changed</a>。</p>
</li>
<li><p><strong>首页中添加摘要</strong></p>
<p>  摘要可以在每一篇 md 文件头中使用 excerpt 属性写出来。也可以在正文中，4个换行符来分割，这个设置见配置文件<code>_config.yml</code>。</p>
</li>
<li><p><strong>添加归档</strong></p>
<p>  上一版中没有归档，现在专门做了一个归档页面，当文章很多时方便根据年份快速查阅。</p>
</li>
<li><p><strong>添加标签</strong></p>
<p>  标签还是很有必要添加的，上一版中也没有这个功能。现在也可以根据标签查找文章了。同时标签还有一个重要的作用是，用来获取相似文章的。</p>
</li>
<li><p><strong>添加分类页</strong></p>
<p>  之前的分类就是在首页中直接完成的，现在和标签和归档类似，我将分类单独制作为一页，方便查阅。</p>
</li>
<li><p><strong>去掉 jQuery 和 BootStrap</strong></p>
<p>  我觉得太重了，没必要使用这两个库，使用原生 JavaScript 和 CSS就可以做到一样的效果，代码量大大减轻，载入速度略有提高。</p>
</li>
<li><p><strong>重写了demo页的瀑布流布局</strong></p>
<p>  改变数据写死的方式，将数据用 json 格式录入，由 JavaScript 拼接为 HTML 代码。同时，使用 <a href="http://masonry.desandro.com/">Masonry</a>，重写了瀑布流布局。</p>
</li>
<li><p><strong>简化评论配置，支持 多说 和 disqus</strong></p>
<p>  在<code>_config.yml</code>中评论配置直接添加自己的<code>short_name</code>，评论就能正常使用了。</p>
</li>
</ul>
<p>下面列举一些可能遇到的问题，至少我是遇到了：</p>
<h2 id="RubyGems-无法访问，SSL-证书问题"><a href="#RubyGems-无法访问，SSL-证书问题" class="headerlink" title="RubyGems 无法访问，SSL 证书问题"></a>RubyGems 无法访问，SSL 证书问题</h2><p>以前我使用的是 RubyGems 的淘宝镜像<a href="https://ruby.taobao.org/">https://ruby.taobao.org/</a>。现在这个镜像已经不再维护了，作者 <a href="https://ruby-china.org/huacnlee">huacnlee (李华顺)</a> 转到 <a href="https://ruby-china.org/">Ruby China</a> 中继续维护了，详情见 <a href="https://gems.ruby-china.org/">RubyGems 镜像- Ruby China</a>。</p>
<h3 id="错误呈现"><a href="#错误呈现" class="headerlink" title="错误呈现"></a>错误呈现</h3><p>在执行任何<code>gem</code>命令的时候出现以下错误：</p>
<pre class="line-numbers language-none"><code class="language-none">ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)
    SSL_connect returned&#x3D;1 errno&#x3D;0 state&#x3D;SSLv3 read server certificate B: certificate verify failed (https:&#x2F;&#x2F;gems.ruby-china.org&#x2F;specs.4.8.gz)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>根据 <a href="https://gems.ruby-china.org/">https://gems.ruby-china.org/</a> 页面最下方提供的 GitHub Issue 地址。</p>
<p>可以进入这个 issue：<a href="https://github.com/ruby-china/rubygems-mirror/issues/3">https://github.com/ruby-china/rubygems-mirror/issues/3</a></p>
<p>其中 sanlengjingvv 给出了一个链接地址 <a href="https://gist.github.com/fnichol/867550">https://gist.github.com/fnichol/867550</a> 里面提供了方法。我就是采用这里面的方法解决的。</p>
<p>我使用的是 <a href="https://gist.github.com/fnichol/867550#the-manual-way-boring">The Manual Way</a>，因为 <a href="https://gist.github.com/fnichol/867550#the-ruby-way-fun">The Ruby Way</a> 我没有成功，不知道什么原因，有兴趣的朋友可以试试。下面说说我的具体操作吧。</p>
<p>首先从 <a href="https://curl.haxx.se/ca/cacert.pem">https://curl.haxx.se/ca/cacert.pem</a> 将文件<code>cacert.pem</code>下载至 <code>C:\RailsInstaller\cacert.pem</code></p>
<p>然后执行</p>
<pre class="line-numbers language-none"><code class="language-none">set SSL_CERT_FILE&#x3D;C:\RailsInstaller\cacert.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就成功了，不会再出现 SSL 错误了。</p>
<p>最后原文中说，为了长久设置，将这个目录存入控制面板中。我没理解是什么意思，是指环境变量吗？有朋友知道的话，欢迎留言告知我。</p>
<p>我存入环境变量后，还是会出现 SSL 错误，这时再次执行上面那条命令即可。</p>
<h2 id="jekyll-paginate-依赖缺失"><a href="#jekyll-paginate-依赖缺失" class="headerlink" title="jekyll-paginate 依赖缺失"></a>jekyll-paginate 依赖缺失</h2><p>因为 jekyll 3 中默认安装已经没有这个分页组件了，官方把这个分页组件插件化了，因此要独立安装。详情见 <a href="https://jekyllrb.com/docs/pagination/">https://jekyllrb.com/docs/pagination/</a>。</p>
<h3 id="错误呈现-1"><a href="#错误呈现-1" class="headerlink" title="错误呈现"></a>错误呈现</h3><p>在启动 jekyll 服务的时候出现以下错误：</p>
<pre class="line-numbers language-none"><code class="language-none">jekyll serve
Configuration file: c:&#x2F;gitWorkSpace&#x2F;blog-based-on-jekyll-3&#x2F;_config.yml
  Dependency Error: Yikes! It looks like you don&#39;t have jekyll-paginate or one of its dependencies installed. In order to use Jekyll as currently configured, you&#39;ll need to install this gem. The full error message from Ruby is: &#39;cannot load such file -- jekyll-paginate&#39; If you run into trouble, you can find helpful resources at http:&#x2F;&#x2F;jekyllrb.com&#x2F;help&#x2F;!
jekyll 3.1.2 | Error:  jekyll-paginate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>我们安装这个插件到本地即可。</p>
<pre class="line-numbers language-none"><code class="language-none">gem install jekyll-paginate
Fetching: jekyll-paginate-1.1.0.gem (100%)
Successfully installed jekyll-paginate-1.1.0
Parsing documentation for jekyll-paginate-1.1.0
Installing ri documentation for jekyll-paginate-1.1.0
Done installing documentation for jekyll-paginate after 3 seconds
1 gem installed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="被-Foxit-pdf-reader-占用4000端口"><a href="#被-Foxit-pdf-reader-占用4000端口" class="headerlink" title="被 Foxit pdf reader 占用4000端口"></a>被 Foxit pdf reader 占用4000端口</h2><h3 id="错误呈现-2"><a href="#错误呈现-2" class="headerlink" title="错误呈现"></a>错误呈现</h3><p>在本地使用命令</p>
<pre class="line-numbers language-none"><code class="language-none">jekyll serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>出现错误，如下</p>
<pre class="line-numbers language-none"><code class="language-none">jekyll serve
Configuration file: E:&#x2F;GitWorkSpace&#x2F;blog&#x2F;_config.yml
           Source: E:&#x2F;GitWorkSpace&#x2F;blog
      Destination: E:&#x2F;GitWorkSpace&#x2F;blog&#x2F;_site
Incremental build: disabled. Enable with --incremental
     Generating...
                   done in 0.547 seconds.
 Please add the following to your Gemfile to avoid polling for changes:
   gem &#39;wdm&#39;, &#39;&gt;&#x3D; 0.1.0&#39; if Gem.win_platform?
Auto-regeneration: enabled for &#39;E:&#x2F;GitWorkSpace&#x2F;blog&#39;
Configuration file: E:&#x2F;GitWorkSpace&#x2F;blog&#x2F;_config.yml
jekyll 3.1.1 | Error:  Permission denied - bind(2) for 127.0.0.1:4000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>网上查阅后，这篇博文解决了我的问题。<a href="http://lxconan.github.io/2016/01/07/who-is-using-my-port/">谁占了我的端口 for Windows –By Liu Xia, ThoughtWorks Senior Consultant. .NET Expert</a></p>
<p>上述报错主要原因是，jekyll 启动使用的4000端口被福昕pdf阅读器的自动更新进程占用了，关掉这个进程，jekyll在本地调试启动服务时就没有问题了。</p>
<h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>简单的解决方法是：</p>
<p>输入命令，查看各端口被占用情况</p>
<pre class="line-numbers language-none"><code class="language-none">netstat -ano<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>找到4000端口被占用的<code>PID</code></p>
<p>我的结果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">协议  本地地址          外部地址          状态           PID
TCP  0.0.0.0:80        0.0.0.0:0         LISTENING     4
TCP  0.0.0.0:135       0.0.0.0:0         LISTENING     836
TCP  0.0.0.0:445       0.0.0.0:0         LISTENING     4
TCP  0.0.0.0:1801      0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:2103      0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:2105      0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:2107      0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:3306      0.0.0.0:0         LISTENING     2404
TCP  0.0.0.0:3389      0.0.0.0:0         LISTENING     1172
TCP  0.0.0.0:49664     0.0.0.0:0         LISTENING     584
TCP  0.0.0.0:49665     0.0.0.0:0         LISTENING     1072
TCP  0.0.0.0:49666     0.0.0.0:0         LISTENING     460
TCP  0.0.0.0:49667     0.0.0.0:0         LISTENING     1000
TCP  0.0.0.0:49670     0.0.0.0:0         LISTENING     696
TCP  0.0.0.0:49678     0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:49692     0.0.0.0:0         LISTENING     688
TCP  127.0.0.1:4000    0.0.0.0:0         LISTENING     2476
TCP  127.0.0.1:4000    127.0.0.1:55160   ESTABLISHED   2476
TCP  127.0.0.1:4012    0.0.0.0:0         LISTENING     12724<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到4000端口的PID是2476。下面查看是什么进程，命令行中输入：</p>
<pre class="line-numbers language-none"><code class="language-none">tasklist &#x2F;svc &#x2F;FI &quot;PID eq 2476&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>得到结果：</p>
<pre class="line-numbers language-none"><code class="language-none">映像名称                       PID 服务
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
FoxitProtect.exe              2476 FxService<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以看到正是福昕阅读器。下面关掉这个服务就好了。在 win10 中进入任务管理器，选择服务选项卡，关闭这个服务就好了，如下图：</p>
<p><img data-src="http://ww4.sinaimg.cn/large/7011d6cfjw1f1ty28wwj4j20g00aiju7.jpg"></p>
<p>当然也可以在启动jekyll服务的时候指定端口号，如下：</p>
<pre class="line-numbers language-none"><code class="language-none">jekyll serve --port 3000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样在浏览器中输入 <a href="http://localhost:3000/">http://localhost:3000/</a> 就可以访问了。</p>
<p>还可以在配置文件<code>_config.yml</code>中添加端口号设置（参考<a href="https://jekyllrb.com/docs/configuration/#serve-command-options">官网文档-Serve Command OptionsPermalink</a>），如下：</p>
<pre class="line-numbers language-none"><code class="language-none"># port
port: 1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>此时，启动jekyll服务后，访问 <a href="http://localhost:1234/">http://localhost:1234/</a> 即可</p>
]]></content>
      <categories>
        <category>jekyll</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>News_scrapy_redis 框架系统</title>
    <url>//post/python-crawl-words.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该文档针对爬虫系统设计目标中相应的场景给出技术方案</p>
<span id="more"></span>
<h2 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h2><p>1、代码复用，功能模块化。可以支持上千个网站的数据爬取；</p>
<p>2、易扩展。爬虫框架易扩展，爬取规则、解析规则、入库规则易扩展，支持框架切换；</p>
<p>3、健壮性、可维护性。对数据爬取过程中的各种异常，例如：断网、反爬升级、爬“脏数据”等，需要实时的监控，以及给出准确的定位。异常处理以及降级措施需要完善；</p>
<p>4、后续扩展为分布式结构；</p>
<p>5、支持功能模块的易调整；</p>
<h2 id="框架使用说明"><a href="#框架使用说明" class="headerlink" title="框架使用说明"></a>框架使用说明</h2><p><strong>News_scrapy_redis4. <a href="https://github.com/xudailong/News_scrapy_redis.git">github地址</a></strong></p>
<ol>
<li><p><code>News_scrapy_redis</code> 基于<code>scrapy_redis</code>实现数据的增量爬取（含去重），支持分布式，支持异常日志等输出，功能模块化。</p>
</li>
<li><p>树结构：</p>
</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
├─<span class="token punctuation">.</span>idea
├─Daily_crawler
├─<span class="token constant">ETL</span>
├─log
├─News_scrapy
│  ├─spiders
│  │  └─__pycache__
│  └─__pycache__
├─News_simhash
└─News_statistics
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>各模块说明：<blockquote>
<p>Daily_crawler：    </p>
</blockquote>
<ul>
<li><code>daily_crawler.cron crontab</code>的定时文件, 定时运行<code>start_crawl.sh</code>脚本</li>
<li><code>start_crawl.sh</code> 启动爬虫模块，并将每次爬取所花费的时间 写入 log/run_time.txt</li>
<li><code>push_urls.py</code> 每次在爬虫之前运行，清空调度队列，并将start_url push到调度队列中</li>
<li><code>news_crawl.sh</code> 执行爬虫模块（增量爬取）， 并自动进行相似文档去重，ETL, 存入mongodb</li>
</ul>
<blockquote>
<p>ETL:（暂时用不到）</p>
</blockquote>
<ul>
<li><code>/Model</code> 存放训练好的词典，语料，TF-IDF，LDA， word2vec模型</li>
<li><code>auto_embedding.py</code> 新闻语料的清洗，以及自动化生成新闻的标题和内容embedding</li>
<li><code>auto_embedding_simhash.py</code> 增加了自动化相似文档的去重</li>
<li><code>stop_words</code> 常用的中文停留词</li>
<li><code>train_step1</code> 训练LDA模型</li>
<li><code>train_step2</code> 训练LDA模型</li>
</ul>
<blockquote>
<p>log:</p>
</blockquote>
<ul>
<li><code>auto_embedding_simhash.log</code> 执行auto_embedding_simhash.py的日志文件</li>
<li><code>crawler.log</code> 执行scrapy-redis爬虫模块的日志文件</li>
<li><code>news_count.log</code> 执行news_statistics.py的日志文件</li>
<li><code>run_time.txt</code> 每次执行爬虫脚本的运行时间</li>
</ul>
<blockquote>
<p>News_data:</p>
</blockquote>
<ul>
<li>每个文件夹是抓每天从各个网站抓取到的新闻</li>
</ul>
<blockquote>
<p>News_scrapy:</p>
</blockquote>
<ul>
<li>基于scrapy-redis的爬虫模块，在scrapy的基础上修改得到</li>
<li>各大网站数据的爬取解析工作主要在该文件中进行</li>
</ul>
<blockquote>
<p>News_simhash（此处只需要进行title的去重）:</p>
</blockquote>
<ul>
<li>实现相似文档的去重</li>
<li>automatic_simhash.py 自动实现相似文档的去重（仅基于新闻内容）</li>
<li><code>near_duplicates.py</code> 对初始化的Simhash_index进行相似新闻内容的去重</li>
</ul>
<blockquote>
<p>News_statistics:</p>
</blockquote>
<ul>
<li><code>news_count.json</code> 每天从各个网站抓取的新闻数量</li>
<li><code>news_statistics.py</code> 统计新闻增量的脚本</li>
</ul>
</li>
</ol>
<h2 id="框架环境"><a href="#框架环境" class="headerlink" title="框架环境"></a>框架环境</h2><ol>
<li>Redis环境环境</li>
<li>scrapy框架环境</li>
<li>python3环境环境</li>
</ol>
<h2 id="框架完善"><a href="#框架完善" class="headerlink" title="框架完善"></a>框架完善</h2><ol>
<li>IP代理池</li>
<li>cookies池 </li>
<li>其他</li>
</ol>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Jekyll 搭建静态博客</title>
    <url>//post/reate-my-blog-with-jekyll.html</url>
    <content><![CDATA[<p>一直以来都想搭建一个自己的博客，但是近半年做项目太忙，再加上教研室的网络很坑爹，所以也一直没顾得上。之前用过 WordPress 托管在免费的京东云擎上，但是速度太慢。在知乎上看到一些相关的内容，于是选择了在github上用jekyll搭建博客。</p>
<span id="more"></span>




<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>在jekyll的官网上 <a href="http://jekyllrb.com/">http://jekyllrb.com/</a> 其实已经说得比较明白了，我在这里还是简单的说一下吧。我用的是Windows系统。<br>主要环节有：安装Ruby，安装RubyGems，安装jekyll，安装代码高亮插件，安装node.js</p>
<h3 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><p>ruby官网下载安装：<a href="https://www.ruby-lang.org/en/downloads/">https://www.ruby-lang.org/en/downloads/</a></p>
<p>安装完成后配置环境变量</p>
<p>在命令提示符中，得到ruby版本号，如下图，即安装成功</p>
<p><img data-src="ww4.sinaimg.cn/large/7011d6cfjw1f2ue0e393vj20cu00t748.jpg"></p>
<h3 id="安装RubyGems"><a href="#安装RubyGems" class="headerlink" title="安装RubyGems"></a>安装RubyGems</h3><p>官网下载 <a href="http://rubygems.org/pages/download">http://rubygems.org/pages/download</a> rubygems-2.4.5.zip   </p>
<p>cd到RubyGems目录   </p>
<p><img data-src="ww1.sinaimg.cn/large/7011d6cfjw1f2ue1l2yscj20gk02amxj.jpg"></p>
<p>执行安装   </p>
<p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue1w8eqnj20bx00hglg.jpg">  </p>
<h3 id="用RubyGems安装Jekyll"><a href="#用RubyGems安装Jekyll" class="headerlink" title="用RubyGems安装Jekyll"></a>用RubyGems安装Jekyll</h3><p>执行下面的语句安装   </p>
<p><img data-src="http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue2g2p3uj207x00ft8j.jpg"></p>
<p>安装结束画面   </p>
<p><img data-src="http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue32drwhj20hv09xq5m.jpg"></p>
<p>至此jekyll就已经安装完毕了，后续就是个性化的自己设定了。</p>
<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>在d盘新建一个工作区jekyllWorkspace</p>
<p>cd到jekyllWorkspace   </p>
<p>执行jekyll new name创建新的工作区   </p>
<p><img data-src="http://ww3.sinaimg.cn/large/7011d6cfjw1f2ue3lt31nj20cj02nt8u.jpg"></p>
<p>文件结构如下：   </p>
<p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue3ujsybj20ek06wabh.jpg"></p>
<p>cd到博客文件夹，开启服务器   </p>
<p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue47y9lgj20ao00f0sl.jpg"></p>
<p>watch为了检测文件夹内的变化，即修改后不需要重新启动jekyll</p>
<p>我的环境下启动报错(你的可能没有)，再安装yajl-ruby和rouge  </p>
<p><img data-src="http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue4nelnxj20dd077q49.jpg"></p>
<p>再次启动服务器成功</p>
<p><img data-src="http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue4v42koj20g505bdgy.jpg"></p>
<p>访问 <a href="http://localhost:4000/">http://localhost:4000/</a>   </p>
<p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue56ckwoj20je0eumz3.jpg"></p>
<p>详细文章页面   </p>
<p><img data-src="http://ww2.sinaimg.cn/large/7011d6cfjw1f2ue5f3j9cj20je0gyq7a.jpg"></p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ul>
<li> 整个安装过程参考了jekyll官网，注意jekyll还有一个简体中文官网，不过比较坑（我就被坑了），有些内容没有翻译过来，有可能会走弯路，建议如果想看中文的相关资料，也要中英对照着阅读。<a href="http://jekyllcn.com/">jekyll中文网 http://jekyllcn.com</a>, <a href="http://jekyllrb.com/">jekyll英文网 http://jekyllrb.com</a></li>
<li> jekyll中的css是用sass写的，当然直接在<code>_sass/_layout.scss</code>中添加css也是可以的。</li>
<li> 本文是用Markdown格式来写的，相关语法可参考： <a href="http://wowubuntu.com/markdown/">Markdown 语法说明 (简体中文版) http://wowubuntu.com/markdown/</a>  </li>
<li> 按照本文的说明搭建完博客后，用<code>github Pages</code>托管就可以看到了。注意，在github上面好像不支持rouge，所以要push到github上时，我将配置文件_config.yml中的代码高亮改变为<code>highlighter: pygments</code>就可以了</li>
<li> 博客默认是没有评论系统的，本文的评论系统使用了多说，详细安装办法可访问<a href="http://duoshuo.com/">多说官网 http://duoshuo.com/</a>，当然也可以使用<a href="http://changyan.sohu.com/">搜狐畅言 http://changyan.sohu.com/</a>作为评论系统。</li>
<li> 也可以绑定自己的域名，如果没有域名，可以在<a href="http://www.godaddy.com/">godaddy http://www.godaddy.com/</a>上将域名放入购物车等待降价，买之。</li>
<li> 祝各位新年快乐！</li>
</ul>
<hr>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="hitimes-hitimes-LoadError"><a href="#hitimes-hitimes-LoadError" class="headerlink" title="hitimes/hitimes (LoadError)"></a><code>hitimes/hitimes (LoadError)</code></h3><p><strong>错误代码：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">C:&#x2F;Ruby22&#x2F;lib&#x2F;ruby&#x2F;2.2.0&#x2F;rubygems&#x2F;core_ext&#x2F;kernel_require.rb:54:in &#96;require&#39;: cannot load such file -- hitimes&#x2F;hitimes (LoadError)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>解决方法：</strong></p>
<p>在stackoverflow上又一个很好的解决方法。<a href="http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1">hitimes require error when running jekyll serve on windows 8.1</a> 虽然上面的题主问的是 win 8.1 系统下的情况，但是同样适用于 win7。下面我简单翻译一下错误原因和解决方法。</p>
<blockquote>
<p>可能是 Ruby 2.2 和 hitimes-1.2.2-x86-mingw32 中有一些 ABI 变化，少了一些相关的类库。</p>
<p>所以卸载 hitimes 并通过 <code>--platform ruby</code> 重装即可。代码如下：</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">gem uni hitimes
**Remove ALL versions**
gem ins hitimes -v 1.2.1 --platform ruby<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>然后将自动重新编译 hitimes 并适用于 Ruby 2.2</p>
</blockquote>
<p>下面是我自己的卸载和安装过程：</p>
<pre class="line-numbers language-none"><code class="language-none">E:\GitWorkSpace\gaohaoyang.github.io&gt;gem uni hitimes

You have requested to uninstall the gem:
        hitimes-1.2.2-x86-mingw32

timers-4.0.1 depends on hitimes (&gt;&#x3D; 0)
If you remove this gem, these dependencies will not be met.
Continue with Uninstall? [yN]  y
Successfully uninstalled hitimes-1.2.2-x86-mingw32

E:\GitWorkSpace\gaohaoyang.github.io&gt;gem ins hitimes -v 1.2.1 --platform ruby
Fetching: hitimes-1.2.1.gem (100%)
Temporarily enhancing PATH to include DevKit...
Building native extensions.  This could take a while...
Successfully installed hitimes-1.2.1
Parsing documentation for hitimes-1.2.1
Installing ri documentation for hitimes-1.2.1
Done installing documentation for hitimes after 1 seconds
1 gem installed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>关于，<a href="https://rubygems.org/gems/hitimes/versions/1.2.2">hitimes</a> 是一个快速的高效的定时器解决方案库，详情可以去官网查看。</p>
]]></content>
      <categories>
        <category>jekyll</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 作用域和作用域链</title>
    <url>//post/scope.html</url>
    <content><![CDATA[<h2 id="JavaScript-作用域"><a href="#JavaScript-作用域" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h2><p>作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p>
<hr>
<h3 id="全局作用域-Global-Scope"><a href="#全局作用域-Global-Scope" class="headerlink" title="全局作用域(Global Scope)"></a>全局作用域(Global Scope)</h3><p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。</p>
<ol>
<li>最外层函数和在最外层函数外面定义的变量拥有全局作用域</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> outVariable <span class="token operator">=</span> <span class="token string">"我是最外层变量"</span><span class="token punctuation">;</span> <span class="token comment">//最外层变量</span>
<span class="token keyword">function</span> <span class="token function">outFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//最外层函数</span>
    <span class="token keyword">var</span> inVariable <span class="token operator">=</span> <span class="token string">"内层变量"</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//内层函数</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outVariable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//我是最外层变量</span>
<span class="token function">outFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内层变量</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVariable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//inVariable is not defined</span>
<span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//innerFun is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>所有末定义直接赋值的变量自动声明为拥有全局作用域</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outFun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    variable <span class="token operator">=</span> <span class="token string">"未定义直接赋值的变量"</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> inVariable2 <span class="token operator">=</span> <span class="token string">"内层变量2"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">outFun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要先执行这个函数，否则根本不知道里面是啥</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//未定义直接赋值的变量</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVariable2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//inVariable2 is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>所有window对象的属性拥有全局作用域<br> window对象的内置属性都拥有全局作用域，例如 <code>window.name</code>、<code>window.location</code>、<code>window.top</code> 等。</li>
</ol>
<h3 id="局部作用域-Local-Scope"><a href="#局部作用域-Local-Scope" class="headerlink" title="局部作用域(Local Scope)"></a>局部作用域(Local Scope)</h3><p>和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域<br>。</p>
<p>如 1. 中的变量 <code>inVariable</code> 和函数 <code>innerFun</code> 都只拥有局部作用域。</p>
<hr>
<h3 id="再补充几个例子"><a href="#再补充几个例子" class="headerlink" title="再补充几个例子"></a>再补充几个例子</h3><ul>
<li>全局作用域，函数作用域，eval作用域</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 全局</span>

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">// 函数</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error, b in not defined</span>

<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var a = 1;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eval</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>JavaScript 中没有块作用域</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// item still in scope</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="作用域链-Scope-Chain"><a href="#作用域链-Scope-Chain" class="headerlink" title="作用域链(Scope Chain)"></a>作用域链(Scope Chain)</h2><p>在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p>
<ol>
<li>在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。</li>
<li>函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。</li>
<li>这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。</li>
<li>当运行期上下文被销毁，活动对象也随之销毁。</li>
</ol>
<p>在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。</p>
<hr>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>举一个作用域链的例子。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> outVariable <span class="token operator">=</span> <span class="token string">"我是最外层变量"</span><span class="token punctuation">;</span> <span class="token comment">//最外层变量</span>
<span class="token keyword">function</span> <span class="token function">outFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//最外层函数</span>
    <span class="token keyword">var</span> inVariable <span class="token operator">=</span> <span class="token string">"内层变量"</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//内层函数</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> tempVariable <span class="token operator">=</span> inVariable<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对最开始的代码稍加修改</p>
<p>其作用域链为：</p>
<pre class="line-numbers language-none"><code class="language-none">window
├──outVariable
└──outFun()
   ├──inVariable
   └──innerFun()
      └──tempVariable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于 <code>innerFun()</code>，其作用域链包含 3 个对象：innerFun() 自己的变量对象、outFun()的变量对象、全局变量对象。</p>
<hr>
<h4 id="特例-构造器创建的函数"><a href="#特例-构造器创建的函数" class="headerlink" title="特例-构造器创建的函数"></a>特例-构造器创建的函数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"console.log(typeof i);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token punctuation">&#125;</span>
<span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过构造器创建的函数是访问不到外层的局部变量的。</p>
<hr>
<h3 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h3><p>有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。有两种情况下会发生这种现象。</p>
<ul>
<li><code>try-catch</code> 语句中的 <code>catch</code> 块</li>
<li><code>with</code> 语句</li>
</ul>
<p>对 with 来说，将会指定对象添加到作用域链中。对 catch 来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。</p>
<hr>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。</p>
<hr>
<h2 id="VO-amp-AO"><a href="#VO-amp-AO" class="headerlink" title="VO &amp; AO"></a>VO &amp; AO</h2><h3 id="变量初始化阶段"><a href="#变量初始化阶段" class="headerlink" title="变量初始化阶段"></a>变量初始化阶段</h3><ul>
<li><p>JS解释器如何找到我们定义的函数和变量？</p>
<p>  变量对象 (Variable Object, 缩写为VO) 是一个抽象概念中的“对象”，它用于存储执行上下文中的：</p>
<ol>
<li>变量</li>
<li>函数声明</li>
<li>函数参数</li>
</ol>
</li>
<li><p>VO按照如下顺序填充:</p>
<ol>
<li>函数参数 (若未传入，初始化该参数值为undefined)    </li>
<li>函数声明 (若发生命名冲突，会覆盖)   </li>
<li>变量声明 (初始化变量值为 undefined，若发生命名冲突，会忽略。)</li>
</ol>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// funtion x()</span>

<span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo2</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span>

<span class="token keyword">function</span> <span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>

<span class="token keyword">function</span> <span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> x<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// funtion x()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注：函数表达式不会影响 VO</strong></p>
<hr>
<h3 id="代码执行阶段"><a href="#代码执行阶段" class="headerlink" title="代码执行阶段"></a>代码执行阶段</h3><p>给 VO 对象内的变量赋值。</p>
<p>VO 变为 AO （活动对象 activation object）。</p>
<hr>
<h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.laruence.com/2009/05/28/863.html">鸟哥：Javascript作用域原理</a></li>
<li><a href="http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html">理解 JavaScript 作用域和作用域链</a></li>
<li><a href="http://www.imooc.com/learn/277">JavaScript 深入浅出-慕课网</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>window下python3环境安装scrapy</title>
    <url>//post/scrapy-setup-in-win.html</url>
    <content><![CDATA[<p>目录：</p>
<h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><blockquote>
<p>python3  3.6.4， win7 64位  </p>
</blockquote>
<span id="more"></span>
<h2 id="初次安装："><a href="#初次安装：" class="headerlink" title="初次安装："></a>初次安装：</h2><blockquote>
<p><code> pip install scrapy</code></p>
</blockquote>
<p>使用这个命令，在win7 64位是怎么也安装不上去的，因为这已经是第二次了，</p>
<p>当这个命令输出完后，会出现一系列的问题。当然了，不用怕，这不是需要解决问题的方法来了嘛。</p>
<p>可能出现需要下载版本对应的visual studio,但是也太大了，或也可以说下载慢。。。。。。但是，我们可以不用去进行下载，只要进行下面几个文件的安装就可以了。</p>
<h2 id="打开网站"><a href="#打开网站" class="headerlink" title="打开网站"></a>打开网站</h2><p>首先你打开这个网站（里面包含了各种编译好的库）：</p>
<blockquote>
<p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml">http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml</a></p>
</blockquote>
<h2 id="安装wheel"><a href="#安装wheel" class="headerlink" title="安装wheel"></a>安装wheel</h2><blockquote>
<p><code> pip install wheel</code></p>
</blockquote>
<p>安装成功的界面</p>
<p><img data-src="http://upload-images.jianshu.io/upload_images/2577413-93cab0d529ca1dba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wheel—success.png"></p>
<h2 id="安装-whl文件"><a href="#安装-whl文件" class="headerlink" title="安装.whl文件"></a>安装.whl文件</h2><p>这里需要安装三个.whl文件，而且是全名的安装，</p>
<p>以下三个文件：</p>
<p><img data-src="http://upload-images.jianshu.io/upload_images/2577413-eaf16a31171cd6ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=".whl文件.png"></p>
<p>中途可能会出现<code>Failed to build XXXX </code> 或者是<code> twisted</code>等相关的内容</p>
<p>因为scrapy是基于twisted框架的，所以，twisted框架也需要进行安装</p>
<p>当上面三个文件安装好了：</p>
<p>再次运行：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">scrapy startproject pyjy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样就完成了scrapy在win下python3下的安装</p>
<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 下MySQL的安装</title>
    <url>//post/setup-mysql-inubuntu.html</url>
    <content><![CDATA[<p>1， 打开终端：</p>
<blockquote>
<p> sudo apt-get install mysql-server</p>
</blockquote>
<span id="more"></span>
<p>2 ，接下来会让你选择y/n, 这里你选择y,</p>
<p>3 ，这里会出现一个让你输入mysql-server的密码，输入完后如果鼠标点击不了，可以使用Tab键+enter键继续下一步</p>
<p>4 ，接下来，会继续让我们输入一次密码</p>
<p>5， 密码输入完后，我们这里的mysql-server的用户名是：root ，密码是我们刚刚设置过的密码，</p>
<p>6， 这时候已经安装完成了，我们需要验证一下是否安装上了mysql-server</p>
<blockquote>
<p> mysql -u root -p</p>
</blockquote>
<p>按enter键后会让我们输入密码，当我们输入密码后，会出现：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
snakeson@snakeson<span class="token operator">-</span>Inspiron<span class="token operator">-</span><span class="token number">5421</span><span class="token operator">:</span><span class="token operator">~</span>$ mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p
Enter password<span class="token operator">:</span> 
Welcome to the MySQL monitor<span class="token punctuation">.</span>  Commands end <span class="token keyword">with</span> <span class="token punctuation">;</span> or \g<span class="token punctuation">.</span>
Your MySQL connection id is <span class="token number">5</span>
Server version<span class="token operator">:</span> <span class="token number">5.7</span><span class="token number">.20</span><span class="token operator">-</span>0ubuntu0<span class="token punctuation">.</span><span class="token number">16.04</span><span class="token number">.1</span> <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>

<span class="token function">Copyright</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token punctuation">,</span> Oracle and<span class="token operator">/</span>or its affiliates<span class="token punctuation">.</span> All rights reserved<span class="token punctuation">.</span>

Oracle is a registered trademark <span class="token keyword">of</span> Oracle Corporation and<span class="token operator">/</span>or its
affiliates<span class="token punctuation">.</span> Other names may be trademarks <span class="token keyword">of</span> their respective
owners<span class="token punctuation">.</span>

Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> Type <span class="token string">'\c'</span> to clear the current input statement<span class="token punctuation">.</span>

mysql<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>7 ， 这样我们就在Ubuntu下安装好了mysql-server。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux ubuntu16.04 工具软件</tag>
      </tags>
  </entry>
  <entry>
    <title>代码校验工具 SublimeLinter 的安装与使用</title>
    <url>//post/sublimeLinter.html</url>
    <content><![CDATA[<p>本文我将讲述一下 SublimeLinter 的安装过程。其组件 jshint 的安装与使用。其组件 csslint 的安装与使用。我将基于 <a href="http://sublimetext.com/3">Sublime Text 3</a> 来安装。使用 Sublime Text 2 的用户阅读本文是没有帮助的。</p>
<span id="more"></span>
<p>SublimeLinter 是 Sublime 的插件，它的作用是检查代码语法是否有错误，并提示。习惯了 IDE 下写代码的人一定需要一款在 Sublime 上类似的语法检查工具。下面我们开始。   </p>
<h2 id="安装-SublimeLinter"><a href="#安装-SublimeLinter" class="headerlink" title="安装 SublimeLinter"></a>安装 SublimeLinter</h2><p>如同其他插件一样使用 Package Control 来安装。   </p>
<ol>
<li>按下 <code>Ctrl+Shift+p</code> 进入 Command Palette   </li>
<li>输入<code>install</code>进入 Package Control: Install Package   </li>
<li>输入<code>SublimeLinter</code>。进行安装.   </li>
</ol>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-sublimeLinter.jpg" alt="SublimeLinter">   </p>
<p>安装完成后可以看到这样一段话：   </p>
<pre class="line-numbers language-none"><code class="language-none">Welcome to SublimeLinter, a linter framework for Sublime Text 3.

                  * * * IMPORTANT! * * *

         SublimeLinter 3 is NOT a drop-in replacement for
        earlier versions.

         Linters *NOT* included with SublimeLinter 3,
         they must be installed separately.

         The settings are different.

                 * * * READ THE DOCS! * * *

 Otherwise you will never know how to install linters, nor will
 you know about all of the great new features in SublimeLinter 3.

 For complete documentation on how to install and use SublimeLinter,
 please see:

 http:&#x2F;&#x2F;www.sublimelinter.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到具体的 Linters 组件<strong>不</strong>被包含在 SublimeLinter 3 中，所以我们要额外独立安装组件。<br>可以针对不同的语言安装不同的组件。   </p>
<h2 id="JavaScript-语法检查"><a href="#JavaScript-语法检查" class="headerlink" title="JavaScript 语法检查"></a>JavaScript 语法检查</h2><p>SublimeLinter-jshint 是基于 nodeJS 下的 jshint 的插件，实际上 SublimeLinter-jshint 调用了 nodeJS 中 jshint 的接口来进行语法检查的。   </p>
<hr>
<h3 id="安装-SublimeLinter-jshint"><a href="#安装-SublimeLinter-jshint" class="headerlink" title="安装 SublimeLinter-jshint"></a>安装 SublimeLinter-jshint</h3><p>为了让 JavaScript 代码有语法检查，我们安装 SublimeLinter-jshint<br>同样的方法，我们安装 SublimeLinter-jshint    </p>
<ol>
<li>按下 <code>Ctrl+Shift+p</code> 进入 Command Palette   </li>
<li>输入<code>install</code>进入 Package Control: Install Package   </li>
<li>输入<code>SublimeLinter-jshint</code>。进行安装.   </li>
</ol>
<p>如下图   </p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint.jpg" alt="SublimeLinter-jshint">   </p>
<p>安装完成后我们可以看到下面的一段话   </p>
<pre class="line-numbers language-none"><code class="language-none">SublimeLinter-jshint
  -------------------------------
  This linter plugin for SublimeLinter provides an interface to jshint.

  ** IMPORTANT! **

  Before this plugin will activate, you *must*
  follow the installation instructions here:

  https:&#x2F;&#x2F;github.com&#x2F;SublimeLinter&#x2F;SublimeLinter-jshint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="安装-nodeJS-和-jshint"><a href="#安装-nodeJS-和-jshint" class="headerlink" title="安装 nodeJS 和 jshint"></a>安装 nodeJS 和 jshint</h3><p>在插件开始工作之前，我们必须再看一下上述插件的<a href="https://github.com/SublimeLinter/SublimeLinter-jshint">安装说明</a><br>通过 <a href="https://github.com/SublimeLinter/SublimeLinter-jshint">SublimeLinter-jshint 的说明</a> 我们可以看到，这个组件依赖于 nodeJS 下的 jshint，所以我们安装 nodeJS 环境和 nodeJS 下的 jshint。   </p>
<ol>
<li>安装 <a href="https://nodejs.org/">Node.js</a>   </li>
<li>通过 npm 安装<code>jshint</code>   </li>
</ol>
<p>在命令行下输入如下代码，完成安装   </p>
<pre><code>npm install -g jshint
</code></pre>
<p>安装完成后命令行中出现如下的信息   </p>
<pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator\AppData\Roaming\npm\jshint -&gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\jshint\bin\jshint
jshint@2.6.3 C:\Users\Administrator\AppData\Roaming\npm\node_modules\jshint
├── strip-json-comments@1.0.2
├── underscore@1.6.0
├── exit@0.1.2
├── shelljs@0.3.0
├── console-browserify@1.1.0 (date-now@0.1.4)
├── htmlparser2@3.8.2 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.13, domutils@1.5.1)
├── minimatch@1.0.0 (sigmund@1.0.0, lru-cache@2.5.0)
└── cli@0.6.6 (glob@3.2.11)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以查看 jshint 版本，已确认安装完成。  </p>
<pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator&gt;jshint -v
jshint v2.6.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>现在，恭喜你，我们使用 Sublime 编辑 JavaScript 文件，就会有语法检查了！   </p>
<p>在编辑过程中，会有如下提示   </p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test.jpg" alt="SublimeLinter-jshint-test"></p>
<p>点击提示点后，Sublime 状态栏也会有相应的说明   </p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test2.jpg" alt="SublimeLinter-jshint-test2"></p>
<h2 id="css-语法检查"><a href="#css-语法检查" class="headerlink" title="css 语法检查"></a>css 语法检查</h2><p>与 jshint 同理，SublimeLinter-csslint 也是基于 nodeJS 下的 csslint 的插件，实际上 SublimeLinter-csslint 调用了 nodeJS 中 csslint 的接口来进行语法检查的。   </p>
<hr>
<h3 id="安装-SublimeLinter-csslint"><a href="#安装-SublimeLinter-csslint" class="headerlink" title="安装 SublimeLinter-csslint"></a>安装 SublimeLinter-csslint</h3><p>同样的方法。   </p>
<ol>
<li>按下 <code>Ctrl+Shift+p</code> 进入 Command Palette   </li>
<li>输入<code>install</code>进入 Package Control: Install Package   </li>
<li>输入<code>SublimeLinter-csslint</code>。进行安装.   </li>
</ol>
<p>如下图   </p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint.jpg" alt="SublimeLinter-csslint">   </p>
<p>安装完成后我们可以看到下面的一段话   </p>
<pre class="line-numbers language-none"><code class="language-none">SublimeLinter-csslint
-------------------------------
This linter plugin for SublimeLinter provides an interface to csslint.

** IMPORTANT! **

Before this plugin will activate, you *must*
follow the installation instructions here:

https:&#x2F;&#x2F;github.com&#x2F;SublimeLinter&#x2F;SublimeLinter-csslint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在使用插件之前，必须遵循上述网址中的<a href="https://github.com/SublimeLinter/SublimeLinter-csslint">安装说明</a>   </p>
<h3 id="在-nodeJS-下安装-csslint"><a href="#在-nodeJS-下安装-csslint" class="headerlink" title="在 nodeJS 下安装 csslint"></a>在 nodeJS 下安装 csslint</h3><p>进入上述的 GitHub 地址，csslint 的说明页。我们知道了和 jshint 一样，csslint 也是基于 nodeJS 下的 csslint 来使用的。   </p>
<p>这里安装 nodeJS 过程省略。<br>只需用 npm 安装 csslint 即可。   </p>
<p>在命令行中输入     </p>
<pre class="line-numbers language-none"><code class="language-none">npm install -g csslint   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装完成后命令行中出现如下的信息     </p>
<pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator\AppData\Roaming\npm\csslint -&gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\csslint\cli.js
csslint@0.10.0 C:\Users\Administrator\AppData\Roaming\npm\node_modules\csslint
└── parserlib@0.2.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以查看 csslint 版本，已确认安装完成。   </p>
<pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator&gt;csslint --version
v0.10.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>现在，恭喜你，我们使用 Sublime 编辑 css 文件，就会有语法检查了！     </p>
<p>在编辑过程中，会有如下提示   </p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test.jpg" alt="SublimeLinter-csslint-test"></p>
<p>点击提示点后，Sublime 状态栏也会有相应的说明   </p>
<p><img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test2.jpg" alt="SublimeLinter-csslint-test2"></p>
]]></content>
      <categories>
        <category>Sublime</category>
      </categories>
      <tags>
        <tag>Sublime jshint csslint</tag>
      </tags>
  </entry>
  <entry>
    <title>Fisher–Yates shuffle 洗牌算法</title>
    <url>//post/shuffle-algorithm.html</url>
    <content><![CDATA[<p>简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。</p>
<span id="more"></span>
<p>本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。</p>
<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Riffle_shuffle.jpg/320px-Riffle_shuffle.jpg"></p>
<h2 id="Fisher-and-Yates-的原始版"><a href="#Fisher-and-Yates-的原始版" class="headerlink" title="Fisher and Yates 的原始版"></a>Fisher and Yates 的原始版</h2><p><img data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/Biologist_and_statistician_Ronald_Fisher.jpg/189px-Biologist_and_statistician_Ronald_Fisher.jpg"></p>
<p>Fisher–Yates shuffle 的原始版本，最初描述在 1938 年的 Ronald Fisher（上图） 和 Frank Yates 写的书中，书名为《Statistical tables for biological, agricultural and medical research》。他们使用纸和笔去描述了这个算法，并使用了一个随机数表来提供随机数。它给出了 1 到 N 的数字的的随机排列，具体步骤如下：</p>
<ol>
<li>写下从 1 到 N 的数字</li>
<li>取一个从 1 到剩下的数字（包括这个数字）的随机数 k</li>
<li>从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位</li>
<li>重复第 2 步，直到所有的数字都被取出</li>
<li>第 3 步写出的这个序列，现在就是原始数字的随机排列</li>
</ol>
<p>已经证明如果第 2 步取出的数字是真随机的，那么最后得到的排序一定也是。</p>
<h2 id="现代方法"><a href="#现代方法" class="headerlink" title="现代方法"></a>现代方法</h2><p>Fisher–Yates shuffle 算法的现代版本是为计算机设计的。由 Richard Durstenfeld 在1964年 描述。并且是被 Donald E. Knuth 在 《The Art of Computer Programming》 中推广。但是不管是 Durstenfeld 还是 Knuth，都没有在书的第一版中承认这个算法是 Fisher 和 Yates 的研究成果。也许他们并不知道。不过后来出版的 《The Art of Computer Programming》提到了 Fisher 和 Yates 贡献。</p>
<p>现代版本的描述与原始略有不同，因为如果按照原始方法，愚蠢的计算机会花很多无用的时间去计算上述第 3 步的剩余数字。<strong>这里的方法是在每次迭代时交换这个被取出的数字到原始列表的最后</strong>。这样就将时间复杂度从 O(n^2) 减小到了 **O(n)**。算法的伪代码如下：</p>
<pre class="line-numbers language-none"><code class="language-none">-- To shuffle an array a of n elements (indices 0..n-1):
for i from n−1 downto 1 do
     j ← random integer such that 0 ≤ j ≤ i
     exchange a[j] and a[i]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="迭代步骤演示"><a href="#迭代步骤演示" class="headerlink" title="迭代步骤演示"></a>迭代步骤演示</h3><p>根据每次迭代次数可以用下面的表格，描述这个算法的执行过程</p>
<table>
<thead>
<tr>
<th align="left">随机数取值范围</th>
<th align="left">随机数</th>
<th align="right">原始数据</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left"></td>
<td align="right">1 2 3 4 5 6 7 8</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">1-8</td>
<td align="left">6</td>
<td align="right">1 2 3 4 5 7 8</td>
<td align="left">6</td>
</tr>
<tr>
<td align="left">1-7</td>
<td align="left">2</td>
<td align="right">1 7 3 4 5 8</td>
<td align="left">2 6</td>
</tr>
<tr>
<td align="left">1–6</td>
<td align="left">6</td>
<td align="right">1 7 3 4 5</td>
<td align="left">8 2 6</td>
</tr>
<tr>
<td align="left">1–5</td>
<td align="left">1</td>
<td align="right">5 7 3 4</td>
<td align="left">1 8 2 6</td>
</tr>
<tr>
<td align="left">1–4</td>
<td align="left">3</td>
<td align="right">5 7 4</td>
<td align="left">3 1 8 2 6</td>
</tr>
<tr>
<td align="left">1–3</td>
<td align="left">3</td>
<td align="right">5 7</td>
<td align="left">4 3 1 8 2 6</td>
</tr>
<tr>
<td align="left">1–2</td>
<td align="left">1</td>
<td align="right">7</td>
<td align="left">5 4 3 1 8 2 6</td>
</tr>
</tbody></table>
<h3 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h3><p>下面这个动画就是整个数组 0-19 的随机排序过程</p>
<iframe height="317" scrolling="no" src="//codepen.io/haoyang/embed/jrvrQq/?height=317&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/haoyang/pen/jrvrQq/">Fisher–Yates shuffle</a> by Chuan shi (<a href="http://codepen.io/haoyang">@haoyang</a>) on <a href="http://codepen.io">CodePen</a>.
</iframe>

<h2 id="JavaScript-代码实现"><a href="#JavaScript-代码实现" class="headerlink" title="JavaScript 代码实现"></a>JavaScript 代码实现</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * Fisher–Yates shuffle
 */</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> input <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> input<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token keyword">var</span> randomIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> itemAtIndex <span class="token operator">=</span> input<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>

        input<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> itemAtIndex<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> input<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用方式也很简单，直接用数组调用这个方法即可</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//[4, 6, 3, 2, 5, 1, 7, 8] // 每次结果都是随机的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之，Fisher–Yates shuffle 算法是一个非常高效又公平的随机排序算法，如果有随机排序数组的需求，用这个就对了！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher–Yates shuffle From Wikipedia</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>算法 shuffle 乱序 洗牌</tag>
      </tags>
  </entry>
  <entry>
    <title>Weinre --WebApp 调试工具</title>
    <url>//post/weinre.html</url>
    <content><![CDATA[<h2 id="什么是-weinre？"><a href="#什么是-weinre？" class="headerlink" title="什么是 weinre？"></a>什么是 weinre？</h2><p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html">weinre官网</a> 上有两句有意思的介绍：</p>
<blockquote>
<p><strong>weinre</strong> is <strong>WE</strong>b <strong>IN</strong>spector <strong>RE</strong>mote. Pronounced like the word “winery”. Or maybe like the word “weiner”. Who knows, really.</p>
<p><strong>weinre</strong> is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it’s designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.</p>
</blockquote>
<span id="more"></span>




<p>上面说 weinre 是一个远程 web 调试器。说到了它的发音，还挺幽默，哈哈。</p>
<p>远程 web 调试器。先说调试器，就像火狐中的 FireBug，Chrome 中的调试器一样。就是在浏览器中按下 <code>F12</code> 出现的那个工具。但是在手机上，你没办法按 <code>F12</code>，而这个 weinre 就是在手机上的 <code>F12</code>，与传统的不同的是，它是在手机上浏览你的 web 页面，在 PC 上查看调试工具，非常方便，这就是所谓的远程。</p>
<hr>
<h2 id="为什么用-weinre？"><a href="#为什么用-weinre？" class="headerlink" title="为什么用 weinre？"></a>为什么用 weinre？</h2><p>现代浏览器中调试工具都非常强大了，可以直接模拟手机设备，为什么还要用 weinre 这么麻烦的东西呢？</p>
<p>我觉得 PC 端的浏览器虽说可以模拟，但模拟毕竟还是模拟，还只是鼠标长按滑来滑去。在开发过程中，使用手机或平板直接来感受是多么的酷，指尖在移动设备的屏幕上摩擦摩擦！给人的直观感受绝对秒杀浏览器的模拟。</p>
<hr>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用一种工具之前，了解它的原理和结构是很有帮助的。weinre 作为一种远程调试工具，在结构上分为三层：</p>
<ul>
<li>目标页面（target）：被调试的页面，页面已嵌入 weinre 的远程 js，下文会介绍；</li>
<li>Debug客户端（client）：本地的 Web Inspector 调试客户端；</li>
<li>Debug服务端（agent）：一个 HTTP Server，为目标页面与 Debug 客户端建立通信。</li>
</ul>
<p>三层结构如下图所示：</p>
<p><img data-src="http://muellerware.org/papers/weinre/images/http-flow.png" alt="http-flow"></p>
<p>weinre 的 debug 客户端是基于 Web Inspector 开发，而 Web Inspector 只与以 WebKit 为核心的浏览器兼容，所以 Weinre 的客户端只能用 Chrome 或者 Safari 打开。</p>
<p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html">官网</a>上也有相应的平台支持说明：</p>
<ul>
<li><p>Platforms supported - debug server 服务端</p>
<p>  任何支持 node.js 的平台。</p>
</li>
<li><p>Platforms supported - debug client 客户端（跑 debugger 界面的浏览器）</p>
<ul>
<li>Google Chrome</li>
<li>Apple Safari</li>
<li>Other recent-ish WebKit-based browsers 其他基于 webkit 内核的现代浏览器</li>
</ul>
</li>
<li><p>Platforms supported - debug target 目标页面（在移动设备中调试运行的目标页面）</p>
<ul>
<li>Android Browser application</li>
<li>iOS Mobile Safari application</li>
<li>PhoneGap/Cordova</li>
<li>other</li>
</ul>
</li>
</ul>
<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>weinre 是 nodeJS 的一个应用，首先要 <a href="https://nodejs.org/">安装 nodeJS 运行环境</a></p>
</li>
<li><p>使用 npm 命令，安装 weinre</p>
<pre><code> npm -g install weinre
</code></pre>
<p> 安装成功后会有类似的信息：</p>
<pre><code> C:\Users\haoyang\AppData\Roaming\npm\weinre -&gt; C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre\weinre
 weinre@2.0.0-pre-I0Z7U9OV C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre
 ├── underscore@1.7.0
 ├── nopt@3.0.2 (abbrev@1.0.7)
 └── express@2.5.11 (mime@1.2.4, qs@0.4.2, mkdirp@0.3.0, connect@1.9.2)
</code></pre>
</li>
</ol>
<hr>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li><p>启动服务</p>
<pre><code> weinre --boundHost -all- --httpPort 8081
</code></pre>
<ul>
<li><p>–boundHost [hostname | ip address | -all-]</p>
<p>  The ip address to bind the server to.</p>
</li>
<li><p>–httpPort [portNumber]</p>
<p>  The port to run the HTTP server on.</p>
</li>
</ul>
<p> 更多配置项参考 <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Running.html">官网的说明</a>。</p>
</li>
<li><p>启动成功后看到如下界面：</p>
<p> <img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-weinre.png" alt="weinre"></p>
</li>
<li><p>给目标页面添加一行脚本</p>
<p> 可以看到 2.中的 Target Script 说要添加一行脚本到要调试的 web 页面中。</p>
<p> Target Script</p>
<p> You can use this script to inject the weinre target code into your web page.</p>
<p> <a href="http://localhost:8081/target/target-script-min.js#anonymous">http://localhost:8081/target/target-script-min.js#anonymous</a></p>
<p> Example:</p>
<pre><code> &lt;script src=&quot;http://localhost:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;
</code></pre>
<p> 这里要说明一下，要把上面的 localhost 换为本机的 ip 地址。</p>
<p> 我们可以在命令行中 使用 <code>ipconfig</code> 得到 ip 地址，如下（当然你的可能和我的不一样）：</p>
<pre><code> IPv4 地址 . . . . . . . . . . . . : 192.168.1.107
</code></pre>
<p> 即插入如下代码：</p>
<pre><code> &lt;script src=&quot;http://192.168.1.107:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;
</code></pre>
</li>
<li><p>进入调试页面</p>
<p> PC 端访问这个地址：</p>
<p> debug client user interface:    <a href="http://localhost:8081/client/#anonymous">http://localhost:8081/client/#anonymous</a></p>
<p> 此时 target 为 none，如下图：</p>
<p> <img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target-none.png" alt="target-none"></p>
<p> 现在我们要用手机访问同一个局域网下的这个目标页面。我们可以把要调试的页面放到这个路径下：</p>
<pre><code> C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre\web
</code></pre>
<p> 通过 <a href="http://192.168.1.107:8081/FILE_NAME">http://192.168.1.107:8081/FILE_NAME</a> 在手机上访问，就可以看到了。当然前提是同一个局域网。</p>
<p> 但是这样可能不太灵活，每次都要把目标页面放到指定的目录下。所以我们可以另外开一个服务器。</p>
<p> 我使用了基于 node.js 的 http-server 工具。将要调试的页面发布。这样我就能通过 ip 地址加端口号在手机上访问到了。</p>
<p> 我在手机上访问 <a href="http://192.168.1.107:8080/">http://192.168.1.107:8080</a> 打开要调试的页面，此时 debug client user interface 中自动检测到 target。就可以进行调试了！</p>
<p> 如下图：</p>
<p> <img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target.png" alt="target"></p>
<p> <img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-1954958440_meitu_2.jpg" alt="phone"></p>
</li>
</ol>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/dojotoolkit/article/details/6280924">Web移动应用调试工具——Weinre</a></li>
<li><a href="http://muellerware.org/papers/weinre/manual.html">weinre - WEb INspector REmote</a></li>
<li><a href="http://blog.csdn.net/smy_yu/article/details/38922315">webapp开发调试环境–weinre配置</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>调试工具 JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Web App 相关技术</title>
    <url>//post/web-app.html</url>
    <content><![CDATA[<blockquote>
<p>往前推2到3年，前端工程师还在忧心忡忡地想，移动互联网时代下，前端是不是没有生存空间了。但今天一看，在我们团队，前端工程师超过一半的工作都是在做移动端的Web或者APP的开发。移动Web或者APP在技术本质上是和做桌面端Web没有本质区别，但是移动端的坑那是非常的多，通过学习这部分内容，让你成为一名桌面移动通吃的前端开发工程师。</p>
</blockquote>
<span id="more"></span>




<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>参考： <a href="http://junmer.github.io/mobile-dev-get-started/">移动 Web 开发入门</a></li>
</ul>
<p>上面这个 slide 资料讲的非常好，算是一个入门的介绍吧。带我们建立基本的移动 web 开发知识体系和常见问题的实践。包含以下几个方面：</p>
<ul>
<li><p>基本概念</p>
<ul>
<li><p>Native</p>
<p>  本地应用 使用 Java \ Objective-C \ Swift 开发</p>
</li>
<li><p>WebApp</p>
<p>  网页应用 html5 开发</p>
</li>
<li><p>Hybrid</p>
<p>  混合应用 ooxx(native, web)</p>
</li>
<li><p>对比</p>
</li>
</ul>
</li>
<li><p>视觉</p>
<ul>
<li>设备的像素</li>
<li>文字单位使用 rem</li>
<li>viewport 属性</li>
<li>横屏竖屏</li>
<li>Flex 伸缩布局</li>
<li>响应式设计</li>
<li>软键盘</li>
<li>隐藏地址栏</li>
<li>苹果设备添加到主屏图标</li>
</ul>
</li>
<li><p>交互</p>
<ul>
<li>Touch</li>
<li>click 延迟</li>
<li>Scroll</li>
<li>Gestures(hammer –A javascript library for multi-touch gestures)</li>
<li>手指友好设计</li>
<li>HTML5 APIS（图像，摇动，声音等）</li>
</ul>
</li>
<li><p>实践</p>
<ul>
<li>屏蔽点击元素时的阴影</li>
<li>图像（像素、矢量图标、base64 减少请求、lazyload）</li>
<li>CSS3（合理使用渐变/圆角/阴影、代替 js 动画、translate3d、解决动画闪烁）</li>
<li>localStorage</li>
<li>避免（iframe、fixed + input）</li>
<li>SPA 或 Multi page</li>
<li>can I use</li>
<li>压缩合并</li>
<li>@G/3G 下建立连接时间</li>
</ul>
</li>
<li><p>调试</p>
<ul>
<li><p>浏览器自己的调试工具，模拟手机设备</p>
</li>
<li><p>weinre</p>
<p>  关于 weinre 我写了一篇博客介绍它。<a href="http://gaohaoyang.github.io/2015/06/18/weinre/">Weinre –WebApp 调试工具</a></p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h2><p>参考：</p>
<ul>
<li><a href="http://www.css88.com/archives/5480">移动前端不得不了解的html5 head 头标签</a></li>
</ul>
<p>上面的链接详细的讲解了：</p>
<ul>
<li><p>DOCTYPE</p>
</li>
<li><p>charset</p>
</li>
<li><p>lang属性</p>
</li>
<li><p>优先使用 IE 最新版本和 Chrome</p>
</li>
<li><p>360 使用Google Chrome Frame</p>
</li>
<li><p>SEO 优化部分：页面标题<title>标签(head 头部必须)，页面关键词 keywords，页面描述内容 description，定义网页作者 author，网页搜索引擎索引方式</title></p>
</li>
<li><p>为移动设备添加 viewport</p>
<p>  <code>viewport</code> 可以让布局在移动浏览器上显示的更好。 通常会写</p>
</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre><code>* width viewport 宽度(数值/device-width)
* height viewport 高度(数值/device-height)
* initial-scale 初始缩放比例
* maximum-scale 最大缩放比例
* minimum-scale 最小缩放比例
* user-scalable 是否允许用户缩放(yes/no)
</code></pre>
<ul>
<li>ios 设备，iOS 图标，Android，Windows 8</li>
</ul>
<p><strong>总结：</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 使用 HTML5 doctype，不区分大小写 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-cmn-Hans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 声明文档使用的字符编码 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 优先使用 IE 最新版本和 Chrome --></span>
    <span class="token comment">&lt;!-- 页面描述 --></span>
    <span class="token comment">&lt;!-- 页面关键词 --></span>
    <span class="token comment">&lt;!-- 网页作者 --></span>
    <span class="token comment">&lt;!-- 搜索引擎抓取 --></span>
    <span class="token comment">&lt;!-- 为移动设备添加 viewport --></span>
    <span class="token comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --></span>

    <span class="token comment">&lt;!-- iOS 设备 begin --></span>
    <span class="token comment">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --></span>
    <span class="token comment">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --></span>

    <span class="token comment">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --></span>
    <span class="token comment">&lt;!-- 设置苹果工具栏颜色 --></span>
    <span class="token comment">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --></span>
    <span class="token comment">&lt;!-- 启用360浏览器的极速模式(webkit) --></span>
    <span class="token comment">&lt;!-- 避免IE使用兼容模式 --></span>
    <span class="token comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --></span>
    <span class="token comment">&lt;!-- 微软的老式浏览器 --></span>
    <span class="token comment">&lt;!-- uc强制竖屏 --></span>
    <span class="token comment">&lt;!-- QQ强制竖屏 --></span>
    <span class="token comment">&lt;!-- UC强制全屏 --></span>
    <span class="token comment">&lt;!-- QQ强制全屏 --></span>
    <span class="token comment">&lt;!-- UC应用模式 --></span>
    <span class="token comment">&lt;!-- QQ应用模式 --></span>
    <span class="token comment">&lt;!-- windows phone 点击无高光 --></span>
    <span class="token comment">&lt;!-- iOS 图标 begin --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/apple-touch-icon-57x57-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>114x114<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/apple-touch-icon-114x114-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>144x144<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/apple-touch-icon-144x144-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --></span>
    <span class="token comment">&lt;!-- iOS 图标 end --></span>

    <span class="token comment">&lt;!-- iOS 启动画面 begin --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>768x1004<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/splash-screen-768x1004.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1536x2008<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/splash-screen-1536x2008.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- iPad 竖屏 1536x2008（Retina） --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1024x748<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/Default-Portrait-1024x748.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- iPad 横屏 1024x748（标准分辨率） --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2048x1496<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/splash-screen-2048x1496.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- iPad 横屏 2048x1496（Retina） --></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/splash-screen-320x480.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>640x960<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/splash-screen-640x960.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>640x1136<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/splash-screen-640x1136.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --></span>
    <span class="token comment">&lt;!-- iOS 启动画面 end --></span>

    <span class="token comment">&lt;!-- iOS 设备 end --></span>
    <span class="token comment">&lt;!-- Windows 8 磁贴颜色 --></span>
    <span class="token comment">&lt;!-- Windows 8 磁贴图标 --></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alternate<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/rss+xml<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RSS<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/rss.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- 添加 RSS 订阅 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/ico<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- 添加 favicon icon --></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="页面切换动画"><a href="#页面切换动画" class="headerlink" title="页面切换动画"></a>页面切换动画</h2><ul>
<li><a href="http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html">移动端重构系列13——页面切换</a></li>
<li><a href="http://www.w3cplus.com/css3/css3-3d-transform.html">CSS3 3D Transform</a></li>
</ul>
<p>关于 HammerJS 的一个中文文档</p>
<ul>
<li><a href="http://www.cnblogs.com/iamlilinfeng/p/4239957.html">Hammer.js</a></li>
</ul>
<hr>
<h2 id="CSS-Processing"><a href="#CSS-Processing" class="headerlink" title="CSS Processing"></a>CSS Processing</h2><blockquote>
<p>CSS语言由于其自身语言设计的问题，加上一些浏览器兼容性问题，往往会使得我们在写它的时候，要写很多冗余代码，或者为了兼容性对同一个样式设定写好几遍。针对这些问题，诞生了CSS预处理和后处理的概念及相关方法、工具。</p>
<p>这些工具和方法帮助我们能够更加高效地书写可维护性更强的CSS代码。</p>
</blockquote>
<p>这里我尝试使用了 Sass，果然很好用。下面记录几个 sass 教程。</p>
<ul>
<li><a href="http://www.w3cplus.com/sassguide/">Sass入门-w3cplus</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html">SASS用法指南-阮一峰</a></li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先要有 ruby 环境。</p>
<p>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的 <a href="https://rubygems.org/">https://rubygems.org</a> 源，然后添加淘宝的源 <a href="https://ruby.taobao.org/%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9F%A5%E7%9C%8B%E4%B8%8B%E5%BD%93%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E6%BA%90%E6%98%AF%E5%93%AA%E4%B8%AA%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%AF%E6%B7%98%E5%AE%9D%E7%9A%84%EF%BC%8C%E5%88%99%E8%A1%A8%E7%A4%BA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5">https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入</a> sass 安装命令 <code>gem install sass</code> 了。</p>
<pre><code>$ gem sources --remove https://rubygems.org/
$ gem sources -a https://ruby.taobao.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://ruby.taobao.org
# 请确保只有 ruby.taobao.org
$ gem install sass
</code></pre>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre><code>sass --watch style.scss:style.css --style expanded
</code></pre>
<hr>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong><code>rem</code></strong></p>
<p>字体单位使用 rem，用户在手机上设置了字体大小时，不会打破布局，造成混乱。</p>
<ul>
<li><a href="http://www.w3cplus.com/css3/define-font-size-with-css3-rem">CSS3的REM设置字体大小-w3cplus</a></li>
<li><a href="http://www.iyunlu.com/view/css-xhtml/76.html">响应式十日谈第一日：使用 rem 设置文字大小-一丝</a></li>
</ul>
<hr>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><blockquote>
<p>安全是大家经常容易忽视，但其实一旦出现影响会非常大的问题，尤其对于没有经历过企业开发，或者没有踩过坑的同学，如果等到公司工作，做实际项目后非常容易发生安全问题。</p>
</blockquote>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>WEB基本攻击大致可以分为三大类：“资源枚举”、“参数操纵” 和 “其它攻击”</p>
<ul>
<li>资源枚举</li>
<li>参数操纵<ul>
<li>SQL注入</li>
<li>XPath注入</li>
<li>cgi命令执行</li>
<li>XXS（cross-site scripting跨域脚本攻击）其重点是“跨域”和“客户端执行”<ul>
<li>Reflected XSS ——基于反射的XSS攻击。主要依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击。</li>
<li>DOM-based or local XSS——基于DOM或本地的XSS攻击</li>
<li>Stored XSS——基于存储的XSS攻击</li>
</ul>
</li>
<li>会话劫持</li>
</ul>
</li>
<li>其它攻击<ul>
<li>CSRF（cross-site request forgery）跨站请求伪造</li>
<li>钓鱼攻击指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。</li>
<li>拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭，处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。</li>
</ul>
</li>
</ul>
<h3 id="关于-XSS"><a href="#关于-XSS" class="headerlink" title="关于 XSS"></a>关于 XSS</h3><blockquote>
<p><strong>跨网站脚本</strong>（Cross-site scripting，通常简称为XSS或跨站脚本或跨站脚本攻击）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p>
<p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java， VBScript， ActiveX， Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p>
<p>——维基百科</p>
</blockquote>
<h3 id="XSS-防护"><a href="#XSS-防护" class="headerlink" title="XSS 防护"></a>XSS 防护</h3><ol>
<li><p>浏览器解析顺序：</p>
<p> HTML Parser &gt;&gt; CSS Parser &gt;&gt; JavaScript Parser</p>
</li>
<li><p>浏览器解码顺序：</p>
<p> HTML Decoding &gt;&gt; URL Decoding &gt;&gt; JavaScript Decoding</p>
</li>
<li><p>具体的防护方式：</p>
<ul>
<li>验证输入并且基于语境和按照正确的顺序转义不可信数据<ul>
<li>HTML 中的字符串</li>
<li>HTML 属性中的字符串</li>
<li>事件句柄属性和 JavaScript 中的字符串</li>
<li>HTML 属性中的 URL 路径</li>
<li>HTML 风格属性和 CSS 中的字符串</li>
<li>JavaScript 中的 HTML</li>
</ul>
</li>
<li>始终遵循白名单优于黑名单的做法</li>
<li>不要将用户可以控制的文本放在<meta>标签前。通过使用不同的字符集注射可以导致 XSS。</li>
<li>使用 <!DOCTYPE html></li>
<li>使用推荐的 HTTP 响应头进行 XSS 防护</li>
<li>防止 CRLF 注入/HTTP 响应拆分</li>
<li>禁止 TRACE 和其他非必要方法</li>
</ul>
</li>
</ol>
<p>对于 innerHTML 的方式输出的，我们可以采用如下的方式转码</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 转码 XSS 防护
 * @param  &#123;String&#125; str 用户输入的字符串
 * @return &#123;String&#125;     转码后的字符串
 */</span>
<span class="token keyword">function</span> <span class="token function">changeCode</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;lt;"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;gt;"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;quot;"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">'</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;#x27;"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;#x2f;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>参考：</p>
<ul>
<li><a href="http://www.cnblogs.com/vajoy/p/4176908.html">浅谈WEB安全性（前端向）</a></li>
<li><a href="http://www.freebuf.com/articles/web/40520.html">XSS的原理分析与解剖</a></li>
<li><a href="http://www.fooying.com/chinese-translationthe-ultimate-xss-protection-cheatsheet-for-developers/">原创翻译：给开发者的终极XSS防护备忘录</a></li>
</ul>
<hr>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><blockquote>
<p>在自己做一些小项目时，可能是学校的一些网站项目，流量可能日均都不超过500，而且大多是校园局域网内访问；或者是开发一些实验室的MIS系统，这辈子你都不会去使用你开发的这个系统。在这样一些项目中，性能优化往往会被你忽略。</p>
<p>但是如果你是做一个日均PV数万、数十万、甚至更大的量级，开发的页面会被全国各地，不同网络条件的用户来进行访问。这个时候，性能问题就无法忽视了。在当今的网络条件下，如果你的页面3秒都无法完成首屏渲染，一定会让你的网站流失很多用户。</p>
<p>整个网站的性能优化有很多的环节和工作，大多数时候，不是前端工程师单独就能完成的，尤其在职能划分明确的公司中，往往需要前后端、运维、DBA等多个职位协同完成。所以，在我们的课程中，主要让你了解整个性能优化都涉及哪些方面的工作，同时，我们会专注介绍一些在前端领域可以重点关注的技术点。</p>
</blockquote>
<p>这里就是网页的打开速度，如果你的网页打开速度很慢，那么一定会有用户的流失。所以性能优化很重要。</p>
<ul>
<li>网页内容<ul>
<li>减少http请求次数</li>
<li>减少DNS查询次数</li>
<li>避免页面跳转</li>
<li>缓存Ajax</li>
<li>延迟加载</li>
<li>提前加载</li>
<li>减少DOM元素数量</li>
<li>根据域名划分内容</li>
<li>减少iframe数量</li>
<li>避免404</li>
</ul>
</li>
<li>服务器<ul>
<li>使用CDN</li>
<li>添加Expires 或Cache-Control报文头</li>
<li>Gzip压缩传输文件</li>
<li>配置ETags</li>
<li>尽早flush输出</li>
<li>使用GET Ajax请求</li>
<li>避免空的图片src</li>
</ul>
</li>
<li>Cookie<ul>
<li>减少Cookie大小</li>
<li>页面内容使用无cookie域名</li>
</ul>
</li>
<li>CSS<ul>
<li>将样式表置顶</li>
<li>避免CSS表达式</li>
<li>用&lt;link&gt;代替@import</li>
<li>避免使用Filters</li>
</ul>
</li>
<li>Javascript<ul>
<li>将脚本置底</li>
<li>使用外部Javascirpt和CSS文件</li>
<li>精简Javascript和CSS</li>
<li>去除重复脚本</li>
<li>减少DOM访问</li>
<li>使用智能事件处理</li>
</ul>
</li>
<li>图片<ul>
<li>优化图像</li>
<li>优化CSS Sprite</li>
<li>不要在HTML中缩放图片</li>
<li>使用小且可缓存的favicon.ico</li>
</ul>
</li>
<li>移动客户端<ul>
<li>保持单个内容小于25KB</li>
<li>打包组建成符合文档</li>
</ul>
</li>
</ul>
<p>具体细节参考文章：</p>
<ul>
<li><a href="http://www.cnblogs.com/developersupport/p/webpage-performance-best-practices.html">毫秒必争，前端网页性能最佳实践</a></li>
</ul>
<p>我在 ToDo 这个任务中主要使用了 CDN 来加载静态资源。比如我使用了 <a href="http://cdn.code.baidu.com/">百度静态资源公共库</a>。引用了里面的 fontawesome，速度果然比在 GitHub 仓库里快很多。下一步是压缩我自己写的静态资源。</p>
<p>其他参考资料：</p>
<ul>
<li><a href="http://www.oschina.net/translate/front-end-performance-for-web-designers-and-front-end-developers#section:maximising-parallelisation">给网页设计师和前端开发者看的前端性能优化</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/?p=3152">梳理：提高前端性能方面的处理以及不足</a></li>
<li><a href="http://www.cnblogs.com/mofish/archive/2010/10/12/1849062.html">css sprite原理优缺点及使用</a></li>
<li><a href="http://www.qianduan.net/css-sprites-useful-technique-or-potential-nuisance/">CSS Sprites：鱼翅还是三鹿？</a></li>
<li><a href="http://www.cnblogs.com/leefreeman/p/3998757.html">大型网站的灵魂——性能</a></li>
<li><a href="http://web.jobbole.com/35339/">编写高效的 CSS 选择器</a></li>
</ul>
<hr>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote>
<p>对于一个复杂项目，特别是多人协作的复杂项目，如何合理划分模块，如何更加方便地进行模块加载，如何管理模块之间的依赖，是一个项目团队都会面临的问题，目前业界已经有了一些较为普遍的解决方案，如AMD。这个部分希望你能够通过学习JavaScript的模块化，学习如何合理地规划项目模块，合理使用模块化工具来优化你的项目代码结构。</p>
</blockquote>
<p>一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。</p>
<p>根据AMD规范，我们可以使用 <code>define</code> 定义模块，使用 <code>require</code> 调用模块。</p>
<p>目前，通行的 js 模块规范主要有两种：<code>CommonJS</code> 和 <code>AMD</code>。</p>
<h3 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h3><p>AMD 即 Asynchronous Module Definition，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是 CommonJS</p>
<p>模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</p>
<p>详细 API 如下：</p>
<ul>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)">AMD（中文版）</a></li>
</ul>
<hr>
<h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>CommonJS 是服务器端模块的规范，Node.js 采用了这个规范。Node.JS 首先采用了 js 模块化的概念。</p>
<p>根据 CommonJS 规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为 global 对象的属性。</p>
<p>输出模块变量的最好方法是使用 module.exports 对象。</p>
<hr>
<h3 id="为什么要用-requireJS"><a href="#为什么要用-requireJS" class="headerlink" title="为什么要用 requireJS"></a>为什么要用 requireJS</h3><p>试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>RequireJS就是为了解决这两个问题而诞生的：</p>
<blockquote>
<p>（1）实现js文件的异步加载，避免网页失去响应；<br>（2）管理模块之间的依赖性，便于代码的编写和维护。</p>
</blockquote>
<h4 id="requireJS"><a href="#requireJS" class="headerlink" title="requireJS"></a>requireJS</h4><ul>
<li><a href="http://requirejs.org/">requireJS 官网</a></li>
<li><a href="http://www.requirejs.cn/">requireJS 中文网</a></li>
</ul>
<hr>
<h3 id="AMD和CMD"><a href="#AMD和CMD" class="headerlink" title="AMD和CMD"></a>AMD和CMD</h3><p>CMD（Common Module Definition） 通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。</p>
<blockquote>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</p>
</blockquote>
<ul>
<li><a href="https://github.com/seajs/seajs/issues/242">CMD 模块定义规范</a></li>
</ul>
<p>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</p>
<blockquote>
<p>AMD:提前执行（异步加载：依赖先执行）+延迟执行<br>CMD:延迟执行（运行到需加载，根据顺序执行）</p>
</blockquote>
<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">Javascript模块化编程（一）：模块的写法–阮一峰</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html">Javascript模块化编程（二）：AMD规范</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html">Javascript模块化编程（三）：require.js的用法</a></li>
<li><a href="http://segmentfault.com/a/1190000000733959">详解 JavaScript 模块开发</a></li>
<li><a href="http://www.cnblogs.com/jinguangguo/archive/2013/04/06/3002515.html?utm_source=tuicool">浅谈模块化的JavaScript</a></li>
<li><a href="http://div.io/topic/430">再谈 SeaJS 与 RequireJS 的差异</a></li>
<li>玩转AMD系列 by erik@EFE<ul>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-preface/">玩转AMD - 写在前面</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-what/">玩转AMD - 设计思路</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-how/">玩转AMD - 应用实践</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-loader/">玩转AMD - Loader</a>   </li>
</ul>
</li>
</ul>
<hr>
<h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><blockquote>
<p>业界目前有非常多的前端开发工具，完成一些开发过程中可以自动化完成的工作，提高研发效率，并且可以提高多人协作时的开发过程一致性，提高整个项目的运维效率。</p>
<p>在EFE日常工作中，我们是基于EDP，完成项目开发过程中的项目构建、包管理、调试、单测、静态检测、打包、压缩、优化、项目部署等一系列所有工作。</p>
</blockquote>
<p>注：</p>
<p>如果网络不好，可以使用 <a href="http://npm.taobao.org/">淘宝 NPM 镜像</a>。</p>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://div.io/topic/439">前端工程与模块化框架</a></li>
<li><a href="http://mweb.baidu.com/p/baidusearch-front-end-road.html">手机百度前端工程化之路</a></li>
<li><a href="http://www.infoq.com/cn/articles/yunlong-on-fis">对话百度前端工程师张云龙：F.I.S与前端工业化</a></li>
<li><a href="https://github.com/ecomfe/edp">EDP</a></li>
<li><a href="http://www.w3cplus.com/tools/grunt-tutorial-start-grunt.html">Grunt教程——初涉Grunt</a></li>
<li><a href="http://www.open-open.com/lib/view/open1417068223049.html">gulp入门指南</a></li>
<li><a href="http://www.w3ctech.com/topic/134">Gulp开发教程（翻译）</a></li>
<li><a href="http://www.gulpjs.com.cn/">Gulp 中文网</a></li>
<li><a href="https://github.com/ericdum/mujiang.info/issues/6">npm的package.json中文文档</a></li>
</ul>
<hr>
<h2 id="最终作品"><a href="#最终作品" class="headerlink" title="最终作品"></a>最终作品</h2><p>在任务三中，做了一个 PC 端的 ToDo 应用。任务四是将它优化，以适应移动端设备。</p>
<h3 id="ToDo-WebApp-Version"><a href="#ToDo-WebApp-Version" class="headerlink" title="ToDo WebApp Version"></a>ToDo WebApp Version</h3><ul>
<li><p><a href="https://github.com/baidu-ife/ife/tree/master/task/task0004">任务四要求</a></p>
</li>
<li><p><a href="https://github.com/Gaohaoyang/ToDo-WebApp">源代码</a></p>
</li>
<li><p><a href="http://gaohaoyang.github.io/ToDo-WebApp/">在线 demo</a></p>
</li>
<li><p>手机查看 ↓ 二维码 ↓</p>
<p>  <img data-src="http://7q5cdt.com1.z0.glb.clouddn.com/task4-code-todoWebApp.png" alt="todoWebApp"></p>
</li>
<li><p><a href="http://gaohaoyang.github.io/">我的博客 HyG</a></p>
</li>
</ul>
<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><ul>
<li><p><strong>数据存储</strong></p>
<p>  以 JSON 模拟数据表的形式存储于 LocalStorage 中</p>
<pre><code>   使用数据库的思想，构建3张表。
   cateJson 分类
   childCateJson 子分类
   taskJson 任务

   分类表 cate
   ----------------------
   id* | name | child(FK)
   ----------------------

   子分类表 childCate
   --------------------------------
   id* | pid(FK) | name | child(FK)
   --------------------------------

   任务表 task
   ----------------------------------------------
   ----------------------------------------------
</code></pre>
</li>
<li><p><strong>使用 <code>Sass</code> 重构了 CSS 代码</strong></p>
<p>  使用分块、继承等方式，使得代码更加清晰明了。</p>
</li>
<li><p><strong>响应式布局</strong></p>
<p>  针对手机端细节做了很多调整，更符合手机上的视觉交互习惯。</p>
</li>
<li><p><strong>加入页面切换效果</strong></p>
<p>  使用 <code>translate3d()</code>，纯 CSS3 切换动画效果。</p>
</li>
<li><p><strong>处理了 XSS 防护</strong></p>
<p>  对可能造成破坏的字符进行转码。</p>
</li>
<li><p><strong>性能优化</strong></p>
<p>  使用 CDN 处理静态资源 fontAwesome，压缩静态资源等</p>
</li>
<li><p><strong>模块化</strong></p>
<p>  使用 requireJS 模块化 JavaScript 代码。重构 JavaScript 代码。优化之前写的耦合性高的绑定事件，重新绑定事件，降低耦合性。期间根据具体需求重写了事件代理的代码。</p>
</li>
<li><p><strong>前端工程化</strong></p>
<p>  使用 gulp，自动编译 Sass，压缩 CSS 和 JavaScript 代码。并且配置了自动流程。</p>
</li>
</ul>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="webkit-tap-highlight-color-属性"><a href="#webkit-tap-highlight-color-属性" class="headerlink" title="-webkit-tap-highlight-color 属性"></a><code>-webkit-tap-highlight-color</code> 属性</h3><p>感谢 <a href="https://github.com/fiona23">fiona</a> 指出。</p>
<p>safari移动端点击的时候会闪一下加上 <code>-webkit-tap-highlight-color: transparent;</code> 就不会闪了。</p>
<p>参考：</p>
<ul>
<li><a href="http://www.css88.com/webkit/-webkit-tap-highlight-color/"><code>-webkit-tap-highlight-color</code>  css88</a></li>
<li><a href="http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html"><code>-webkit-tap-highlight-color</code> 属性</a></li>
</ul>
<hr>
<h3 id="textarea-标签-disabled-颜色"><a href="#textarea-标签-disabled-颜色" class="headerlink" title="textarea 标签 disabled 颜色"></a>textarea 标签 disabled 颜色</h3><ul>
<li><p>为什么用 disabled 属性？</p>
<p>  因为我发现仅仅使用 readonly 属性，在 IE 下是显示光标的。于是使用 disabled。</p>
</li>
<li><p>出现的问题</p>
<p>  各家浏览器对于 disabled 属性有自己的样式设定，比如 IE 下是灰色的。苹果设备下也是。改变这些样式的方法也不是统一的。如果要兼容 Safari 必须加上</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">background: #fff;
-webkit-text-fill-color: rgba(0, 0, 0, 1);
-webkit-opacity: 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>于是最终代码如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">textarea:disabled</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
    <span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-webkit-opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>参考：<a href="http://stackoverflow.com/a/4648315">Disabled input text color 中的评论</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s1.22.2部署网络插件calico</title>
    <url>//post/k8s-calico.html</url>
    <content><![CDATA[<p>上篇文章我们部署了K8S1.22.2</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s calico</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm高可用部署K8S1.22.2(一)</title>
    <url>//post/k8s-kubeadm.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着>不太对, 请再试试." data-whm="抱歉, 这个文章不能>被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="55282324ae51b8d01d7fc7a6822180ab54067dd409675268eca033d2460996a7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>k8s1.22.2</category>
      </categories>
      <tags>
        <tag>k8s1.22.2</tag>
      </tags>
  </entry>
  <entry>
    <title>loki</title>
    <url>//post/loki.html</url>
    <content><![CDATA[<h1 id="简-介"><a href="#简-介" class="headerlink" title="简 介"></a>简 介</h1><p>Loki是受Prometheus启发由Grafana Labs团队开源的水平可扩展，高度可用的多租户日志聚合系统。 开发语言: Google Go。它的设计具有很高的成本效益，并且易于操作。使用标签来作为索引，而不是对全文进行检索，也就是说，你通过这些标签既可以查询日志的内容也可以查询到监控的数据签，极大地降低了日志索引的存储。系统架构十分简单，由以下3个部分组成 ：</p>
<span id="more"></span>

<ul>
<li>Loki 是主服务器，负责存储日志和处理查询 。</li>
<li>promtail 是代理，负责收集日志并将其发送给 loki（只收集日志，不在本地进行运算） 。</li>
<li>Grafana 用于 UI 展示。<br>只要在被监控服务器上安装promtail来收集日志然后发送给Loki存储，就可以在Grafana UI界面通过添加Loki为数据源进行日志查询（如果Loki服务器性能不够，可以部署多个Loki进行存储及查询）。作为一个日志系统不关只有查询分析日志的能力，还能对日志进行监控和报警</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   为什么会考虑到loki呢，我们公司使用的是阿里云的SLS，每个月的费用大概是11W左右，开销太大了，自己搭建ELK，组件又多，但是我们只是使用了里面的查询功能，有点大材小用了，我们的需求只是要查日志，报警足以，所以就搭建了loki日志查询</p>
<h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><p>   经过一段时间的使用，loki确实要比ELK轻很多，查询也比之前快了很多（没有超多1T数据测试，后续测试），而且费用也减少了很多</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><pre><code>低索引开销
* loki 和 es 最大的不同是 loki只对标签进行索引而不对内容索引
* 这样做可以大幅降低索引资源开销 (es 无论你查不查，巨大的索引开销必须时刻承担)
</code></pre>
<h2 id="本地化安装"><a href="#本地化安装" class="headerlink" title="本地化安装"></a>本地化安装</h2><h3 id="集群情况"><a href="#集群情况" class="headerlink" title="集群情况"></a>集群情况</h3><table>
<thead>
<tr>
<th align="center">IP</th>
<th align="center">hostname</th>
<th align="center">部署软件</th>
</tr>
</thead>
<tbody><tr>
<td align="center">10.181.0.112</td>
<td align="center">loki01</td>
<td align="center">loki、promtail</td>
</tr>
<tr>
<td align="center">10.181.0.96</td>
<td align="center">loki02</td>
<td align="center">loki、promtail</td>
</tr>
<tr>
<td align="center">10.181.0.28</td>
<td align="center">loki03</td>
<td align="center">loki、promtail</td>
</tr>
</tbody></table>
<h4 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h4><pre class="line-numbers language-none"><code class="language-none"># 下载promtail和loki二进制包
wget  https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;loki&#x2F;releases&#x2F;download&#x2F;v2.2.1&#x2F;loki-linux-amd64.zip
wget https:&#x2F;&#x2F;github.com&#x2F;grafana&#x2F;loki&#x2F;releases&#x2F;download&#x2F;v2.2.1&#x2F;promtail-linux-amd64.zip  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2、安装-promtail"><a href="#2、安装-promtail" class="headerlink" title="2、安装 promtail"></a>2、安装 promtail</h4><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;opt&#x2F;promtail -pv
# promtail配置文件
cat &lt;&lt;EOF&gt; &#x2F;opt&#x2F;promtail&#x2F;promtail.yaml  
server:  
  http_listen_port: 9080  
  grpc_listen_port: 0  
  
positions:  
  filename: &#x2F;var&#x2F;log&#x2F;positions.yaml
client:  
  url: http:&#x2F;&#x2F;localhost:3100&#x2F;loki&#x2F;api&#x2F;v1&#x2F;push  
  
scrape_configs:  
 - job_name: system  
   pipeline_stages:  
   static_configs:  
   - targets:  
      - localhost  
     labels:  
      job: varlogs    
      host: yourhost # A &#96;host&#96; label will help identify logs from this machine vs others  
      __path__: &#x2F;var&#x2F;log&#x2F;*.log  # The path matching uses a third party library: https:&#x2F;&#x2F;github.com&#x2F;bmatcuk&#x2F;doublestar  
EOF

# 增加service文件  
cat &lt;&lt;EOF &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;promtail.service  
[Unit]  
Description&#x3D;promtail server  
Wants&#x3D;network-online.target  
After&#x3D;network-online.target  
  
[Service]  
ExecStart&#x3D;&#x2F;opt&#x2F;promtail&#x2F;promtail -config.file&#x3D;&#x2F;opt&#x2F;promtail&#x2F;promtail.yaml  
StandardOutput&#x3D;syslog  
StandardError&#x3D;syslog  
SyslogIdentifier&#x3D;promtail  
[Install]  
WantedBy&#x3D;default.target  
EOF  
systemctl daemon-reload  
systemctl restart promtail  
systemctl status promtail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="安装loki"><a href="#安装loki" class="headerlink" title="安装loki"></a>安装loki</h4><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;opt&#x2F;loki -pv  
  
# promtail配置文件  
$ cat &lt;&lt;EOF&gt; &#x2F;opt&#x2F;loki&#x2F;loki.yaml  
auth_enabled: false  
  
server:  
  http_listen_port: 3100  
  grpc_listen_port: 9096  
  
ingester:  
  wal:  
    enabled: false
    dir: &#x2F;opt&#x2F;loki&#x2F;wal  
  lifecycler:  
    address: 127.0.0.1  
    ring:  
      kvstore:  
        store: inmemory  
      replication_factor: 1  
    final_sleep: 0s  
  chunk_idle_period: 1h       # Any chunk not receiving new logs in this time will be flushed  
  max_chunk_age: 1h           # All chunks will be flushed when they hit this age, default is 1h  
  chunk_target_size: 1048576  # Loki will attempt to build chunks up to 1.5MB, flushing first if chunk_idle_period or max_chunk_age is reached first  
  chunk_retain_period: 30s    # Must be greater than index read cache TTL if using an index cache (Default index read cache TTL is 5m)  
  max_transfer_retries: 0     # Chunk transfers disabled  
  
schema_config:  
  configs:  
    - from: 2021-09-19
      store: boltdb-shipper  
      object_store: filesystem  
      schema: v11  
      index:  
        prefix: index_  
        period: 24h  
  
storage_config:  
  boltdb_shipper:  
    active_index_directory: &#x2F;opt&#x2F;loki&#x2F;boltdb-shipper-active  
    cache_location: &#x2F;opt&#x2F;loki&#x2F;boltdb-shipper-cache  
    cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space  
    shared_store: filesystem  
  filesystem:  
    directory: &#x2F;opt&#x2F;loki&#x2F;chunks  
  
compactor:  
  working_directory: &#x2F;opt&#x2F;loki&#x2F;boltdb-shipper-compactor  
  shared_store: filesystem  
  
limits_config:  
  reject_old_samples: true  
  reject_old_samples_max_age: 168h  
  
chunk_store_config:  
  max_look_back_period: 0s  
  
table_manager:  
  retention_deletes_enabled: false  
  retention_period: 0s  
  
ruler:  
  storage:  
    type: local  
    local:  
      directory: &#x2F;opt&#x2F;loki&#x2F;rules  
  rule_path: &#x2F;opt&#x2F;loki&#x2F;rules-temp  
  alertmanager_url: http:&#x2F;&#x2F;localhost:9093  
  ring:  
    kvstore:  
      store: inmemory  
  enable_api: true  
EOF  
  
# service文件  
  
cat &lt;&lt;EOF &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;loki.service  
[Unit]  
Description&#x3D;loki server  
Wants&#x3D;network-online.target  
After&#x3D;network-online.target  
  
[Service]  
ExecStart&#x3D;&#x2F;opt&#x2F;loki&#x2F;loki -config.file&#x3D;&#x2F;opt&#x2F;loki&#x2F;loki.yaml  
StandardOutput&#x3D;syslog  
StandardError&#x3D;syslog  
SyslogIdentifier&#x3D;loki  
[Install]  
WantedBy&#x3D;default.target  
EOF  
  
$ systemctl daemon-reload  
$ systemctl restart loki  
$ systemctl status loki<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>ops</category>
      </categories>
      <tags>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据类型的相互转换</title>
    <url>//post/Interconversion-of-basic-data-types.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>布尔类型</title>
    <url>//post/bool-type.html</url>
    <content><![CDATA[<h1 id="1-布尔类型"><a href="#1-布尔类型" class="headerlink" title="1.布尔类型"></a>1.布尔类型</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1、布尔类型也叫 bool 类型，bool 类型数据只允许取值 true 和 false</p>
<p>2、bool 类型占1个字节</p>
<span id="more"></span>
<p>3、bool 类型适于逻辑运算，一般用于程序流程控制</p>
<h2 id="1-1案例演示"><a href="#1-1案例演示" class="headerlink" title="1.1案例演示"></a>1.1案例演示</h2><pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;unsafe&quot;
)

func main() &#123;
	var n1 &#x3D; false
	fmt.Println(&quot;n1&#x3D;&quot;, n1)
	fmt.Println(&quot;n1占用空间：&quot;, unsafe.Sizeof(n1))
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF000">n1= false</font></p>
<p><font color="#FF0000">n1占用空间： 1</font></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>字符类型</title>
    <url>//post/byte-type.html</url>
    <content><![CDATA[<h1 id="1-字符类型"><a href="#1-字符类型" class="headerlink" title="1.字符类型"></a>1.字符类型</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>Golang 中没有专门的字符类型，如果要存储单个字符(字母)，一般使用 byte 来保存。字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而 Go 的字符串不同，它是由字节组成的。</p>
<span id="more"></span>

<h2 id="1-1-字符类型使用细节"><a href="#1-1-字符类型使用细节" class="headerlink" title="1.1 字符类型使用细节"></a>1.1 字符类型使用细节</h2><ol>
<li>字符常量是用单引号(‘’)括起来的单个字符。例如：var c1 byte = ‘a’ var c2 int = ‘中’ var c3 byte = ‘9’ </li>
<li>Go 中允许使用转义字符 ‘\’来将其后的字符转变为特殊字符型常量。例如：var c3 char = ‘\n’ // ‘\n’表示换行符 </li>
<li>Go 语言的字符使用 UTF-8 编码 ，如果想查询字符对应 的 utf8 码 值 <a href="http://www.mytju.com/classcode/tools/encode_utf8.asp">http://www.mytju.com/classcode/tools/encode_utf8.asp</a> 英文字母-1 个字节 汉字-3 个字节 </li>
<li>在 Go 中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8 编码的码值。</li>
<li>可以直接给某个变量赋一个数字，然后按格式化输出时%c，会输出该数字对应的 unicode 字符</li>
<li>字符类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码</li>
</ol>
<h2 id="1-2-字符类型本质探讨"><a href="#1-2-字符类型本质探讨" class="headerlink" title="1.2 字符类型本质探讨"></a>1.2 字符类型本质探讨</h2><ol>
<li>   字符型存储到计算机中，需要将字符对应的码值（整数）找出来 存储：字符—&gt;对应码值—-&gt;二进制–&gt;存储读取：二进制 —-&gt; 码值 —-&gt; 字符 –&gt; 读取 </li>
</ol>
<ol start="2">
<li>字符和码值的对应关系是通过字符编码表决定的(是规定好) </li>
<li>Go 语言的编码都统一成了 utf-8。非常的方便，很统一，再也没有编码乱码的困扰了</li>
</ol>
<h2 id="1-3-案例演示"><a href="#1-3-案例演示" class="headerlink" title="1.3 案例演示"></a>1.3 案例演示</h2><pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

func main() &#123;
	var n1 byte &#x3D; &#39;a&#39;
	var n2 byte &#x3D; &#39;8&#39;
	fmt.Println(&quot;n1&#x3D;&quot;, n1, &quot;n2&#x3D;&quot;, n2)
	fmt.Printf(&quot;n1&#x3D;%c,n2&#x3D;%c\n&quot;, n1, n2)
	&#x2F;&#x2F; var n3 byte &#x3D; &#39;董&#39;
	&#x2F;&#x2F; fmt.Println(&quot;n3&#x3D;&quot;, n3)
	var n4 int &#x3D; &#39;董&#39;
	&#x2F;&#x2F; fmt.Println(&quot;n4&#x3D;&quot;, n4)
	fmt.Printf(&quot;n4&#x3D;%c,n4&#x3D;%d&quot;, n4, n4)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF0000"> n1= 97 n2= 56</font></p>
<p>n1=a,n2=8</p>
<p>n4=董,n4=33891</p>


<ol>
<li>如果我们保存的字符在 ASCII 表的,比如[0-1, a-z,A-Z..]直接可以保存到 byte </li>
<li>如果我们保存的字符对应码值大于 255,这时我们可以考虑使用 int 类型保存</li>
<li>如果我们需要安装字符的方式输出，这时我们需要格式化输出，即 fmt.Printf(“%c”,)</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>data-type</title>
    <url>//post/data-type.html</url>
    <content><![CDATA[<h1 id="1-数据类型的基本介绍"><a href="#1-数据类型的基本介绍" class="headerlink" title="1.数据类型的基本介绍"></a>1.数据类型的基本介绍</h1><p>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间</p>
<span id="more"></span>

<h2 id="1-1数据类型"><a href="#1-1数据类型" class="headerlink" title="1.1数据类型"></a>1.1数据类型</h2><p>数据类型分为：基本数据类型、复杂数据类型</p>
<h3 id="1-1-1基本数据类型"><a href="#1-1-1基本数据类型" class="headerlink" title="1.1.1基本数据类型"></a>1.1.1基本数据类型</h3><p>基本数据类型：整数类型（int、int8、int16、int32、int64、uint、uint8、uint16、uint32、uint64，byte）、浮点类型（float32、float64）、字符型（没有专门的字符型，使用byte来保存单个字幕字符）、布尔型（bool）、字符串（string）。</p>
<h3 id="1-1-2复杂数据类型"><a href="#1-1-2复杂数据类型" class="headerlink" title="1.1.2复杂数据类型"></a>1.1.2复杂数据类型</h3><p>复杂数据类型：指针（pointer）、数组、结构体（struct）、管道（channel）、函数、切片（slice）、接口（interface）、map</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>etcd06-运维命令</title>
    <url>//post/etcd-ops-order.html</url>
    <content><![CDATA[<p>在此记录一下运维同学常用操作etcd的命令</p>
<span id="more"></span>

<h2 id="增-改"><a href="#增-改" class="headerlink" title="增/改"></a>增/改</h2><p>这里是设置键的值的命令 foo 到 bar：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">etcdctl put foo bar
OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>读取键为 foo 的命令</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl get foo
foo &#x2F;&#x2F; key
bar &#x2F;&#x2F; value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面同时返回了 key 和 value，怎么只读取 key 对应的值呢：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">etcdctl get foo --print-value-only
bar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>按前缀读取：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">etcdctl get --prefix foo
foo
bar
foo1
bar1
foo2
bar2
foo3
bar3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>按前缀只需要key：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">etcdctl get --prefix foo --keys-only=true
foo
foo1
foo2
foo3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p>删除一个key</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl del foo
1 &#x2F;&#x2F;删除个数
foo &#x2F;&#x2F;删除key
bar &#x2F;&#x2F;删除value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>删除key foo1时并返回被删除的键值对</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl del foo
1 &#x2F;&#x2F;删除个数
foo1 &#x2F;&#x2F;删除key
bar1 &#x2F;&#x2F;删除value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>删除指定前缀的key</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl del --prev-kv --prefix foo
2
foo3
bar3
foo4
bar4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>删除已foo为开头的key，只显示key不显示value</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl  del --prefix foo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>删除所有数据</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl del --prefix &quot;&quot;
4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当删除数据后，发现数据库容量并没有变少，这个时候可以使用数据压缩与碎片整理</p>
<p>1、获取当前版本</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">rev&#x3D;$(ETCDCTL_API&#x3D;3 etcdctl --endpoints&#x3D;http:&#x2F;&#x2F;127.0.0.1:2379 endpoint status --write-out&#x3D;&quot;json&quot; | egrep -o &#39;&quot;revision&quot;:[0-9]*&#39; | egrep -o &#39;[0-9].*&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、压缩掉所有旧版本</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl --endpoints&#x3D;http:&#x2F;&#x2F;127.0.0.1:2379 compact $rev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、整理多余的空间</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">ETCDCTL_API&#x3D;3 etcdctl --endpoints&#x3D;http:&#x2F;&#x2F;127.0.0.1:2379 defrag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通过线上实践发现还是设置自动压缩更靠谱，官方同样提供数据自动压缩方式，历史数据只保留一个小时的</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">ETCDCTL_API&#x3D;3 etcdctl --auto-compaction-retention&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>根据实践发现只配置auto-compaction-retention只会做碎片整理，不会实际减少空间大小；　如果需要减少大小还是需要使用etcdctl compact 和　etcdctl defrag清理空间</p>
<p>etcd 3.3.3版本以后的自动压缩方式：</p>
<p>每5分钟自动压缩”latest revision” - 1000</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl -–auto-compaction-mode&#x3D;revision --auto-compaction-retention&#x3D;1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>每1小时自动压缩并保留12小时窗口</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl -–auto-compaction-mode&#x3D;periodic --auto-compaction-retention&#x3D;12h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="leader节点切换"><a href="#leader节点切换" class="headerlink" title="leader节点切换"></a>leader节点切换</h2><p>有时候我们运维需要对集群进行操作，为了不影响线上服务，我们可以手动指定leader节点</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">#注意：只能在leader节点进行操作
/tmp/etcd-download-test/etcdctl move-leader 219637592b6b26a7 --endpoints 127.0.0.1:2379
Leadership transferred from 6f33c9a8402dd6ab to 219637592b6b26a7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>浮点类型</title>
    <url>//post/float-type.html</url>
    <content><![CDATA[<h1 id="1-浮点类型"><a href="#1-浮点类型" class="headerlink" title="1.浮点类型"></a>1.浮点类型</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>小数类型就是用于存放小数的，比如 1.2 0.23 -1.91</p>
<span id="more"></span>

<h2 id="1-1浮点类型分类"><a href="#1-1浮点类型分类" class="headerlink" title="1.1浮点类型分类"></a>1.1浮点类型分类</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用存储空间</th>
<th align="center">表数范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单精度float32</td>
<td align="center">字节</td>
<td align="center">-3.403E38~3.403E38</td>
</tr>
<tr>
<td align="center">双精度float32</td>
<td align="center">8字节</td>
<td align="center">-1.798E308~1.798E308</td>
</tr>
</tbody></table>
<p>对上图的说明:</p>
<h3 id="1-1-1-关于浮点数在机器中存放形式的简单说明-浮点数-符号位-指数位-尾数位"><a href="#1-1-1-关于浮点数在机器中存放形式的简单说明-浮点数-符号位-指数位-尾数位" class="headerlink" title="1.1.1 关于浮点数在机器中存放形式的简单说明,浮点数=符号位+指数位+尾数位"></a>1.1.1 关于浮点数在机器中存放形式的简单说明,浮点数=符号位+指数位+尾数位</h3><p>说明：浮点数都是有符号的.</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var n1 float32 &#x3D; 79.32
	var n2 float32 &#x3D; -0.000123
	var n3 float64 &#x3D; -98765.4321
	fmt.Println(&quot;n1&#x3D;&quot;, n1, &quot;n2&#x3D;&quot;, n2, &quot;n3&#x3D;&quot;, n3)
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF0000">n1= 79.32 n2= -0.000123 n3= -98765.4321</font></p>
<h3 id="1-1-2尾数部分可能丢失，造成精度损失"><a href="#1-1-2尾数部分可能丢失，造成精度损失" class="headerlink" title="1.1.2尾数部分可能丢失，造成精度损失"></a>1.1.2尾数部分可能丢失，造成精度损失</h3><pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var n1 float32 &#x3D; 123.456789999
	var n2 float64 &#x3D; 123.4567899999999
	fmt.Println(&quot;n1&#x3D;&quot;, n1, &quot;n2&#x3D;&quot;, n2)
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#ff0000">n1= 123.45679 n2= 123.4567899999999</font></p>
<p>说明：float64 的精度比 float32 的要准确。</p>
<p>说明：如果我们要保存一个精度高的数，则应该选用 float64。</p>
<h3 id="1-1-3-浮点型的存储分为三部分"><a href="#1-1-3-浮点型的存储分为三部分" class="headerlink" title="1.1.3 浮点型的存储分为三部分"></a>1.1.3 浮点型的存储分为三部分</h3><p>符号位+指数位+尾数位在存储过程中，精度会有丢失</p>
<h2 id="1-2浮点型使用细节"><a href="#1-2浮点型使用细节" class="headerlink" title="1.2浮点型使用细节"></a>1.2浮点型使用细节</h2><ol>
<li><p>Golang 浮点类型有固定的范围和字段长度，不受具体 OS(操作系统)的影响。 </p>
</li>
<li><p>Golang 的浮点型默认声明为 float64 类型。</p>
 <pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var n1 &#x3D; 123.456789999
	fmt.Printf(&quot;n1的数据类型是%T&quot;, n1)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 结果</p>
<p> <font color="#FF0000">n1的数据类型是float64</font></p>
</li>
<li><p>浮点型常量有两种表示形式 </p>
</li>
<li><p>十进制数形式：如：5.12 .512 (必须有小数点）科学计数法形式:</p>
<p> 5.1234e2 = 5.12 * 10 的 2 次方</p>
<p>  5.12E-2 = 5.12/10 的 2 次方</p>
</li>
<li><p>通常情况下，应该使用 float64 ，因为它比 float32 更精确。[开发中，推荐使用 float64]</p>
</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>gin-method</title>
    <url>//post/gin-method.html</url>
    <content><![CDATA[<p>实现gin的调用方法，包括post、get、json等</p>
<span id="more"></span>

<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
	&quot;net&#x2F;http&quot;

	&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;
)

func main() &#123;
	r :&#x3D; gin.Default()
	r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;
		c.JSON(200, gin.H&#123;&quot;default&quot;: true&#125;)
	&#125;)
	r.GET(&quot;&#x2F;string&quot;, func(c *gin.Context) &#123;
		c.String(http.StatusOK, &quot;值：%v&quot;, &quot;首页&quot;)
	&#125;)
	r.GET(&quot;&#x2F;json&quot;, func(c *gin.Context) &#123;
		c.JSON(http.StatusOK, gin.H&#123;
			&quot;status&quot;: true,
			&quot;msg&quot;:    &quot;访问成功&quot;,
		&#125;)
	&#125;)
	r.Run()
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>go gin</tag>
      </tags>
  </entry>
  <entry>
    <title>go-context</title>
    <url>//post/go-context.html</url>
    <content><![CDATA[<h1 id="Context初识"><a href="#Context初识" class="headerlink" title="Context初识"></a>Context初识</h1><p>Go1.7加入一个新的标准库context，他定义了context类型，专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、请求信号、截止时间等相关操作，这些操作可能涉及多个API调用。</p>
<span id="more"></span>

<p>对服务器传入的请求应该创建上下文，而对服务器的传出调用应该接受上下文。他们之间的函数调用链必须传递上下文，或者可以使用withCancel、WithDeadline、WithTimeout、或WithValue创建的派生上下文，当一个上下文被取消时，他派生的所有上下文也被取消。</p>
<p>Context接口</p>
<p>context.Context是一个接口，该接口定义了四个需要实现的方法。具体如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Context interface &#123;
    Deadline() (deadline time.Time, ok bool)
    Done() &lt;-chan struct&#123;&#125;
    Err() error
    Value(key any) any
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>Deadline</code>方法需要返回当前<code>Context</code>被取消的时间，也就是完成工作的截止时间（deadline）；</li>
<li><code>Done</code>方法需要返回一个<code>Channel</code>，这个Channel会在当前工作完成或者上下文被取消之后关闭，多次调用<code>Done</code>方法会返回同一个Channel；</li>
<li><code>err</code>方法会返回当前Context结束的原因，它只会在Done返回的Channel被关闭时才会返回非空的值；<ul>
<li>如果当前<code>Context</code>被取消就会返回<code>Canceled</code>错误；</li>
<li>如果当前<code>Context</code>超时就会返回<code>DeadlineExceeded</code>错误；</li>
</ul>
</li>
<li><code>Value</code>方法会从<code>Context</code>中返回键对应的值，对于同一个上下文来说，多次调用<code>Value</code> 并传入相同的<code>Key</code>会返回相同的结果，该方法仅用于传递跨API和进程间跟请求域的数据；</li>
</ul>
]]></content>
      <tags>
        <tag>go context</tag>
      </tags>
  </entry>
  <entry>
    <title>gin中模板的配置</title>
    <url>//post/gin-template.html</url>
    <content><![CDATA[<h2 id="1、全部模板放在一个目录里的配置方法"><a href="#1、全部模板放在一个目录里的配置方法" class="headerlink" title="1、全部模板放在一个目录里的配置方法"></a>1、全部模板放在一个目录里的配置方法</h2><p>现在的目录路径：</p>
<span id="more"></span>

<p>![image-20220809151655101](/Users/geminifly/Library/Application Support/typora-user-images/image-20220809151655101.png)</p>
<p>index.html</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;&#123;define "index.html"&#125;&#125;
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>
        <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
&#123;&#123;end&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>news.html</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;&#123;define "news.html"&#125;&#125;
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>
        <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
&#123;&#123;end&#125;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>main.go</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">
package main

import &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;

func main() &#123;
	r :&#x3D; gin.Default()
	&#x2F;&#x2F;加载模板
	r.LoadHTMLGlob(&quot;templates&#x2F;**&#x2F;**&quot;)
	r.GET(&quot;&#x2F;index&quot;, func(context *gin.Context) &#123;
		context.HTML(200, &quot;index.html&quot;, gin.H&#123;&quot;title&quot;: &quot;首页&quot;&#125;)
	&#125;)
	r.GET(&quot;&#x2F;news&quot;, func(context *gin.Context) &#123;
		context.HTML(200, &quot;news.html&quot;, gin.H&#123;&quot;title&quot;: &quot;新闻 页&quot;&#125;)
	&#125;)
	r.Run()
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>gin go</tag>
      </tags>
  </entry>
  <entry>
    <title>go-协程说明</title>
    <url>//post/go-goroutine.html</url>
    <content><![CDATA[<h1 id="1、关于进程与线程"><a href="#1、关于进程与线程" class="headerlink" title="1、关于进程与线程"></a>1、关于进程与线程</h1><p>进程（process）就是程序在操作系统中的一次执行过程，是系统进行资源分配和调度的基本单位，进程是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间。一个进程至少有5种基本状态，它们是：初始态、执行态、等待状态、就绪状态、终止状态。</p>
<span id="more"></span>
<p>通俗的讲，进程就是一个正在执行的程序</p>
<p>线程 是进程的一个执行实例，是程序执行的最小单元，它是比进程更小的能独立运行的基本单位</p>
<p>一个进程可以创建多个线程，同一个进程中的多个线程可以并发执行，一个程序要运行的话执行有一个进程</p>
<h1 id="2、关于并发与并行"><a href="#2、关于并发与并行" class="headerlink" title="2、关于并发与并行"></a>2、关于并发与并行</h1><p>并发：多个线程同时竞争一个位置，竞争到的才可以执行，每一个时间段只有一个线程在执行</p>
<p>并行：多个线程可以同时执行，每一个时间段，可以有多个线程同时执行<br>通俗的讲：多线程程序在单核CPU上运行就是并发，多线程程序在多核CPU上运行就是并行，如果线程数大于CPU核数，则多线程程序在多个CPU上面运行即有并发又有并行</p>
<h1 id="3、Golang中的协程（goroutine）以及主线程"><a href="#3、Golang中的协程（goroutine）以及主线程" class="headerlink" title="3、Golang中的协程（goroutine）以及主线程"></a>3、Golang中的协程（goroutine）以及主线程</h1><p>Golang中的主线程：（可以理解为线程/也可以理解为进程），在一个Golang程序的主线程上可以起多个协程。Golang中多协程可以实现并行或者并发。<br>协程：可以理解为用户级线程，这是对内核透明的，也就是系统并不知道有协程的存在，是完全有用户自己的程序进行调度的。Golang的一大特色就是i次哦那个语言层面原生支持协程，在函数或者方法前面加 go 关键字姐可以创建一个携程。可以说Golang中的协程就是goroutine。<br>多线程和多协程：Golang中每个goroutine（协程）默认占用内存远比java、c的线程少。os线程（操作系统线程）一般都有固定的栈内存（通常为2MB左右），一个goroutine（协程）占用内存非常小，只有2Kb左右，多协程goroutine切换调度开销方面远比线程要少。这也是为什么越来越多的公司开始使用golang的原因之一。</p>
<h1 id="4、goroutine的使用以及sync-WaitGroup"><a href="#4、goroutine的使用以及sync-WaitGroup" class="headerlink" title="4、goroutine的使用以及sync.WaitGroup"></a>4、goroutine的使用以及sync.WaitGroup</h1>]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang并行运行时设置占用cpu数量</title>
    <url>//post/go-routine-cpu.html</url>
    <content><![CDATA[<p>Go运行时的调度器使用GOMAXPROCS参数来确定需要使用多少个OS线程来同时执行Go代码。默认值是机器上的VCPU核心数。例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上。</p>
<span id="more"></span>

<p>Golang中可以通过runtime.GOMAXPROCS()函数设置当前程序并发时占用的CPU逻辑核心数。</p>
<p>Golang1.5版本之前，默认使用的是单核心执行。Golang1.5版本之后，默认使用全部的CPU逻辑核心数。</p>
<p>代码演示：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;runtime&quot;
)

func main() &#123;
	&#x2F;&#x2F;获取当前计算机上面的Cpu核数
	CpuNum :&#x3D; runtime.NumCPU()
	fmt.Println(&quot;cpuNum&#x3D;&quot;, CpuNum)
	&#x2F;&#x2F;可以自己设置使用多个Cpu
	runtime.GOMAXPROCS(CpuNum - 2)
	fmt.Println(&quot;ok&quot;)
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go-变量</title>
    <url>//post/go-%E5%8F%98%E9%87%8F.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="430ff5ef0b57269cc6acfa484f48d385bf32d2a47ded8f34d6af7963b0168326"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm-cert-expired</title>
    <url>//post/kubeadm-cert-expired.html</url>
    <content><![CDATA[<h2 id="1-为什么要修改-kubeadm-证书时间"><a href="#1-为什么要修改-kubeadm-证书时间" class="headerlink" title="1.为什么要修改 kubeadm 证书时间"></a>1.为什么要修改 kubeadm 证书时间</h2><p>Kubernetes 官方提供了 kubeadm 工具安装 kubernetes 集群，使用这个工具安装集群非常便捷，使部署和升级 Kubernetes 变得简单起来。</p>
<span id="more"></span>

<p>不过该工具有点坑的就是，使用其安装的 kubernetes 集群的大部分证书有效期只有一年，需要在证书过期前，使用更新操作更新集群，使证书的有效期再续一年。如果忘记这个操作，那么在使用过程中证书到期将导致集群不可用，使用过程中会出现以下报错：x509: certificate has expired or is not yet valid，应用无法访问，急急忙忙解决也需要半天时间，这个问题是致命的。</p>
<p>不过实际情况下，在现网环境中大部分人追求稳定，一般不会大改 Kubernetes 版本，所以解决 kubeadm 集群证书有效期只有一年的最好办法就是重新编译 kubeadm 源码，将里面的 1 年有效期修改为 10 年或者 100 年，也不会影响使用 kubeadm 后续的升级，所以修改源码能很好的规避这个证书过期风险。</p>
<h2 id="2-查看证书有的效期"><a href="#2-查看证书有的效期" class="headerlink" title="2.查看证书有的效期"></a>2.查看证书有的效期</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd &#x2F;etc&#x2F;kubernetes&#x2F;pki
for i in $(ls *.crt); do echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; $i &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;; openssl x509 -in $i -text -noout | grep -A 3 &#39;Validity&#39; ; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>结果</p>
<pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; apiserver.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
        Validity
            Not Before: Sep  5 08:32:57 2022 GMT
            Not After : Sep  5 08:32:58 2023 GMT
        Subject: CN&#x3D;kube-apiserver
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; apiserver-etcd-client.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
        Validity
            Not Before: Sep  5 08:32:58 2022 GMT
            Not After : Sep  5 08:32:59 2023 GMT
        Subject: O&#x3D;system:masters, CN&#x3D;kube-apiserver-etcd-client
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; apiserver-kubelet-client.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
        Validity
            Not Before: Sep  5 08:32:57 2022 GMT
            Not After : Sep  5 08:32:58 2023 GMT
        Subject: O&#x3D;system:masters, CN&#x3D;kube-apiserver-kubelet-client
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ca.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
        Validity
            Not Before: Sep  5 08:32:57 2022 GMT
            Not After : Sep  2 08:32:57 2032 GMT
        Subject: CN&#x3D;kubernetes
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; front-proxy-ca.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
        Validity
            Not Before: Sep  5 08:32:58 2022 GMT
            Not After : Sep  2 08:32:58 2032 GMT
        Subject: CN&#x3D;front-proxy-ca
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; front-proxy-client.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
        Validity
            Not Before: Sep  5 08:32:58 2022 GMT
            Not After : Sep  5 08:32:58 2023 GMT
        Subject: CN&#x3D;front-proxy-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><pre class="line-numbers language-none"><code class="language-none">kubeadm certs check-expiration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>结果</p>
<pre class="line-numbers language-none"><code class="language-none">
[check-expiration] Reading configuration from the cluster...
[check-expiration] FYI: You can look at this config file with &#39;kubectl -n kube-system get cm kubeadm-config -o yaml&#39;

CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED
admin.conf                 Sep 05, 2023 08:33 UTC   364d                                    no
apiserver                  Sep 05, 2023 08:32 UTC   364d            ca                      no
apiserver-etcd-client      Sep 05, 2023 08:32 UTC   364d            etcd-ca                 no
apiserver-kubelet-client   Sep 05, 2023 08:32 UTC   364d            ca                      no
controller-manager.conf    Sep 05, 2023 08:33 UTC   364d                                    no
etcd-healthcheck-client    Sep 05, 2023 08:32 UTC   364d            etcd-ca                 no
etcd-peer                  Sep 05, 2023 08:32 UTC   364d            etcd-ca                 no
etcd-server                Sep 05, 2023 08:32 UTC   364d            etcd-ca                 no
front-proxy-client         Sep 05, 2023 08:32 UTC   364d            front-proxy-ca          no
scheduler.conf             Sep 05, 2023 08:33 UTC   364d                                    no

CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED
ca                      Sep 02, 2032 08:32 UTC   9y              no
etcd-ca                 Sep 02, 2032 08:32 UTC   9y              no
front-proxy-ca          Sep 02, 2032 08:32 UTC   9y              no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="3-证书有效期修改方法"><a href="#3-证书有效期修改方法" class="headerlink" title="3.证书有效期修改方法"></a>3.证书有效期修改方法</h2><h3 id="3-1-部署go环境"><a href="#3-1-部署go环境" class="headerlink" title="3.1 部署go环境"></a>3.1 部署go环境</h3><p>查看go版本(1.16.8)</p>
<pre class="line-numbers language-none"><code class="language-none">kubeadm version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>结果</p>
<pre class="line-numbers language-none"><code class="language-none">kubeadm version: &amp;version.Info&#123;Major:&quot;1&quot;, Minor:&quot;22&quot;, GitVersion:&quot;v1.22.2&quot;, GitCommit:&quot;8b5a19147530eaac9476b0ab82980b4088bbc1b2&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2021-09-15T21:37:34Z&quot;, GoVersion:&quot;go1.16.8&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>下载</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;opt&#x2F;data
cd &#x2F;opt&#x2F;data
wget  https:&#x2F;&#x2F;studygolang.com&#x2F;dl&#x2F;golang&#x2F;go1.16.8.linux-amd64.tar.gz
tar -xvf go1.16.8.linux-amd64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-2-配置环境变量"><a href="#3-2-配置环境变量" class="headerlink" title="3.2 配置环境变量"></a>3.2 配置环境变量</h3><pre class="line-numbers language-none"><code class="language-none">echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin&quot; &gt;&gt;&#x2F;etc&#x2F;profile
source &#x2F;etc&#x2F;profile
go version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-3-Kubernetes源码下载"><a href="#3-3-Kubernetes源码下载" class="headerlink" title="3.3 Kubernetes源码下载"></a>3.3 Kubernetes源码下载</h3><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt&#x2F;data&#x2F;
git clone --branch v1.22.2 https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="3-4-修改源代码文件"><a href="#3-4-修改源代码文件" class="headerlink" title="3.4 修改源代码文件"></a>3.4 修改源代码文件</h3><p>1、修改constants.go文件</p>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt&#x2F;data&#x2F;kubernetes
vim .&#x2F;cmd&#x2F;kubeadm&#x2F;app&#x2F;constants&#x2F;constants.go
查找CertificateValidity字段

const (
        &#x2F;&#x2F; KubernetesDir is the directory Kubernetes owns for storing various configuration files
        KubernetesDir &#x3D; &quot;&#x2F;etc&#x2F;kubernetes&quot;
        &#x2F;&#x2F; ManifestsSubDirName defines directory name to store manifests
        ManifestsSubDirName &#x3D; &quot;manifests&quot;
        &#x2F;&#x2F; TempDirForKubeadm defines temporary directory for kubeadm
        &#x2F;&#x2F; should be joined with KubernetesDir.
        TempDirForKubeadm &#x3D; &quot;tmp&quot;

        &#x2F;&#x2F; CertificateValidity defines the validity for all the signed certificates generated by kubeadm
        &#x2F;&#x2F; 修改这个地方
        CertificateValidity &#x3D; time.Hour * 24 * 365 * 100

        &#x2F;&#x2F; CACertAndKeyBaseName defines certificate authority base name
        CACertAndKeyBaseName &#x3D; &quot;ca&quot;
        &#x2F;&#x2F; CACertName defines certificate name
        CACertName &#x3D; &quot;ca.crt&quot;
        &#x2F;&#x2F; CAKeyName defines certificate name
        CAKeyName &#x3D; &quot;ca.key&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、修改cert.go文件</p>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt&#x2F;data&#x2F;kubernetes
vim staging&#x2F;src&#x2F;k8s.io&#x2F;client-go&#x2F;util&#x2F;cert&#x2F;cert.go 
查找NotAfter字段

&#x2F;&#x2F; NewSelfSignedCACert creates a CA certificate
func NewSelfSignedCACert(cfg Config, key crypto.Signer) (*x509.Certificate, error) &#123;
        now :&#x3D; time.Now()
        tmpl :&#x3D; x509.Certificate&#123;
                SerialNumber: new(big.Int).SetInt64(0),
                Subject: pkix.Name&#123;
                        CommonName:   cfg.CommonName,
                        Organization: cfg.Organization,
                &#125;,
                DNSNames:              []string&#123;cfg.CommonName&#125;,
                NotBefore:             now.UTC(),
                NotAfter:              now.Add(duration365d * 100).UTC(),
                KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,
                BasicConstraintsValid: true,
                IsCA:                  true,
        &#125;

        certDERBytes, err :&#x3D; x509.CreateCertificate(cryptorand.Reader, &amp;tmpl, &amp;tmpl, key.Public(), key)
        if err !&#x3D; nil &#123;
                return nil, err
        &#125;
        return x509.ParseCertificate(certDERBytes)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-5-编译源码"><a href="#3-5-编译源码" class="headerlink" title="3.5 编译源码"></a>3.5 编译源码</h3><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt&#x2F;data&#x2F;kubernetes
make WHAT&#x3D;cmd&#x2F;kubeadm GOFLAGS&#x3D;-v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="3-6-编译完后查看结果，就可以看到生成的kubeadm二进文件"><a href="#3-6-编译完后查看结果，就可以看到生成的kubeadm二进文件" class="headerlink" title="3.6 编译完后查看结果，就可以看到生成的kubeadm二进文件"></a>3.6 编译完后查看结果，就可以看到生成的kubeadm二进文件</h3><pre class="line-numbers language-none"><code class="language-none">ls -l &#x2F;opt&#x2F;data&#x2F;kubernetes&#x2F;_output&#x2F;bin&#x2F;

-rwxr-xr-x 1 root root  7540736 Sep  5 17:20 conversion-gen
-rwxr-xr-x 1 root root  7200768 Sep  5 17:19 deepcopy-gen
-rwxr-xr-x 1 root root  7233536 Sep  5 17:19 defaulter-gen
-rwxr-xr-x 1 root root  3555847 Sep  5 17:19 go2make
-rwxr-xr-x 1 root root 45789184 Sep  5 17:22 kubeadm
-rwxr-xr-x 1 root root 10141696 Sep  5 17:20 openapi-gen
-rwxr-xr-x 1 root root  7168000 Sep  5 17:19 prerelease-lifecycle-gen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-7-备份"><a href="#3-7-备份" class="headerlink" title="3.7 备份"></a>3.7 备份</h3><pre class="line-numbers language-none"><code class="language-none">备份
cp &#x2F;usr&#x2F;bin&#x2F;kubeadm &#x2F;usr&#x2F;bin&#x2F;kubeadm.20220905
备份旧的证书文件，记住3台master都需要备份一下
cp -R &#x2F;etc&#x2F;kubernetes&#x2F;pki &#x2F;etc&#x2F;kubernetes&#x2F;pki.20220905<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-8-替换"><a href="#3-8-替换" class="headerlink" title="3.8 替换"></a>3.8 替换</h3><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;opt&#x2F;data&#x2F;kubernetes&#x2F;_output&#x2F;bin&#x2F;kubeadm &#x2F;usr&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-9-证书更新"><a href="#3-9-证书更新" class="headerlink" title="3.9 证书更新"></a>3.9 证书更新</h3><pre class="line-numbers language-none"><code class="language-none">kubeadm certs renew all

[renew] Reading configuration from the cluster...
[renew] FYI: You can look at this config file with &#39;kubectl -n kube-system get cm kubeadm-config -o yaml&#39;

certificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed
certificate for serving the Kubernetes API renewed
certificate the apiserver uses to access etcd renewed
certificate for the API server to connect to kubelet renewed
certificate embedded in the kubeconfig file for the controller manager to use renewed
certificate for liveness probes to healthcheck etcd renewed
certificate for etcd nodes to communicate with each other renewed
certificate for serving etcd renewed
certificate for the front proxy client renewed
certificate embedded in the kubeconfig file for the scheduler manager to use renewed

Done renewing certificates. You must restart the kube-apiserver, kube-controller-manager, kube-scheduler and etcd, so that they can use the new certificates.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-10-重启apiserver、controller、scheduler配置生效"><a href="#3-10-重启apiserver、controller、scheduler配置生效" class="headerlink" title="3.10 重启apiserver、controller、scheduler配置生效"></a>3.10 重启apiserver、controller、scheduler配置生效</h3><pre class="line-numbers language-none"><code class="language-none">docker ps |grep -E &#39;k8s_kube-apiserver|k8s_kube-controller-manager|k8s_kube-scheduler|k8s_etcd_etcd&#39;|awk &#39;&#123;print $1&#125;&#39; |xargs docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-11-其他master节点"><a href="#3-11-其他master节点" class="headerlink" title="3.11 其他master节点"></a>3.11 其他master节点</h3><p>同理另外2台的master，只需要把kubeadm文件，从第一台更新过的scp过去，然后按上面步骤，重新生成新的证书文件就可以了。记住更新过需要重启一下服务或者服务器。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm初始化集群报错</title>
    <url>//post/kubeadm-join-fatal.html</url>
    <content><![CDATA[<p>报错信息如下</p>
<pre class="line-numbers language-none"><code class="language-none">error execution phase preflight: [preflight] Some fatal errors occurred:
[ERROR CRI]: container runtime is not running: output: E0905 15:24:41.698370   29432 remote_runtime.go:925] &quot;Status from runtime service failed&quot; err&#x3D;&quot;rpc error: code &#x3D; Unimplemented desc &#x3D; unknown service runtime.v1alpha2.RuntimeService&quot;
time&#x3D;&quot;2022-09-05T15:24:41+08:00&quot; level&#x3D;fatal msg&#x3D;&quot;getting status of runtime: rpc error: code &#x3D; Unimplemented desc &#x3D; unknown service runtime.v1alpha2.RuntimeService&quot;
, error: exit status 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p><img data-src="kubeadm-join-fatal/image-20220905152740852.png" alt="报错截图"></p>
<p>解决方法：</p>
<pre class="line-numbers language-none"><code class="language-none">mv &#x2F;etc&#x2F;containerd&#x2F;config.toml &#x2F;tmp&#x2F;
systemctl restart container<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后重新初始化集群即可。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>protobuf系列-安装</title>
    <url>//post/proto01.html</url>
    <content><![CDATA[<h2 id="protobuf安装"><a href="#protobuf安装" class="headerlink" title="protobuf安装"></a>protobuf安装</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F;下载protobuf
git clone <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据类型的默认值</title>
    <url>//post/values-for-primitive-data-types.html</url>
    <content><![CDATA[<h1 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h1><p>在 go 中，数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值，在 go 中，默认值 又叫零值。</p>
<span id="more"></span>

<h1 id="2-基本数据类型的默认值如下"><a href="#2-基本数据类型的默认值如下" class="headerlink" title="2. 基本数据类型的默认值如下"></a>2. 基本数据类型的默认值如下</h1><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整型</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">浮点型</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">字符串</td>
<td align="center">“”</td>
</tr>
<tr>
<td align="center">布尔型</td>
<td align="center">False</td>
</tr>
</tbody></table>
<h2 id="2-1-案例"><a href="#2-1-案例" class="headerlink" title="2.1 案例"></a>2.1 案例</h2><pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var a int
	var b float32
	var c float64
	var d bool
	var f string
	fmt.Printf(&quot;a&#x3D;%d,b&#x3D;%v,c&#x3D;%v,d&#x3D;%v,f&#x3D;%v&quot;, a, b, c, d, f)
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#ff0000">a=0,b=0,c=0,d=false,f=</font></p>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>string类型</title>
    <url>//post/string-type.html</url>
    <content><![CDATA[<h1 id="1-字符串类型"><a href="#1-字符串类型" class="headerlink" title="1.字符串类型"></a>1.字符串类型</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本</p>
<span id="more"></span>
<h2 id="1-1-案例演示"><a href="#1-1-案例演示" class="headerlink" title="1.1 案例演示"></a>1.1 案例演示</h2><pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

func main() &#123;
	var ssr string &#x3D; &quot;哈哈哈哈，hello world&quot;
	fmt.Println(ssr)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF000">哈哈哈哈，hello world</font></p>
<h2 id="1-2-string-使用注意事项和细"><a href="#1-2-string-使用注意事项和细" class="headerlink" title="1.2 string 使用注意事项和细"></a>1.2 string 使用注意事项和细</h2><h3 id="1-2-1-Go-语言的字符串的字节使用-UTF-8-编码标识-Unicode-文本，这样-Golang-统一使用-UTF-8-编码-中文-乱码问题不会再困扰程序员"><a href="#1-2-1-Go-语言的字符串的字节使用-UTF-8-编码标识-Unicode-文本，这样-Golang-统一使用-UTF-8-编码-中文-乱码问题不会再困扰程序员" class="headerlink" title="1.2.1 Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本，这样 Golang 统一使用 UTF-8 编码,中文 乱码问题不会再困扰程序员"></a>1.2.1 Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本，这样 Golang 统一使用 UTF-8 编码,中文 乱码问题不会再困扰程序员</h3><h3 id="1-2-2-字符串一旦赋值了，字符串就不能修改了：在-Go-中字符串是不可变的"><a href="#1-2-2-字符串一旦赋值了，字符串就不能修改了：在-Go-中字符串是不可变的" class="headerlink" title="1.2.2 字符串一旦赋值了，字符串就不能修改了：在 Go 中字符串是不可变的"></a>1.2.2 字符串一旦赋值了，字符串就不能修改了：在 Go 中字符串是不可变的</h3><pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

func main() &#123;
	var ssr string &#x3D; &quot;哈哈哈哈，hello world&quot;
	fmt.Println(ssr[0])
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF0000">229</font></p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

func main() &#123;
	var ssr string &#x3D; &quot;哈哈哈哈，hello world&quot;
	ssr[0] &#x3D; &#39;a&#39;
	fmt.Println(ssr[0])
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#ff0000">cannot assign to ssr[0]</font>，标识无法重新给ssr的第0个元素进行修改</p>
<h3 id="1-2-3-字符串的两种表示形式"><a href="#1-2-3-字符串的两种表示形式" class="headerlink" title="1.2.3 字符串的两种表示形式"></a>1.2.3 字符串的两种表示形式</h3><p>(1) 双引号, 会识别转义字符 </p>
<p>(2) 反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击、输出源代码等效果</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var ssr string &#x3D; &#96;
	package main

import (
	&quot;fmt&quot;
)

func main() &#123;
	var ssr string &#x3D; &quot;哈哈哈哈，hello world&quot;
	ssr[0] &#x3D; &#39;a&#39;
	fmt.Println(ssr[0])
&#125;

	&#96;
	fmt.Println(ssr)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#ff0000">package main</font></p>
<p><font color="#ff0000">import (</font></p>
<p><font color="#ff0000">    “fmt”</font></p>
<p><font color="#ff0000">)</font></p>
<p><font color="#ff0000">func main() {</font></p>
<p><font color="#ff0000">    var ssr string = “哈哈哈哈，hello world”</font></p>
<p><font color="#ff0000">    ssr[0] = ‘a’</font></p>
<p><font color="#ff0000">    fmt.Println(ssr[0])</font></p>
<p><font color="#ff0000">}</font></p>
<h3 id="1-2-4-字符串的拼接方式"><a href="#1-2-4-字符串的拼接方式" class="headerlink" title="1.2.4 字符串的拼接方式"></a>1.2.4 字符串的拼接方式</h3><pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var nayaur &#x3D; &quot;hello&quot; + &quot;world&quot;
	nayaur +&#x3D; &quot;nayaur!&quot;
	fmt.Println(nayaur)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#ff0000">helloworldnayaur!</font></p>
<p>发现其实是没有空格的，这样可以在每个字符串中间加空格，拼接的字符串就会有空格</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var nayaur &#x3D; &quot;hello&quot; + &quot; world&quot;
	nayaur +&#x3D; &quot; nayaur!&quot;
	fmt.Println(nayaur)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#ff0000">hello world nayaur!</font></p>
<h3 id="1-2-5-当一行字符串太长时，需要使用到多行字符串，可以如下处理"><a href="#1-2-5-当一行字符串太长时，需要使用到多行字符串，可以如下处理" class="headerlink" title="1.2.5 当一行字符串太长时，需要使用到多行字符串，可以如下处理"></a>1.2.5 当一行字符串太长时，需要使用到多行字符串，可以如下处理</h3><pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var nayaur &#x3D; &quot;hello&quot; + &quot; world&quot; + 
	&quot;hello&quot; + &quot; world&quot;
	fmt.Println(nayaur)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#ff0000">hello worldhello world</font></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>整数类型</title>
    <url>//post/variable-type.html</url>
    <content><![CDATA[<h1 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>简单的说，就是用于存放整数值的，比如 0, -1, 2345 等等。</p>
<span id="more"></span>

<h2 id="1-1整数有符号类型"><a href="#1-1整数有符号类型" class="headerlink" title="1.1整数有符号类型"></a>1.1整数有符号类型</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">有无符号</th>
<th align="center">占用存储空间</th>
<th align="center">表数范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Int8</td>
<td align="center">有</td>
<td align="center">1字节</td>
<td align="center">-128~127</td>
</tr>
<tr>
<td align="center">Int16</td>
<td align="center">有</td>
<td align="center">2字节</td>
<td align="center">-2<sup>15</sup>~2<sup>15</sup>-1</td>
</tr>
<tr>
<td align="center">Int32</td>
<td align="center">有</td>
<td align="center">4字节</td>
<td align="center">-2<sup>31</sup>~2<sup>31</sup>-1</td>
</tr>
<tr>
<td align="center">int64</td>
<td align="center">有</td>
<td align="center">8字节</td>
<td align="center">-2<sup>63</sup>~2<sup>63</sup>-1</td>
</tr>
</tbody></table>
<h3 id="1-1-1案例演示"><a href="#1-1-1案例演示" class="headerlink" title="1.1.1案例演示"></a>1.1.1案例演示</h3><pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var i int &#x3D; 1
	fmt.Println(&quot;i&#x3D;&quot;, i)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF0000">i= 1</font></p>
<h2 id="1-2整数无符号类型"><a href="#1-2整数无符号类型" class="headerlink" title="1.2整数无符号类型"></a>1.2整数无符号类型</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">有无符号</th>
<th align="center">占用存储空间</th>
<th align="center">表数范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">uInt8</td>
<td align="center">无</td>
<td align="center">1字节</td>
<td align="center">0~255</td>
</tr>
<tr>
<td align="center">uInt16</td>
<td align="center">无</td>
<td align="center">2字节</td>
<td align="center">0~2<sup>16</sup>-1</td>
</tr>
<tr>
<td align="center">uInt32</td>
<td align="center">无</td>
<td align="center">4字节</td>
<td align="center">0~2<sup>32</sup>-1</td>
</tr>
<tr>
<td align="center">uInt64</td>
<td align="center">无</td>
<td align="center">8字节</td>
<td align="center">0~2<sup>64</sup>-1</td>
</tr>
</tbody></table>
<h3 id="1-2-1案例演示"><a href="#1-2-1案例演示" class="headerlink" title="1.2.1案例演示"></a>1.2.1案例演示</h3><pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var i int &#x3D; 1
	fmt.Println(&quot;i&#x3D;&quot;, i)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF0000">i= 1</font></p>
<h2 id="1-3整数的其它类型的说明"><a href="#1-3整数的其它类型的说明" class="headerlink" title="1.3整数的其它类型的说明:"></a>1.3整数的其它类型的说明:</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">有无符号</th>
<th align="center">占用存储空间</th>
<th align="center">表数范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int</td>
<td align="center">有</td>
<td align="center">32位系统4个字节<br>64位系统8个字节</td>
<td align="center">-2<sup>31</sup> ~ 2<sup>31</sup>-1<br>-2<sup>63 </sup>~ 2<sup>63</sup>-1</td>
</tr>
<tr>
<td align="center">uInt</td>
<td align="center">无</td>
<td align="center">32位系统4个字节<br>64位系统8个字节</td>
<td align="center">0 ~ 2<sup>32</sup>-1<br>0 ~ 2<sup>64</sup>-1</td>
</tr>
<tr>
<td align="center">rune</td>
<td align="center">有</td>
<td align="center">与int32一样</td>
<td align="center">-2<sup>31</sup> ~ 2<sup>31</sup>-1</td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center">无</td>
<td align="center">与uint8一样，当要存储字符时选用byte</td>
<td align="center">0~255</td>
</tr>
</tbody></table>
<h3 id="1-3-1案例演示"><a href="#1-3-1案例演示" class="headerlink" title="1.3.1案例演示"></a>1.3.1案例演示</h3><pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

func main() &#123;
	var n1 int &#x3D; 9000
	var n2 uint &#x3D; 2
	var n3 byte &#x3D; 255
	fmt.Println(&quot;n1&#x3D;&quot;, n1, &quot;n2&#x3D;&quot;, n2, &quot;n3&#x3D;&quot;, n3)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF0000">n1= 9000 n2= 2 n3= 255</font></p>
<h2 id="1-4整型的使用细节"><a href="#1-4整型的使用细节" class="headerlink" title="1.4整型的使用细节"></a>1.4整型的使用细节</h2><p>1）Golang 各整数类型分：有符号和无符号，int uint 的大小和系统有关</p>
<p>2）Golang 的整型默认声明为 int 型</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

func main() &#123;
	var n1 &#x3D; 900
	fmt.Printf(&quot;n1的类型%T&quot;, n1)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF0000">n1的类型int</font> </p>
<p>3）如何在程序查看某个变量的字节大小和数据类型（unsafe.Sizeof）</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;unsafe&quot;
)

func main() &#123;
	var n1 int &#x3D; 900
	fmt.Printf(&quot;n1的类型%T,n1占用的字节数是%d&quot;, n1, unsafe.Sizeof(n1))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果</p>
<p><font color="#FF0000">n1的类型int,n1占用的字节数是8</font> </p>
<p>4）Golang 程序中整型变量在使用时，遵守保小不保大的原则，即：在保证程序正确运行下，尽量使用占用空间小的数据类型。</p>
<p>5）bit: 计算机中的最小存储单位。byte:计算机中基本存储单元。1byte = 8 bit</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl获取内存使用率不同</title>
    <url>//post/kubectl%20top%20pod%20%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E9%87%8Fcontainer_memory_working_set_bytes.html</url>
    <content><![CDATA[<p>kubectl top pod 内存使用量container_memory_working_set_bytes</p>
<span id="more"></span>

<p>计算方式：</p>
<p>container_memory_working_set_bytes = container_memory_usage_bytes – total_inactive_file（未激活的匿名缓存页）</p>
<p>cadvisor 内存使用量 container_memory_usage_bytes</p>
<p>计算公式：</p>
<p>container_memory_usage_bytes = container_memory_rss + container_memory_cache + kernel memory</p>
<p>container_memory_working_set_bytes 是容器真实使用的内存量，也是 limit限制时的 oom 判断依据</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>makevsnew</title>
    <url>//post/makevsnew.html</url>
    <content><![CDATA[<p>make 和new的区别</p>
<p>首先，两个都是初始化内存</p>
<span id="more"></span>

<p>1、new：多用来为基本数据类型（string、int、bool、struct等）初始化内存，返回的是指针</p>
<p>2、make：多用来为slice、map、channel的内存，返回对应类型</p>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm高可用部署K8S1.22.2-istio（五）</title>
    <url>//post/k8s-istio.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>consul集群</title>
    <url>//post/consul.html</url>
    <content><![CDATA[<h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>Consul是HashiCorp公司推出的开源软件，基于 GO 语言编写，提供服务注册和发现、配置、多数据中心的高可用方案等能力，分布式一致方面采用 raft 算法实现，并且很容易和 Spring Cloud 等微服务框架集成，使用起来非常简单，具有简单、易用、可插排等特点</p>
<p>但是，如果只使用Consul的Server模式有以下2个问题：</p>
<ul>
<li><p>因为Consul Server数量受到控制所以压力承载（扩展性）是个问题。</p>
</li>
<li><p>Server很少导致一个Server下会注册很多微服务，当Server挂掉，这个Server节点下注册的微服务都会视为无效。</p>
  <span id="more"></span>

</li>
</ul>
<p>基于上述问题我们在架构中加入Consul Client模式，Client因为加入了LAN gossip协议组成网络中（高速局域网），可以识别故障的Server节点并找到可用的Server节点继续工作，其实Server模式负责的是用WAN gossip协议组成的网络进行跨广域网的数据同步（多个数据中心），这点Client模式是做不到的，Client模式也提供服务的注册和查询，但Client模式不存储节点数据，Client将请求转发给Server进行处理，节点注册数据在Server端是持久化保存的，Client的数量可以无限多，Server的数量是受控制的。总之：Client模式+LAN gossip协议组成了一个数据中心中的各个节点，Server负责投票选出Leader进行数据中心内的数据同步，这个Leader还负责利用WAN gossip协议跨广域网的与其他数据中心进行数据同步。</p>
<p>PS:默认情况下Server的数量建议是 3 ~ 5 台，Client 的数量建议2 ~ 5台，这能平衡故障情况下的可用性和集群性能。</p>
<h4 id="架构示意图："><a href="#架构示意图：" class="headerlink" title="架构示意图："></a>架构示意图：</h4><p><img data-src="consul/image-20220921142207939.png" alt="server-client架构图"></p>
<h3 id="数据中心设计"><a href="#数据中心设计" class="headerlink" title="数据中心设计"></a>数据中心设计</h3><p>用户可以在单个物理数据中心、或跨多个数据中心部署Consul集群。对于运行时高读写的大型集群，将服务器部署在同物理地址可以提高性能；在云环境中，用户可以跨多个可用区域（zone）部署一个数据中心，例如每个可用区域对应一台单一的主机。Consul还可以通过<a href>WAN</a>连接单独的集群组成多数据中心。</p>
<h4 id="单数据中心"><a href="#单数据中心" class="headerlink" title="单数据中心"></a>单数据中心</h4><p>对于部署在同一个数据中心中的应用程序，我们建议使用一个Consul集群。Consul支持传统的三层架构应用，同样也支持微服务，搭建一个集群通常是3或5台机器，用户可以在可用性和性能间寻找平衡。<br> 单个数据中心的节点（node）数建议不超过5000个，对于读写频繁的集群，可能需要进一步减少最大节点数，这具体取决KV对的数量以及监控数据的数量。当用户添加更多的客户端机器时，Gossip协议执行的时间会更长、<br> 对于写负载高的集群，推荐使用硬件升级垂直扩展，并使用低延迟存储。<br> <code>服务标签（Service Tag）</code>可帮助用户对集群中的内容进行查询</p>
<h4 id="多数据中心"><a href="#多数据中心" class="headerlink" title="多数据中心"></a>多数据中心</h4><p>用户可以通过WAN链接加入在不同数据中心中运行相同服务的Consul集群。集群间独立运行，仅通过8302端口上的WAN通信，除非通过命令行或者API明确配置，否则Consul服务器将仅从其本地数据中心返回结果。Consul不会在多个数据中心之间复制数据，但是用户可以使用consul-replicate工具定期同步KV数据。<br> 比较好的实践是启用TLS服务名称检查，以避免代理意外交叉连接。<br> Consul的<code>预查询（prepared queries）</code>允许客户端在某一数据中心发生故障后，去另一个数据中心发现服务。例如本地数据中心dc1中的payment服务下线了，则预查询使用户能能访问到离该数据中心地理位置最近的其他正常服务。<br> 默认情况下，预查询首先会在本地数据中心解析。它们不支持查询KV数据，但是可以使用ACLs。</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><table>
<thead>
<tr>
<th align="center"><strong>节点名称</strong></th>
<th><strong>节点IP</strong></th>
<th align="center"><strong>Agent类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">consul-01</td>
<td>10.181.0.147</td>
<td align="center">server</td>
</tr>
<tr>
<td align="center">consul-02</td>
<td>10.181.0.148</td>
<td align="center">server</td>
</tr>
<tr>
<td align="center">consul-03</td>
<td>10.181.0.149</td>
<td align="center">server</td>
</tr>
<tr>
<td align="center">consul-client</td>
<td>10.181.0.152</td>
<td align="center">client</td>
</tr>
</tbody></table>
<h4 id="1、安装-Consul"><a href="#1、安装-Consul" class="headerlink" title="1、安装 Consul"></a>1、安装 Consul</h4><p>配置主机名，命令示例：（以下操作在所有节点配置）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hostnamectl set-hostname consul-01
hostnamectl set-hostname consul-02
hostnamectl set-hostname consul-03
hostnamectl set-hostname consul-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>下载consul</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export VER&#x3D;&quot;1.12.3&quot;
wget https:&#x2F;&#x2F;releases.hashicorp.com&#x2F;consul&#x2F;$&#123;VER&#125;&#x2F;consul_$&#123;VER&#125;_linux_amd64.zip
unzip consul_$&#123;VER&#125;_linux_amd64.zip -d &#x2F;usr&#x2F;local&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>创建consul用户和组</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">groupadd --system consul
useradd -s &#x2F;sbin&#x2F;nologin --system -g consul consul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>创建consul安装目录</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;data&#x2F;consul&#x2F;&#123;config,data,logs&#125;
chown -R consul:consul &#x2F;data&#x2F;consul
chmod -R 775 &#x2F;data&#x2F;consul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>设置 DNS 或编辑/etc/hosts 文件以配置所有服务器的主机名，替换<code>example.com</code>为您的实际域名。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat &gt;&#x2F;etc&#x2F;hosts&lt;&lt;EOF
10.181.0.147 consul-01.example.com consul-01
10.181.0.148 consul-02.example.com consul-02
10.181.0.149 consul-03.example.com consul-03
10.181.0.152 consul-client.example.com consul-client
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2、Server-节点配置"><a href="#2、Server-节点配置" class="headerlink" title="2、Server 节点配置"></a>2、Server 节点配置</h4><p>生成Consul secret</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">consul keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>为server节点创建json配置文件，其他节点配置修改IP地址及节点名称即可</p>
<p>consul-01节点</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat &gt;&#x2F;data&#x2F;consul&#x2F;config&#x2F;consul.json&lt;&lt;EOF
&#123;
    &quot;advertise_addr&quot;: &quot;10.181.0.147&quot;,
    &quot;bind_addr&quot;: &quot;10.181.0.147&quot;,
    &quot;bootstrap_expect&quot;: 3,
    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,
    &quot;datacenter&quot;: &quot;DC1&quot;,
    &quot;node_name&quot;: &quot;consul-01&quot;,
    &quot;data_dir&quot;: &quot;&#x2F;opt&#x2F;consul&#x2F;data&quot;,
    &quot;domain&quot;: &quot;consul&quot;,
    &quot;enable_script_checks&quot;: true,
    &quot;dns_config&quot;: &#123;
        &quot;enable_truncate&quot;: true,
        &quot;only_passing&quot;: true
    &#125;,
    &quot;enable_syslog&quot;: true,
    &quot;encrypt&quot;: &quot;Ao8dtyz2Clor34Zxh8zviWZECboXeM+mBj97kq2mxtk&#x3D;&quot;,#将上门的srcret替换
    &quot;leave_on_terminate&quot;: true,
    &quot;log_level&quot;: &quot;INFO&quot;,
    &quot;rejoin_after_leave&quot;: true,
    &quot;retry_join&quot;: [
     &quot;consul-01&quot;,
     &quot;consul-02&quot;,
     &quot;consul-03&quot;
    ],
    &quot;server&quot;: true,
    &quot;start_join&quot;: [
        &quot;consul-01&quot;,
        &quot;consul-02&quot;,
        &quot;consul-03&quot;
    ],
    &quot;ui&quot;: true
&#125;
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置参数说明：</p>
<p>datacenter：此标志控制运行代理的数据中心。如果未提供，则默认为dc1。Consul 对多个数据中心有一流的支持，但它依赖于正确的配置。同一数据中心中的节点应位于单个 LAN 上。</p>
<p>data_dir：该标志为代理提供了一个数据目录来存储状态。</p>
<p>node_name：节点名字，一般为主机名。</p>
<p>server：指定是否为server节点。</p>
<p>bootstrap_expect：在一个datacenter中期望提供的server节点数目，当提供该值的时候，consul一直等到达到指定sever数目才会引导整个集群，该标记不能和bootstrap公用。</p>
<p>bind_addr：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0。</p>
<p>client_addr：Consul 将绑定客户端接口的地址，包括 HTTP 和 DNS 服务器。默认情况下，这是127.0.0.1，仅允许环回连接。在 Consul 1.0 及更高版本中，这可以设置为要绑定到的以空格分隔的地址列表。</p>
<p>log_json：此标志使代理能够以 JSON 格式输出日志。默认为false。</p>
<p>log_level:在 Consul 代理启动后显示的日志级别。默认为 info 。可用的日志级别是trace、debug、info、warn和err。</p>
<p>retry_join：指定将要置入集群的IP列表，如果失败，会自动重试，知道直到成功加入。</p>
<p>start_join：启动时加入集群的地址</p>
<p>ui_config：此对象允许设置多个子键，用于控制 UI 中可用的显示或功能。</p>
<p>rejoin_after_leave ：允许重新加入集群</p>
<p>3、Client 节点配置</p>
<p>client是consul客户端，客户端不保存数据，客户端将接收到的请求转发给Server端。Server之间通过局域网或广域网通信实现数据一致性。每个Server或Client都是一个consul agent。</p>
<p>创建consul-client节点配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &gt;&#x2F;data&#x2F;consul&#x2F;config&#x2F;consul.json&lt;&lt;EOF
&#123;
    &quot;advertise_addr&quot;: &quot;10.181.0.152&quot;,
    &quot;bind_addr&quot;: &quot;10.181.0.152&quot;,
    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,
    &quot;datacenter&quot;: &quot;DC1&quot;,
    &quot;node_name&quot;: &quot;consul-client&quot;, 
    &quot;data_dir&quot;: &quot;&#x2F;data&#x2F;consul&#x2F;data&quot;,
    &quot;domain&quot;: &quot;consul&quot;,
    &quot;enable_script_checks&quot;: true,
    &quot;dns_config&quot;: &#123;
        &quot;enable_truncate&quot;: true,
        &quot;only_passing&quot;: true
    &#125;,
    &quot;enable_syslog&quot;: true,
    &quot;encrypt&quot;: &quot;Ao8dtyz2Clor34Zxh8zviWZECboXeM+mBj97kq2mxtk&#x3D;&quot;,
    &quot;leave_on_terminate&quot;: true,
    &quot;log_level&quot;: &quot;INFO&quot;,
    &quot;rejoin_after_leave&quot;: true,
    &quot;retry_join&quot;: [
     &quot;consul-01&quot;,
     &quot;consul-02&quot;,
     &quot;consul-03&quot;
    ],
    &quot;server&quot;: false,
    &quot;start_join&quot;: [
        &quot;consul-01&quot;,
        &quot;consul-02&quot;,
        &quot;consul-03&quot;
    ],
    &quot;ui&quot;: true
&#125;
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、systemd 启动文件</p>
<p>所有节点创建systemd 服务文件<code>/etc/systemd/system/consul.service</code>，所有节点具有相同内容，配置如下：</p>
<pre class="line-numbers language-none"><code class="language-none">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;consul.service&lt;&lt;EOF
[Unit]
Description&#x3D;Consul Service Discovery Agent
Documentation&#x3D;https:&#x2F;&#x2F;www.consul.io&#x2F;
After&#x3D;network-online.target
Wants&#x3D;network-online.target


[Service]
Type&#x3D;simple
User&#x3D;consul
Group&#x3D;consul
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;consul agent -config-dir&#x3D;&#x2F;data&#x2F;consul&#x2F;config&#x2F;consul.json


ExecReload&#x3D;&#x2F;bin&#x2F;kill -HUP $MAINPID
KillSignal&#x3D;SIGINT
TimeoutStopSec&#x3D;5
Restart&#x3D;on-failure
SyslogIdentifier&#x3D;consul


[Install]
WantedBy&#x3D;multi-user.target
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所有节点启动consul服务</p>
<pre class="line-numbers language-none"><code class="language-none">systemctl enable --now consul.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>















<h4 id="端口介绍"><a href="#端口介绍" class="headerlink" title="端口介绍"></a>端口介绍</h4><p><img data-src="consul/image-20220921143904555.png" alt="consul-port"></p>
<p>这5个端口的作用：</p>
<ul>
<li>8300：集群内数据的读写和复制</li>
<li>8301：单个数据中心gossip协议通讯</li>
<li>8302：跨数据中心gossip协议通讯</li>
<li>8500：提供获取服务列表、注册服务、注销服务等HTTP接口；提供UI服务</li>
<li>8600：采用DNS协议提供服务发现功能</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>查看成员</p>
<pre class="line-numbers language-none"><code class="language-none">consul members<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看版本号</p>
<pre class="line-numbers language-none"><code class="language-none">consul  version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>列出所有服务</p>
<pre class="line-numbers language-none"><code class="language-none">consul catalog services -http-addr&#x3D;localhost:8500<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



]]></content>
      <categories>
        <category>分布式</category>
      </categories>
  </entry>
  <entry>
    <title>ISP</title>
    <url>//post/ISP.html</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>互联网服务提供商（Internet Service Provider），简称ISP，指的是面向公众提供下列信息服务的经营者：一是接入服务，即帮助用户接入Internet；二是导航服务，即帮助用户在Internet上找到所需要的信息；三是信息服务，即建立数据服务系统，收集、加工、存储信息，定期维护更新，并通过网络向用户提供信息内容服务。</p>
<span id="more"></span>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>在互联网的定义部分就已经接触到，互联网是连接了众多网络的世界级规模的网络。并且，所连接的网络不是杂乱的表现，是通过主干网的互联网服务提供商（ISP）之间的相互连接而构成的互联网。<br>ISP是具有与互联网间保持连续连接的环境，并且将该环境向一般大众提供的行为，我们通过访问ISP能够实现与互联网的连接（而不同的ISP提供的访问环境会有所不同）。<br>并且有根据ISP是直接与主干网连接，还是通过与主干网直接连接的ISP间接与主干网连接来进行分类的。前者称为一级提供商，而后者称为二级提供商（也有三级提供商）。<br>调制解调器（Modem，俗称“猫”）接入方式。<br>Modem是MOdulatorDEModulator两个英文的缩写合并而成。译成中文就是“调制解调器”，台湾地区也称其为“数据机”或“魔电”。Modem的主要功能就是将数据在数字信号和模拟信号之间的转换，以实现在电话线上的传输。<br>这种接入方式就是通常所说的拨号上网方式，是大家最熟悉和家庭上网应用最多的一种上网方式。主机通过调制解调器和电话线路与ISP（互联网服务提供商）网络服务器的调制解调器相连，实现主机与网络服务器的连接。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>NGINX禁止解析IP访问</title>
    <url>//post/NGINX-Prohibit-IP-access.html</url>
    <content><![CDATA[<p>nginx配置禁止ip访问，只能域名访问，这样可以增加一定的安全性，并且在nginx内配置80跳转443，或者在公有云负载均衡配置。</p>
<span id="more"></span>


<h1 id="配置如下"><a href="#配置如下" class="headerlink" title="配置如下"></a>配置如下</h1><pre class="line-numbers language-none"><code class="language-none">server&#123; 
listen 80 default; 
server_name _; 
return 404; 
&#125;

server &#123;
listen 80;
server_name xxx;
rewrite ^(.*)$ https:&#x2F;&#x2F;$&#123;server_name&#125;$1 permanent;
&#125;

server &#123;
listen 443;
server_name xxx;
    #ssl_certificate ;
    #ssl_certificate_key ;

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Write-Ahead Log（WAL）的工作原理</title>
    <url>//post/WAL.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在存储系统的运行过程中，每时每刻都发生着数据的更新，背后意味着诸如创建，删除，修改文件等数据的操作。抛开物理文件数据的改变，对于中心控制节点而言，这些都会涉及到元数据的更新操作。而为了保持系统元数据和物理数据间的状态一致性，系统所有的数据操作对应的元数据变更都需要持久化到元数据db内，但其实这里有一个性能问题，我们的每次变更如果都要实时同步到外部db内，是否意味着高频的io操作？是否有延时写入的手段呢？本文将要阐述的预写式日志Write Ahead Log(WAL),正是对此的优化。</p>
<span id="more"></span>

<h2 id="Write-Ahead-Log概述"><a href="#Write-Ahead-Log概述" class="headerlink" title="Write Ahead Log概述"></a>Write Ahead Log概述</h2><p>Write Ahead Log简称WAL，在分布式存储系统中的元数据更新中应用得十分广泛。WAL的主要意思是说在将元数据的变更操作写入到持久稳定的db之前，先预先写入到一个log中，然后再由另外的操作将log apply到外部的持久db里去。这种模式会减少掉每次的db写入操作，尤其当系统要处理大量的transaction操作的时候，WAL的方式相比较于实时同步db的方式有着更高的效率。</p>
<p>WAL还有一点很重要的帮助是可以在disaster recovery过程中起到状态恢复的作用，系统在load完元数据db后，再把未来得及提交的WAL apply进来，就能恢复成和之前最终一致的状态。</p>
<h2 id="WAL的执行机理"><a href="#WAL的执行机理" class="headerlink" title="WAL的执行机理"></a>WAL的执行机理</h2><p>上面只介绍了WAL的概述内容，本小节我们来深入了解WAL的内部执行细节。</p>
<p>首先我们要搞清楚一点的是，WAL不记录元数据的本身，而是变更的record。那么何为”变更的record“？一个删除操作记录，一个添加记录，至于每个记录会包含有什么信息呢，大家可以参考audit log的内容属性。不过WAL的log格式和audit log还是有所区别的。</p>
<p>追本溯源，对于WAL来说，它是被谁写入的呢？答案是WAL buffer，当这个buffer满了的时候或者人工触发flush动作时，它就会将transaction数据写出到WAL的log内。当然，系统在每次完成一个操作时，同时会将改动应用到memory和WAL buffer内，然后自己再控制buffer flush出去的逻辑。</p>
<p>当老的WAL已经被apply进元数据db之后，我们会用更新commitId来表明当前最新的transaction，理论上来说低于这个commitId的WAL已经可以被清除purge出去了。这个过程我们可以理解为checkpoint过程，当前db+WAL变更=新的db。</p>
<p>上述WAL细节过程如下图:</p>
<p><img data-src="WAL/image-20210520142356234.png" alt="image-20210520142356234"></p>
<h2 id="WAL-apply的控制"><a href="#WAL-apply的控制" class="headerlink" title="WAL apply的控制"></a>WAL apply的控制</h2><p>在系统做disaster recovery中，对于WAL的应用过程，有时可能会出现应用出差的情况，包括一些局部WAL记录格式写异常的情况。这个时候用户可以选择是否中断WAL的apply过程或者是忽略异常，来完成尽可能的数据状态恢复。这些都是WAL内部的细节控制。</p>
<p>以上就是本文主要阐述的关于WAL的内容了。<br>#引用<br>[1].<a href="https://pgadminedb.readthedocs.io/en/latest/module_02/">https://pgadminedb.readthedocs.io/en/latest/module_02/</a></p>
]]></content>
      <categories>
        <category>分布式系统</category>
      </categories>
      <tags>
        <tag>WAL</tag>
      </tags>
  </entry>
  <entry>
    <title>安装php7.3.5</title>
    <url>//post/centos-php7.3.5.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作需要使用php7.3.5做报表系统<br>本文采用编译安装</p>
<span id="more"></span>
<p>1、先安装依赖包</p>
<pre class="line-numbers language-none"><code class="language-none">yum -y install epel-release libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel ncurses curl gdbm-devel db4-devel libXpm-devel libX11-devel gd-devel gmp-devel expat-devel xmlrpc-c xmlrpc-c-devel libicu-devel libmcrypt-devel libmemcached-devel libzip gcc-c++ sqlite-devel  oniguruma oniguruma-devel autoconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、开始编译</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;configure \
--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php \
--exec-prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php \
--bindir&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin \
--sbindir&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;sbin \
--includedir&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;include \
--libdir&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;lib&#x2F;php \
--mandir&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;php&#x2F;man \
--with-config-file-path&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;etc \
--with-mhash \
--with-openssl \
--with-mysqli&#x3D;shared,mysqlnd \
--with-pdo-mysql&#x3D;shared,mysqlnd \
--with-gd \
--with-iconv \
--with-zlib \
--enable-zip \
--enable-inline-optimization \
--disable-debug \
--disable-rpath \
--enable-shared \
--enable-xml \
--enable-redis\
--enable-bcmath \
--enable-shmop \
--enable-sysvsem \
--enable-mbregex \
--enable-mbstring \
--enable-ftp \
--enable-pcntl \
--enable-calendar \
--enable-exif \
--enable-sockets \
--with-xmlrpc \
--with-libxml-dir \
--enable-soap \
--without-pear \
--with-gettext \
--enable-session \
--with-curl \
--with-jpeg-dir \
--with-png-dir \
--with-freetype-dir \
--with-bz2 \
--enable-opcache \
--enable-fpm \
--with-fpm-user&#x3D;nginx \
--with-fpm-group&#x3D;nginx \
--without-gdbm \
--enable-fast-install \
--disable-fileinfo

make &amp;&amp; make install <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加配置文件</p>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc
cp php-fpm.conf.default php-fpm.conf
cd &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d
cp www.conf.default www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查找当前php使用ini的位置</p>
<pre class="line-numbers language-none"><code class="language-none">php --ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>添加配置文件</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;usr&#x2F;local&#x2F;php&#x2F;conf
vim php.ini
[PHP]
engine &#x3D; On
short_open_tag &#x3D; Off
precision &#x3D; 14
output_buffering &#x3D; 4096
zlib.output_compression &#x3D; Off
implicit_flush &#x3D; Off
unserialize_callback_func &#x3D;
serialize_precision &#x3D; -1
disable_functions &#x3D;
disable_classes &#x3D;
zend.enable_gc &#x3D; On
zend.exception_ignore_args &#x3D; Off
expose_php &#x3D; On
max_execution_time &#x3D; 30
max_input_time &#x3D; 60
memory_limit &#x3D; 128M
error_reporting &#x3D; E_ALL
display_errors &#x3D; On
display_startup_errors &#x3D; On
log_errors &#x3D; On
log_errors_max_len &#x3D; 1024
ignore_repeated_errors &#x3D; Off
ignore_repeated_source &#x3D; Off
report_memleaks &#x3D; On
variables_order &#x3D; &quot;GPCS&quot;
request_order &#x3D; &quot;GP&quot;
register_argc_argv &#x3D; Off
auto_globals_jit &#x3D; On
post_max_size &#x3D; 8M
auto_prepend_file &#x3D;
auto_append_file &#x3D;
default_mimetype &#x3D; &quot;text&#x2F;html&quot;
default_charset &#x3D; &quot;UTF-8&quot;
doc_root &#x3D;
user_dir &#x3D;
enable_dl &#x3D; Off
file_uploads &#x3D; On
upload_max_filesize &#x3D; 2M
max_file_uploads &#x3D; 20
allow_url_fopen &#x3D; On
allow_url_include &#x3D; Off
default_socket_timeout &#x3D; 60
extension&#x3D;ldap
[CLI Server]
cli_server.color &#x3D; On
[Date]
[filter]
[iconv]
[imap]
[intl]
[sqlite3]
[Pcre]
[Pdo]
[Pdo_mysql]
pdo_mysql.default_socket&#x3D;
[Phar]
[mail function]
SMTP &#x3D; localhost
smtp_port &#x3D; 25
mail.add_x_header &#x3D; Off
[ODBC]
odbc.allow_persistent &#x3D; On
odbc.check_persistent &#x3D; On
odbc.max_persistent &#x3D; -1
odbc.max_links &#x3D; -1
odbc.defaultlrl &#x3D; 4096
odbc.defaultbinmode &#x3D; 1
[MySQLi]
mysqli.max_persistent &#x3D; -1
mysqli.allow_persistent &#x3D; On
mysqli.max_links &#x3D; -1
mysqli.default_port &#x3D; 3306
mysqli.default_socket &#x3D;
mysqli.default_host &#x3D;
mysqli.default_user &#x3D;
mysqli.default_pw &#x3D;
mysqli.reconnect &#x3D; Off
[mysqlnd]
mysqlnd.collect_statistics &#x3D; On
mysqlnd.collect_memory_statistics &#x3D; On
[OCI8]
[PostgreSQL]
pgsql.allow_persistent &#x3D; On
pgsql.auto_reset_persistent &#x3D; Off
pgsql.max_persistent &#x3D; -1
pgsql.max_links &#x3D; -1
pgsql.ignore_notice &#x3D; 0
pgsql.log_notice &#x3D; 0
[bcmath]
bcmath.scale &#x3D; 0
[browscap]
[Session]
session.save_handler &#x3D; files
session.use_strict_mode &#x3D; 0
session.use_cookies &#x3D; 1
session.use_only_cookies &#x3D; 1
session.name &#x3D; PHPSESSID
session.auto_start &#x3D; 0
session.cookie_lifetime &#x3D; 0
session.cookie_path &#x3D; &#x2F;
session.cookie_domain &#x3D;
session.cookie_httponly &#x3D;
session.cookie_samesite &#x3D;
session.serialize_handler &#x3D; php
session.gc_probability &#x3D; 1
session.gc_divisor &#x3D; 1000
session.gc_maxlifetime &#x3D; 1440
session.referer_check &#x3D;
session.cache_limiter &#x3D; nocache
session.cache_expire &#x3D; 180
session.use_trans_sid &#x3D; 0
session.sid_length &#x3D; 26
session.trans_sid_tags &#x3D; &quot;a&#x3D;href,area&#x3D;href,frame&#x3D;src,form&#x3D;&quot;
session.sid_bits_per_character &#x3D; 5
[Assertion]
zend.assertions &#x3D; 1
[COM]
[mbstring]
[gd]
[exif]
[Tidy]
tidy.clean_output &#x3D; Off
[soap]
soap.wsdl_cache_enabled&#x3D;1
soap.wsdl_cache_dir&#x3D;&quot;&#x2F;tmp&quot;
soap.wsdl_cache_ttl&#x3D;86400
soap.wsdl_cache_limit &#x3D; 5
[sysvshm]
[ldap]
ldap.max_links &#x3D; -1
[dba]
[opcache]
[curl]
[openssl]
[ffi]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装php-redis</p>
<pre class="line-numbers language-none"><code class="language-none">tar -zxvf owlient-phpredis-2.1.1-1-g90ecd17.tar.gz
cd owlient-phpredis-90ecd17
&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;phpize
.&#x2F;configure --with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php-config
make &amp;&amp; make install
cd &#x2F;usr&#x2F;local&#x2F;php&#x2F;&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20060613&#x2F;
vim php.ini
extension_dir &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;php&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20060613&#x2F;&quot;
extension &#x3D; redis.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装php-grpc</p>
<pre class="line-numbers language-none"><code class="language-none">wget http:&#x2F;&#x2F;pecl.php.net&#x2F;get&#x2F;grpc-1.20.0.tgz
tar -xzvf grpc-1.20.0.tgz
cd grpc-1.20.0
&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;phpize
.&#x2F;configure --with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php-config 
make &amp;&amp; make install
vim php.ini
extension &#x3D; redis.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos7 php</tag>
      </tags>
  </entry>
  <entry>
    <title>du</title>
    <url>//post/du-md.html</url>
    <content><![CDATA[<h1 id="du"><a href="#du" class="headerlink" title="du"></a>du</h1><p>du(Disk Usage) - 报告磁盘空间使用情况</p>
<span id="more"></span>
<pre class="line-numbers language-none"><code class="language-none">-a, --all
    显示对所有文件的统计，而不只是包含子目录。
-b, --bytes
    输出以字节为单位的大小，替代缺省时1024字节的计数单位。
--block-size&#x3D;size
    输出以块为单位的大小，块的大小为 size 字节。( file- utils-4.0 的新选项)
-c, --total
    在处理完所有参数后给出所有这些参数的总计。这个选项被 用给出指定的一组文件或目录使用的空间的总和。
-D, --dereference-args
    引用命令行参数的符号连接。但不影响其他的符号连接。 这对找出象 &#x2F;usr&#x2F;tmp 这样的目录的磁盘使用量有用， &#x2F;usr&#x2F;tmp 等通常是符号连接。 译住：例如在 &#x2F;var&#x2F;tmp 下建立一个目录test, 而&#x2F;usr&#x2F;tmp 是指向 &#x2F;var&#x2F;tmp 的符号连接。du &#x2F;usr&#x2F;tmp 返回一项 &#x2F;usr&#x2F;tmp , 而 du - D &#x2F;usr&#x2F;tmp 返回两项 &#x2F;usr&#x2F;tmp，&#x2F;usr&#x2F;tmp&#x2F;test。
--exclude&#x3D;pattern
    在递归时，忽略与指定模式相匹配的文件或子目录。模式 可以是任何 Bourne shell 的文件 glob 模式。( file- utils-4.0 的新选项)
-h, --human-readable
    为每个数附加一个表示大小单位的字母，象用M表示二进制 的兆字节。
-H, --si
    与 -h 参数起同样的作用，只是使用法定的 SI 单位( 用 1000的幂而不是 1024 的幂，这样 M 代表的就是1000000 而不是 1048576)。(fileutils-4.0 的新选项)
-k, --kilobytes
    输出以1024字节为计数单位的大小。
-l, --count-links
    统计所有文件的大小，包括已经被统计过的(作为一个硬连接)。
-L, --dereference
    引用符号连接(不是显示连接点本身而是连接指向的文件或 目录所使用的磁盘空间)。
-m, --megabytes
    输出以兆字节的块为计数单位的大小(就是 1,048,576 字节)。
--max-depth&#x3D;n
    只输出命令行参数的小于等于第 n 层的目录的总计。 --max-depth&#x3D;0的作用同于-s选项。(fileutils-4.0的新选项)
-s, --summarize
    对每个参数只显示总和。
-S, --separate-dirs
    单独报告每一个目录的大小，不包括子目录的大小。
-x, --one-file-system
    忽略与被处理的参数不在同一个文件系统的目录。
-X file, --exclude-from&#x3D;file
    除了从指定的文件中得到模式之外与 --exclude 一样。 模式以行的形式列出。如果指定的文件是&#39;-&#39;,那么从标准输 入中读出模式。(fileutils-4.0 的新选项) GNU 标准选项
--help
    在标准输出上输出帮助信息后正常退出。
--version
    在标准输出上输出版本信息后正常退出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>统计当前目录下，第一层的文件大小</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">du -ah --max-depth&#x3D;1 .&#x2F;cdn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>统计当前目录大小，并安大小排序</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">du -sm * | sort -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>按大小排序目录(查看文件目录大小)</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">du -h --time --max-depth&#x3D;1 | sort -hr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>列出当前目录中的目录名不包括xyz字符串的目录的大小</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">du -h --exclude&#x3D;&#39;*xyz*&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>显示几个文件或目录各自占用磁盘空间的大小，并统计它们的总和</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">du -c log30.tar.gz log31.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>查看各文件夹大小命令</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">du -h --max-depth&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mac使用crt异常报错</title>
    <url>//post/mac-crt.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚刚升级完mac系统：macOS Catalina，使用CRT就有报错，但是不影响我们使用，只是每次启动都会报错，很烦人。</p>
<p>报错内容是The permissions on the “/cores” directory need to be changed to include write permission for “other”。</p>
<span id="more"></span>

<p>Please execute (or ask an admin to execute) the following from a terminal window:</p>
<p>sudo chmod o+w /cores</p>
<p>You can change this behavior by setting the “Create Core Files” parameter in your “Global.ini” to 0.</p>
<img data-src="../img/image-20210520160622429.png" alt="报错截图" style="zoom:50%;">

<p>见证一下mac系统</p>
<img data-src="../img/image-20210520160642626.png" alt="mac截图" style="zoom:50%;">

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>根据提示执行：</p>
<p>查看下我们本机的 cores 目录权限</p>
<pre class="line-numbers language-none"><code class="language-none">ls -l &#x2F;
...
drwxr-xr-x    2 root  wheel    64 12  14 2019 cores
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>发现缺少写权限，所以执行</p>
<pre class="line-numbers language-none"><code class="language-none">sudo chmod o+w &#x2F;cores
Password:
ls -l &#x2F;
...
drwxr-xrwx    2 root  wheel    64 12  14 2019 cores
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>然后再去启动CRT就正常了。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx禁止外部访问到隐藏文件（.git或.env）</title>
    <url>//post/nginx-deny-git.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安全部门说线上有域名可以直接下载到.env文件，这类文件中是有数据库等账号信息，所以需要隐藏掉</p>
<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在server的配置中，加上以下这段，重新reload即可</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">location ~ &#x2F;\. &#123;
        deny all;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>php进程不及时释放进程导致CPU跑满</title>
    <url>//post/php-cpu.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>公司一台服务器安装了php，很稳定的跑了3年，突然有一天CPU报警，排查为php-fpm进程CPU利用率为100%，遂排查原因</p>
<span id="more"></span>
<h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>php-fpm进程不但占用内存，也会占用cpu。实际服务器运行观察中，我们可能经常发现这种现象，内存占用很少，cpu却跑满了，导致运行堵塞。当然，出现这种情况的原因可能有多种，一种原因就是php进程没有得到及时释放。</p>
<p>对于这种情况，可以设置最大请求数max_requests，即当一个 PHP-CGI 进程处理的请求数累积到 max_requests 个后，则自动重启该进程，这样达到了释放内存的目的了，当然cpu占用也同步降低了。</p>
<p>以4G内存服务器为例进行设置，加入FPM配置文件：<br>pm.max_requests = 128<br>pm.max_children = 20 #表示 php-fpm 能启动的子进程的最大数量<br>当然，以上数值应该根据需要测试调整。</p>
<p>以上参数可以参考这个文章 <a href="http://localhost:4000/2021/06/01/php-fpm-conf/">php-fpm的配置文件详解</a></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php-fpm配置文件详解</title>
    <url>//post/php-fpm-conf.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>php一直都搞不懂，今天彻底把php-fpm的配置文件解释一下</p>
<span id="more"></span>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><pre class="line-numbers language-none"><code class="language-none">[www]
user &#x3D; www
group &#x3D; www

;listen &#x3D; 127.0.0.1:9000
listen.owner &#x3D; www
listen.group &#x3D; www
listen.mode &#x3D; 0660
listen &#x3D; &#x2F;dev&#x2F;shm&#x2F;php-fpm.sock
listen.allowed_clients &#x3D; 127.0.0.1

;pm &#x3D; static
pm &#x3D; dynamic

pm.max_children &#x3D; 40
pm.start_servers &#x3D; 20
pm.min_spare_servers &#x3D; 20
pm.max_spare_servers &#x3D; 40
pm.max_requests &#x3D; 128
;pm.max_requests &#x3D; 500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p>1、pm = dynamic 或 pm = static 表示使用哪种进程数量管理方式，dynamic表示php-fpm进程数是动态的，最开始是pm.start_servers指定的数量，如果请求较多，则会自动增加，保证空闲的进程数不小于pm.min_spare_servers，如果进程数较多，也会进行相应清理，保证多余的进程数不多于pm.max_spare_servers；</p>
<p>2、pm.max_children：静态方式下开启的php-fpm进程数量，在动态方式下他限定php-fpm的最大进程数(<font color="red">这里要注意pm.max_spare_servers的值只能小于等于pm.max_children</font>）<br>pm.start_servers：动态方式下的起始php-fpm进程数量。<br>pm.min_spare_servers：动态方式空闲状态下的最小php-fpm进程数量。<br>pm.max_spare_servers：动态方式空闲状态下的最大php-fpm进程数量。</p>
<p>区别：</p>
<p>如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。</p>
<p>如果dm设置为dynamic，那么pm.max_children参数失效，后面3个参数生效。系统会在php-fpm运行开始的时候启动pm.start_servers个php-fpm进程，然后根据系统的需求动态在pm.min_spare_servers和pm.max_spare_servers之间调整php-fpm进程数。</p>
<p>设置：</p>
<p>数值设置，参考自己的实际硬件配置，可以参考 总内存/30M 来计算。</p>
<h1 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h1><p>如何判断我选择“pm = dynamic”还是“pm = static”呢？哪一种更好呢？</p>
<p>事实上，跟Apache一样，运行的PHP程序在执行完成后，或多或少会有内存泄露的问题。</p>
<p>这也是为什么开始的时候一个php-fpm进程只占用3M左右内存，运行一段时间后就会上升到20-30M的原因了。</p>
<p>对于内存大的服务器（比如8G以上）来说，用静态的max_children实际上更为妥当，因为这样不需要进行额外的进程数目控制，会提高效率。因为频繁开关php-fpm进程也会有时滞，所以内存够大的情况下开静态效果会更好。数量也可以根据 总内存/30M 得到，比如8GB内存可以设置为100，那么php-fpm耗费的内存就能控制在 2G-3G的样子。</p>
<p>如果内存稍微小点，比如1~2G，那么指定静态的进程数量更加有利于服务器的稳定。这样可以保证php-fpm只获取够用的内存，将不多的内存分配给其他应用去使用，会使系统的运行更加畅通。</p>
<p>对于小内存的服务器来说，比如256M内存的VPS，即使按照一个20M的内存量来算，10个php-cgi进程就将耗掉200M内存，那系统的崩溃就应该很正常了。</p>
<p>因此应该尽量地控制php-fpm进程的数量，大体明确其他应用占用的内存后，给它指定一个静态的小数量，会让系统更加平稳一些。</p>
<p>或者使用动态方式，因为动态方式会结束掉多余的进程，可以回收释放一些内存，所以推荐在内存较少的服务器或VPS上使用，具体最大数量根据 总内存/20M 得到。</p>
<p>比如说512M的VPS，建议pm.max_spare_servers设置为20。至于pm.min_spare_servers，则建议根据服务器的负载情况来设置，比较合适的值在5~10之间。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结：内存小的建议用动态（pm = dynamic），内存大的建议用静态（pm = static）</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>swap分区介绍</title>
    <url>//post/swap.html</url>
    <content><![CDATA[<h2 id="wap交换分区概念"><a href="#wap交换分区概念" class="headerlink" title="wap交换分区概念"></a>wap交换分区概念</h2><p>什么是Linux swap space呢？我们先来看看下面两段关于Linux swap space的英文介绍资料:</p>
<p>Linux divides its physical RAM (random access memory) into chucks of memory called pages. Swapping is the process whereby a page of memory is copied to the preconfigured space on the hard disk, called swap space, to free up that page of memory. The combined sizes of the physical memory and the swap space is the amount of virtual memory available.</p>
<p>Swap space in Linux is used when the amount of physical memory (RAM) is full. If the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space. While swap space can help machines with a small amount of RAM, it should not be considered a replacement for more RAM. Swap space is located on hard drives, which have a slower access time than physical memory.Swap space can be a dedicated swap partition (recommended), a swap file, or a combination of swap partitions and swap files.</p>
<span id="more"></span>
<p>Linux内核为了提高读写效率与速度，会将文件在内存中进行缓存，这部分内存就是 Cache Memory（缓存内存）。即使你的程序运行结束后，Cache Memory 也不会自动释放。这就会导致你在Linux系统中程序频繁读写文件后，你会发现可用物理内存变少。当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到swap空间中，等到那些程序要运行时，再从 swap 分区中恢复保存的数据到内存中。这样，系统在物理内存不够时，才进行 swap 交换。</p>
<p>关于 swap 分区，其实我们有很多疑问,如果能弄清楚这些疑问，那么你对 swap 的了解掌握就差不多了。如何查看 swap 分区大小？ swap 分区大小应该如何设置？系统在什么时候会使用 swap 分区? 是否可以调整？ 如何调整 swap 分区的大小？ swap 分区有什么优劣和要注意的地方？ swap 分区是否必要？那么我一个一个来看看这些疑问吧！</p>
<h2 id="查看swap分区大小"><a href="#查看swap分区大小" class="headerlink" title="查看swap分区大小"></a>查看swap分区大小</h2><p>查看swap分区的大小以及使用情况，一般使用free -m命令即可，如下所示，swap大小为2015M，目前没有使用swap分区<img data-src="../img/image-20210520144425159.png" alt="未使用swap"></p>
<h2 id="wap分区大小设置"><a href="#wap分区大小设置" class="headerlink" title="wap分区大小设置"></a><strong>wap分区大小设置</strong></h2><p>系统的swap分区大小设置多大才是最优呢？ 关于这个问题，应该说只能有一个统一的参考标准，具体还应该根据系统实际情况和内存的负荷综合考虑，像ORACLE的官方文档就推荐如下设置，这个是根据物理内存来做参考的。</p>
<p><img data-src="../img/image-20210520144633150.png" alt="image-20210520144633150"></p>
<p>另外在其它博客中看到下面一个推荐设置，当然我不清楚其怎么得到这个标准的。是否合理也无从考证。可以作为一个参考。</p>
<p>4G以内的物理内存，SWAP 设置为内存的2倍。</p>
<p>4-8G的物理内存，swap 等于内存大小。</p>
<p>8-64G 的物理内存，swap 设置为8G。</p>
<p>64-256G物理内存，swap 设置为16G。</p>
<p>上下两个标准确实也很让人无所适从。我就有一次在一台ORACLE数据库服务器（64G的RAM），按照官方推荐设置了一个很大的swap分区，但是我发现其实这个swap几乎很少用到，其实是浪费了磁盘空间。所以如果根据系统实际情况和内存的负荷综合考虑，其实应该按照第二个参考标准设置为8G即可。当然这个只是个人的一些认知。</p>
<h2 id="释放swap分区空间"><a href="#释放swap分区空间" class="headerlink" title="释放swap分区空间"></a><strong>释放swap分区空间</strong></h2><p>查看swap分区位置</p>
<p><img data-src="../img/image-20210520144815788.png" alt="image-20210520144815788"></p>
<p>用swapoff关闭交换分区</p>
<p><code>swapoff /dev/mapper/VolGroup00-LogVol01</code></p>
<p>使用swapon启用交换分区**，此时查看交换分区的使用情况，你会发现used为0了</p>
<p><img data-src="../img/image-20210520144920381.png" alt="image-20210520144920381"></p>
<h2 id="Swap分区空间什么时候使用"><a href="#Swap分区空间什么时候使用" class="headerlink" title="Swap分区空间什么时候使用"></a>Swap分区空间什么时候使用</h2><p>系统在什么情况或条件下才会使用swap分区的空间呢？ 其实是Linux通过一个参数swappiness来控制的。当然还涉及到复杂的算法。</p>
<p>这个参数值可为 0-100，控制系统 swap 的使用程度。高数值可优先系统性能，在进程不活跃时主动将其转换出物理内存。低数值可优先互动性并尽量避免将进程转换处物理内存，并降低反应延迟。默认值为 60。注意：这个只是一个权值，不是一个百分比值，涉及到系统内核复杂的算法。下面是关于swappiness的相关资料：</p>
<p>The Linux 2.6 kernel added a new kernel parameter called swappiness to let administrators tweak the way Linux swaps. It is a number from 0 to 100. In essence, higher values lead to more pages being swapped, and lower values lead to more applications being kept in memory, even if they are idle. Kernel maintainer Andrew Morton has said that he runs his desktop machines with a swappiness of 100, stating that “My point is that decreasing the tendency of the kernel to swap stuff out is wrong. You really don’t want hundreds of megabytes of BloatyApp’s untouched memory floating about in the machine. Get it out on the disk, use the memory for something useful.”</p>
<p>Swappiness is a property of the Linux kernel that changes the balance between swapping out runtime memory, as opposed to dropping pages from the system page cache. Swappiness can be set to values between 0 and 100 inclusive. A low value means the kernel will try to avoid swapping as much as possible where a higher value instead will make the kernel aggressively try to use swap space. The default value is 60, and for most desktop systems, setting it to 100 may affect the overall performance, whereas setting it lower (even 0) may improve interactivity (by decreasing response latency.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下设置swappiness参数来配置内存使用到多少才开始使用swap分区</title>
    <url>//post/swappiness.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>阿里云 ECS的 CPU 使用率有时候到100%，top 命令查看进程发现是 kswapd0 进程占 cpu 达到70%。</p>
<span id="more"></span>

<p>swap分区的作用是当物理内存不足时，会将一部分硬盘当做虚拟内存来使用。</p>
<p>kswapd0 占用过高是因为 物理内存不足，使用swap分区与内存换页操作交换数据，导致CPU占用过高。<br>swap分区的介绍可以看这个文章：<a href="https://running-dpf.github.io/2021/05/20/swap/">swap分区</a></p>
<h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><p>swappiness的值的大小对如何使用swap分区是有着很大的联系的。swappiness=0的时候表示最大限度使用物理内存，然后才是swap空间，swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。linux的基本默认设置为60，具体如下：</p>
<pre class="line-numbers language-none"><code class="language-none">cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness
#60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>也就是说，你的内存在使用到 100-60=40% 的时候，就开始出现有交换分区的使用。大家知道，内存的速度会比磁盘快很多，这样子会加大系统IO，同时造的成大量页的换进换出，严重影响系统的性能，所以我们在操作系统层面，要尽可能使用内存，对该参数进行调整。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>临时调整的方法如下，我们调成10：</p>
<pre class="line-numbers language-none"><code class="language-none">sysctl vm.swappiness&#x3D;10
#vm.swappiness&#x3D;10
cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness
#10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这只是临时调整的方法，重启后会回到默认设置的.</p>
<p>要想永久调整的话，需要在/etc/sysctl.conf修改，加上：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>加上</p>
<pre class="line-numbers language-none"><code class="language-none"># Controls the maximum number of shared memory segments, in pages
kernel.shmall &#x3D; 4294967296 #这一个可以不用设置
vm.swappiness &#x3D; 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p> 生效</p>
<pre class="line-numbers language-none"><code class="language-none">sudo sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样便完成修改设置！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>wireshark合并多个pacp文件</title>
    <url>//post/wireshark-merge.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当出现网络问题的时候，可能会抓很多个pcap包，当分析的时候时间点很不容易查找，所以要将多个pcap包合并为一个，方便我们运维人员查找</p>
<span id="more"></span>

<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>macos命令</p>
<p>cd /Applications/Wireshark.app/Contents/MacOS</p>
<p>./mergecap -w ~/Downloads/compare.pcap ~/Downloads/*.pcap</p>
<p>这样，我们在Downloads文件夹能看到一个compare.pcap的文件，这就是整合的pacp文件</p>
]]></content>
      <categories>
        <category>wireshark 网络</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>WAN</title>
    <url>//post/WAN.html</url>
    <content><![CDATA[<p><strong>广域网</strong>（英语：Wide Area Network，缩写为 WAN），又称<strong>外网</strong>、<strong>公网</strong>。是连接不同地区<a href="https://baike.baidu.com/item/%E5%B1%80%E5%9F%9F%E7%BD%91?fromModule=lemma_inlink">局域网</a>或<a href="https://baike.baidu.com/item/%E5%9F%8E%E5%9F%9F%E7%BD%91?fromModule=lemma_inlink">城域网</a>计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</p>
]]></content>
  </entry>
  <entry>
    <title>docker容器使用的资源</title>
    <url>//post/docker-use-source.html</url>
    <content><![CDATA[<h3 id="默认输出"><a href="#默认输出" class="headerlink" title="默认输出"></a>默认输出</h3><p>docker stats 命令用来显示容器使用的系统资源。不带任何选项执行 docker stats 命令：</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p><img data-src="docker-use-source/image-20220926144505621.png" alt="image-20220926144505621"></p>
<p>默认情况下，stats 命令会每隔 1 秒钟刷新一次输出的内容直到你按下 ctrl + c。下面是输出的主要内容：<br>[CONTAINER]：以短格式显示容器的 ID。<br>[NAME]：容器名字。<br>[[CPU %]：CPU 的使用情况。<br>[MEM USAGE / LIMIT]：当前使用的内存和最大可以使用的内存。<br>[MEM %]：以百分比的形式显示内存使用情况。<br>[NET I/O]：网络 I/O 数据。<br>[BLOCK I/O]：磁盘 I/O 数据。<br>[PIDS]：PID 号。</p>
<h3 id="只返回当前的状态"><a href="#只返回当前的状态" class="headerlink" title="只返回当前的状态"></a>只返回当前的状态</h3><p>如果不想持续的监控容器使用资源的情况，可以通过 –no-stream 选项只输出当前的状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats --no-stream<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样输出的结果就不会变化了，看起来省劲不少。</p>
<h3 id="只输出指定的容器"><a href="#只输出指定的容器" class="headerlink" title="只输出指定的容器"></a>只输出指定的容器</h3><p>如果我们只想查看个别容器的资源使用情况，可以为 docker stats 命令显式的指定目标容器的名称或者是 ID：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats --no-stream b772f7b9b058<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img data-src="docker-use-source/image-20220926145442492.png" alt="image-20220926145442492"></p>
<h3 id="格式化输出的结果"><a href="#格式化输出的结果" class="headerlink" title="格式化输出的结果"></a>格式化输出的结果</h3><p>docker stats 命令支持我们通过 –format 选项自定义输出的内容和格式：</p>
<pre class="line-numbers language-none"><code class="language-none">docker stats --format &quot;table &#123;&#123;.Name&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img data-src="docker-use-source/image-20220926145658398.png" alt="image-20220926145658398"></p>
<p>上面的命令中我们只输出了 Name, CPUPerc 和 Memusage 三列。下面是自定义的格式中可以使用的所有占位符：</p>
<p> 根据用户指定的名称显示容器的名称或 ID。<br>.Name           容器名称。<br>.ID                 容器 ID。<br>.CPUPerc       CPU 使用率。<br>.MemUsage  内存使用量。<br>.NetIO           网络 I/O。<br>.BlockIO        磁盘 I/O。<br>.MemPerc     内存使用率。<br>.PIDs             PID 号。</p>
<p>有了这些信息我们就可以完全按照自己的需求或者是偏好来控制 docker stats 命令输出的内容了。</p>
<p>除了以 table 格式输出结果，还可以通过 format 选项输出 json 格式的结果：</p>
<pre class="line-numbers language-none"><code class="language-none">docker stats --no-stream --format \
    &quot;&#123;\&quot;container\&quot;:\&quot;&#123;&#123; .Container &#125;&#125;\&quot;,\&quot;memory\&quot;:&#123;\&quot;raw\&quot;:\&quot;&#123;&#123; .MemUsage &#125;&#125;\&quot;,\&quot;percent\&quot;:\&quot;&#123;&#123; .MemPerc &#125;&#125;\&quot;&#125;,\&quot;cpu\&quot;:\&quot;&#123;&#123; .CPUPerc &#125;&#125;\&quot;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 docker stats 命令我们可以看到容器使用系统资源的情况。这为我们进一步的约束容器可用资源或者是调查与资源相关的问题提供了依据。除了 docker 自带的命令，像 glances 等工具也已经支持查看容器使用的资源情况了。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>mtr</title>
    <url>//post/mtr.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一般情况，我们使用ping，traceroute，nslookup测试网络的连通性，今天我们介绍一个Linux下判断网络连通性的工具：mtr，mtr的全称：my traceroute，是一个集ping和traceroute功能的网络诊断工具。</p>
<span id="more"></span>

<h3 id="MTR基本原理"><a href="#MTR基本原理" class="headerlink" title="MTR基本原理"></a>MTR基本原理</h3><p>ping、traceroute、mtr都可以使用“ICMP” 包来测试 网络中两点之间的网络连接状况。当使用 ping 命令 ping 网络上的主机后， ICMP 包将会发送到目的主机，然后在目的主机返回响应。这样，就可以得知本机到目的主机 ICMP 包传输所使用的往返时间。</p>
<p>mtr 相对于 traceroute 命令只会做一次链路跟踪测试，mtr 命令会对链路上的相关节点做持续探测并给出相应的统计信息。所以，mtr命令能避免节点波动对测试结果的影响，所以其测试结果更正确，建议优先使用。</p>
<h3 id="安装mtr"><a href="#安装mtr" class="headerlink" title="安装mtr"></a>安装mtr</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#linux
yum -y install mtr

#macOS
brew install mtr

#alpine
apk add --no-cache mtr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行mtr"><a href="#运行mtr" class="headerlink" title="运行mtr"></a>运行mtr</h3><pre class="line-numbers language-none"><code class="language-none">mtr www.baidu.com
 
# r 参数表示向目标主机发送 10 个 ICMP 数据包，然后输出报告。
# 如果不带参数，则会不间断运行，取消按 q 键退出。
  mtr -r www.baidu.com
  
第一列：HOST，显示IP地址或者主机名。

第二列：Loss%，该Host的丢包率。

第三列：Snt，该Host每秒发送数据包数，默认值是10，可以通过参数“-c”指定。

第四列：Last，该Host的最近一次的延时，单位是毫秒ms。

第五列：Avg，该Host的平均延时，单位是毫秒ms。

第六列：Best，该Host的最低延时，单位是毫秒ms。

第七列：Wrst，该Host的最高延时，单位是毫秒ms。

第八列：StDev，该Host的标准偏差，稳定性的体现。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">另外，也可以在mtr命令运行过程中，输入相应字母来快速切换模式。
？或 h：显示帮助菜单。
d：切换显示模式。
n：切换启用或禁用DNS域名解析。
u：切换使用ICMP或UDP数据包进行探测。
q：退出探测<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="mtr参数详解"><a href="#mtr参数详解" class="headerlink" title="mtr参数详解"></a>mtr参数详解</h3><p>常见可选参数说明:<br>-r 或 -report：以报告模式显示输出，而不是一直运行。<br>-p 或 -split：将每次追踪的结果分别列出来。<br>-s 或 -psize：指定ping数据包的大小。<br>-i：发送数据包的时间间隔，默认为 1 秒，小于 1 秒需要 sudo 提权运行<br>-n 或 -no-dns：参数禁用反向 DNS 查找，这样就会始终显示 IP。<br>-c ：指定发送数据包的数量，例如发送 20 个数据包（发送数据包后会自动退出，因此可不必添加 r 参数）。<br>-a 或 -address：设置发送数据包的IP地址。用于主机有多个IP时。<br>-u：发送 UDP 数据包探测而非默认 ICMP ECHO 数据包。<br>-4：只使用IPv4协议。<br>-6：只使用IPv6协议。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
