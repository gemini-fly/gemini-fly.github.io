<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nayaur&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/3d942ec2e3778107ccc80fb56434e192</icon>
  <subtitle>我走的很慢，但我从不后退</subtitle>
  <link href="https://running-dpf.github.io/atom.xml" rel="self"/>
  
  <link href="https://running-dpf.github.io/"/>
  <updated>2022-09-29T11:03:31.617Z</updated>
  <id>https://running-dpf.github.io/</id>
  
  <author>
    <name>岩羊</name>
    <email>please_dpf@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mtr</title>
    <link href="https://running-dpf.github.io/post/mtr.html"/>
    <id>https://running-dpf.github.io/post/mtr.html</id>
    <published>2022-09-26T07:21:21.000Z</published>
    <updated>2022-09-29T11:03:31.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一般情况，我们使用ping，traceroute，nslookup测试网络的连通性，今天我们介绍一个Linux下判断网络连通性的工具：mtr，mtr的全称：my traceroute，是一个集ping和traceroute功能的网络诊断工具。</p><span id="more"></span><h3 id="MTR基本原理"><a href="#MTR基本原理" class="headerlink" title="MTR基本原理"></a>MTR基本原理</h3><p>ping、traceroute、mtr都可以使用“ICMP” 包来测试 网络中两点之间的网络连接状况。当使用 ping 命令 ping 网络上的主机后， ICMP 包将会发送到目的主机，然后在目的主机返回响应。这样，就可以得知本机到目的主机 ICMP 包传输所使用的往返时间。</p><p>mtr 相对于 traceroute 命令只会做一次链路跟踪测试，mtr 命令会对链路上的相关节点做持续探测并给出相应的统计信息。所以，mtr命令能避免节点波动对测试结果的影响，所以其测试结果更正确，建议优先使用。</p><h3 id="安装mtr"><a href="#安装mtr" class="headerlink" title="安装mtr"></a>安装mtr</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#linuxyum -y install mtr#macOSbrew install mtr#alpineapk add --no-cache mtr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行mtr"><a href="#运行mtr" class="headerlink" title="运行mtr"></a>运行mtr</h3><pre class="line-numbers language-none"><code class="language-none">mtr www.baidu.com # r 参数表示向目标主机发送 10 个 ICMP 数据包，然后输出报告。# 如果不带参数，则会不间断运行，取消按 q 键退出。  mtr -r www.baidu.com  第一列：HOST，显示IP地址或者主机名。第二列：Loss%，该Host的丢包率。第三列：Snt，该Host每秒发送数据包数，默认值是10，可以通过参数“-c”指定。第四列：Last，该Host的最近一次的延时，单位是毫秒ms。第五列：Avg，该Host的平均延时，单位是毫秒ms。第六列：Best，该Host的最低延时，单位是毫秒ms。第七列：Wrst，该Host的最高延时，单位是毫秒ms。第八列：StDev，该Host的标准偏差，稳定性的体现。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">另外，也可以在mtr命令运行过程中，输入相应字母来快速切换模式。？或 h：显示帮助菜单。d：切换显示模式。n：切换启用或禁用DNS域名解析。u：切换使用ICMP或UDP数据包进行探测。q：退出探测<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mtr参数详解"><a href="#mtr参数详解" class="headerlink" title="mtr参数详解"></a>mtr参数详解</h3><p>常见可选参数说明:<br>-r 或 -report：以报告模式显示输出，而不是一直运行。<br>-p 或 -split：将每次追踪的结果分别列出来。<br>-s 或 -psize：指定ping数据包的大小。<br>-i：发送数据包的时间间隔，默认为 1 秒，小于 1 秒需要 sudo 提权运行<br>-n 或 -no-dns：参数禁用反向 DNS 查找，这样就会始终显示 IP。<br>-c ：指定发送数据包的数量，例如发送 20 个数据包（发送数据包后会自动退出，因此可不必添加 r 参数）。<br>-a 或 -address：设置发送数据包的IP地址。用于主机有多个IP时。<br>-u：发送 UDP 数据包探测而非默认 ICMP ECHO 数据包。<br>-4：只使用IPv4协议。<br>-6：只使用IPv6协议。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;一般情况，我们使用ping，traceroute，nslookup测试网络的连通性，今天我们介绍一个Linux下判断网络连通性的工具：mtr，mtr的全称：my traceroute，是一个集ping和traceroute功能的网络诊断工具。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://running-dpf.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://running-dpf.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>docker容器使用的资源</title>
    <link href="https://running-dpf.github.io/post/docker-use-source.html"/>
    <id>https://running-dpf.github.io/post/docker-use-source.html</id>
    <published>2022-09-26T06:37:47.000Z</published>
    <updated>2022-09-29T11:03:31.616Z</updated>
    
    <content type="html"><![CDATA[<h3 id="默认输出"><a href="#默认输出" class="headerlink" title="默认输出"></a>默认输出</h3><p>docker stats 命令用来显示容器使用的系统资源。不带任何选项执行 docker stats 命令：</p><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img data-src="docker-use-source/image-20220926144505621.png" alt="image-20220926144505621"></p><p>默认情况下，stats 命令会每隔 1 秒钟刷新一次输出的内容直到你按下 ctrl + c。下面是输出的主要内容：<br>[CONTAINER]：以短格式显示容器的 ID。<br>[NAME]：容器名字。<br>[[CPU %]：CPU 的使用情况。<br>[MEM USAGE / LIMIT]：当前使用的内存和最大可以使用的内存。<br>[MEM %]：以百分比的形式显示内存使用情况。<br>[NET I/O]：网络 I/O 数据。<br>[BLOCK I/O]：磁盘 I/O 数据。<br>[PIDS]：PID 号。</p><h3 id="只返回当前的状态"><a href="#只返回当前的状态" class="headerlink" title="只返回当前的状态"></a>只返回当前的状态</h3><p>如果不想持续的监控容器使用资源的情况，可以通过 –no-stream 选项只输出当前的状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats --no-stream<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样输出的结果就不会变化了，看起来省劲不少。</p><h3 id="只输出指定的容器"><a href="#只输出指定的容器" class="headerlink" title="只输出指定的容器"></a>只输出指定的容器</h3><p>如果我们只想查看个别容器的资源使用情况，可以为 docker stats 命令显式的指定目标容器的名称或者是 ID：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats --no-stream b772f7b9b058<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img data-src="docker-use-source/image-20220926145442492.png" alt="image-20220926145442492"></p><h3 id="格式化输出的结果"><a href="#格式化输出的结果" class="headerlink" title="格式化输出的结果"></a>格式化输出的结果</h3><p>docker stats 命令支持我们通过 –format 选项自定义输出的内容和格式：</p><pre class="line-numbers language-none"><code class="language-none">docker stats --format &quot;table &#123;&#123;.Name&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img data-src="docker-use-source/image-20220926145658398.png" alt="image-20220926145658398"></p><p>上面的命令中我们只输出了 Name, CPUPerc 和 Memusage 三列。下面是自定义的格式中可以使用的所有占位符：</p><p> 根据用户指定的名称显示容器的名称或 ID。<br>.Name           容器名称。<br>.ID                 容器 ID。<br>.CPUPerc       CPU 使用率。<br>.MemUsage  内存使用量。<br>.NetIO           网络 I/O。<br>.BlockIO        磁盘 I/O。<br>.MemPerc     内存使用率。<br>.PIDs             PID 号。</p><p>有了这些信息我们就可以完全按照自己的需求或者是偏好来控制 docker stats 命令输出的内容了。</p><p>除了以 table 格式输出结果，还可以通过 format 选项输出 json 格式的结果：</p><pre class="line-numbers language-none"><code class="language-none">docker stats --no-stream --format \    &quot;&#123;\&quot;container\&quot;:\&quot;&#123;&#123; .Container &#125;&#125;\&quot;,\&quot;memory\&quot;:&#123;\&quot;raw\&quot;:\&quot;&#123;&#123; .MemUsage &#125;&#125;\&quot;,\&quot;percent\&quot;:\&quot;&#123;&#123; .MemPerc &#125;&#125;\&quot;&#125;,\&quot;cpu\&quot;:\&quot;&#123;&#123; .CPUPerc &#125;&#125;\&quot;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 docker stats 命令我们可以看到容器使用系统资源的情况。这为我们进一步的约束容器可用资源或者是调查与资源相关的问题提供了依据。除了 docker 自带的命令，像 glances 等工具也已经支持查看容器使用的资源情况了。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;默认输出&quot;&gt;&lt;a href=&quot;#默认输出&quot; class=&quot;headerlink&quot; title=&quot;默认输出&quot;&gt;&lt;/a&gt;默认输出&lt;/h3&gt;&lt;p&gt;docker stats 命令用来显示容器使用的系统资源。不带任何选项执行 docker stats 命令：&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://running-dpf.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://running-dpf.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>WAN</title>
    <link href="https://running-dpf.github.io/post/WAN.html"/>
    <id>https://running-dpf.github.io/post/WAN.html</id>
    <published>2022-09-23T03:37:44.000Z</published>
    <updated>2022-09-29T11:03:31.613Z</updated>
    
    <content type="html"><![CDATA[<p><strong>广域网</strong>（英语：Wide Area Network，缩写为 WAN），又称<strong>外网</strong>、<strong>公网</strong>。是连接不同地区<a href="https://baike.baidu.com/item/%E5%B1%80%E5%9F%9F%E7%BD%91?fromModule=lemma_inlink">局域网</a>或<a href="https://baike.baidu.com/item/%E5%9F%8E%E5%9F%9F%E7%BD%91?fromModule=lemma_inlink">城域网</a>计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;广域网&lt;/strong&gt;（英语：Wide Area Network，缩写为 WAN），又称&lt;strong&gt;外网&lt;/strong&gt;、&lt;strong&gt;公网&lt;/strong&gt;。是连接不同地区&lt;a href=&quot;https://baike.baidu.com/item</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>consul集群</title>
    <link href="https://running-dpf.github.io/post/consul.html"/>
    <id>https://running-dpf.github.io/post/consul.html</id>
    <published>2022-09-21T06:14:04.000Z</published>
    <updated>2022-09-26T08:21:48.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>Consul是HashiCorp公司推出的开源软件，基于 GO 语言编写，提供服务注册和发现、配置、多数据中心的高可用方案等能力，分布式一致方面采用 raft 算法实现，并且很容易和 Spring Cloud 等微服务框架集成，使用起来非常简单，具有简单、易用、可插排等特点</p><p>但是，如果只使用Consul的Server模式有以下2个问题：</p><ul><li><p>因为Consul Server数量受到控制所以压力承载（扩展性）是个问题。</p></li><li><p>Server很少导致一个Server下会注册很多微服务，当Server挂掉，这个Server节点下注册的微服务都会视为无效。</p>  <span id="more"></span></li></ul><p>基于上述问题我们在架构中加入Consul Client模式，Client因为加入了LAN gossip协议组成网络中（高速局域网），可以识别故障的Server节点并找到可用的Server节点继续工作，其实Server模式负责的是用WAN gossip协议组成的网络进行跨广域网的数据同步（多个数据中心），这点Client模式是做不到的，Client模式也提供服务的注册和查询，但Client模式不存储节点数据，Client将请求转发给Server进行处理，节点注册数据在Server端是持久化保存的，Client的数量可以无限多，Server的数量是受控制的。总之：Client模式+LAN gossip协议组成了一个数据中心中的各个节点，Server负责投票选出Leader进行数据中心内的数据同步，这个Leader还负责利用WAN gossip协议跨广域网的与其他数据中心进行数据同步。</p><p>PS:默认情况下Server的数量建议是 3 ~ 5 台，Client 的数量建议2 ~ 5台，这能平衡故障情况下的可用性和集群性能。</p><h4 id="架构示意图："><a href="#架构示意图：" class="headerlink" title="架构示意图："></a>架构示意图：</h4><p><img data-src="consul/image-20220921142207939.png" alt="server-client架构图"></p><h3 id="数据中心设计"><a href="#数据中心设计" class="headerlink" title="数据中心设计"></a>数据中心设计</h3><p>用户可以在单个物理数据中心、或跨多个数据中心部署Consul集群。对于运行时高读写的大型集群，将服务器部署在同物理地址可以提高性能；在云环境中，用户可以跨多个可用区域（zone）部署一个数据中心，例如每个可用区域对应一台单一的主机。Consul还可以通过<a href>WAN</a>连接单独的集群组成多数据中心。</p><h4 id="单数据中心"><a href="#单数据中心" class="headerlink" title="单数据中心"></a>单数据中心</h4><p>对于部署在同一个数据中心中的应用程序，我们建议使用一个Consul集群。Consul支持传统的三层架构应用，同样也支持微服务，搭建一个集群通常是3或5台机器，用户可以在可用性和性能间寻找平衡。<br> 单个数据中心的节点（node）数建议不超过5000个，对于读写频繁的集群，可能需要进一步减少最大节点数，这具体取决KV对的数量以及监控数据的数量。当用户添加更多的客户端机器时，Gossip协议执行的时间会更长、<br> 对于写负载高的集群，推荐使用硬件升级垂直扩展，并使用低延迟存储。<br> <code>服务标签（Service Tag）</code>可帮助用户对集群中的内容进行查询</p><h4 id="多数据中心"><a href="#多数据中心" class="headerlink" title="多数据中心"></a>多数据中心</h4><p>用户可以通过WAN链接加入在不同数据中心中运行相同服务的Consul集群。集群间独立运行，仅通过8302端口上的WAN通信，除非通过命令行或者API明确配置，否则Consul服务器将仅从其本地数据中心返回结果。Consul不会在多个数据中心之间复制数据，但是用户可以使用consul-replicate工具定期同步KV数据。<br> 比较好的实践是启用TLS服务名称检查，以避免代理意外交叉连接。<br> Consul的<code>预查询（prepared queries）</code>允许客户端在某一数据中心发生故障后，去另一个数据中心发现服务。例如本地数据中心dc1中的payment服务下线了，则预查询使用户能能访问到离该数据中心地理位置最近的其他正常服务。<br> 默认情况下，预查询首先会在本地数据中心解析。它们不支持查询KV数据，但是可以使用ACLs。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><table><thead><tr><th align="center"><strong>节点名称</strong></th><th><strong>节点IP</strong></th><th align="center"><strong>Agent类型</strong></th></tr></thead><tbody><tr><td align="center">consul-01</td><td>10.181.0.147</td><td align="center">server</td></tr><tr><td align="center">consul-02</td><td>10.181.0.148</td><td align="center">server</td></tr><tr><td align="center">consul-03</td><td>10.181.0.149</td><td align="center">server</td></tr><tr><td align="center">consul-client</td><td>10.181.0.152</td><td align="center">client</td></tr></tbody></table><h4 id="1、安装-Consul"><a href="#1、安装-Consul" class="headerlink" title="1、安装 Consul"></a>1、安装 Consul</h4><p>配置主机名，命令示例：（以下操作在所有节点配置）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hostnamectl set-hostname consul-01hostnamectl set-hostname consul-02hostnamectl set-hostname consul-03hostnamectl set-hostname consul-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下载consul</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export VER&#x3D;&quot;1.12.3&quot;wget https:&#x2F;&#x2F;releases.hashicorp.com&#x2F;consul&#x2F;$&#123;VER&#125;&#x2F;consul_$&#123;VER&#125;_linux_amd64.zipunzip consul_$&#123;VER&#125;_linux_amd64.zip -d &#x2F;usr&#x2F;local&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建consul用户和组</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">groupadd --system consuluseradd -s &#x2F;sbin&#x2F;nologin --system -g consul consul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建consul安装目录</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;data&#x2F;consul&#x2F;&#123;config,data,logs&#125;chown -R consul:consul &#x2F;data&#x2F;consulchmod -R 775 &#x2F;data&#x2F;consul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置 DNS 或编辑/etc/hosts 文件以配置所有服务器的主机名，替换<code>example.com</code>为您的实际域名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat &gt;&#x2F;etc&#x2F;hosts&lt;&lt;EOF10.181.0.147 consul-01.example.com consul-0110.181.0.148 consul-02.example.com consul-0210.181.0.149 consul-03.example.com consul-0310.181.0.152 consul-client.example.com consul-clientEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、Server-节点配置"><a href="#2、Server-节点配置" class="headerlink" title="2、Server 节点配置"></a>2、Server 节点配置</h4><p>生成Consul secret</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">consul keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为server节点创建json配置文件，其他节点配置修改IP地址及节点名称即可</p><p>consul-01节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat &gt;&#x2F;data&#x2F;consul&#x2F;config&#x2F;consul.json&lt;&lt;EOF&#123;    &quot;advertise_addr&quot;: &quot;10.181.0.147&quot;,    &quot;bind_addr&quot;: &quot;10.181.0.147&quot;,    &quot;bootstrap_expect&quot;: 3,    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,    &quot;datacenter&quot;: &quot;DC1&quot;,    &quot;node_name&quot;: &quot;consul-01&quot;,    &quot;data_dir&quot;: &quot;&#x2F;opt&#x2F;consul&#x2F;data&quot;,    &quot;domain&quot;: &quot;consul&quot;,    &quot;enable_script_checks&quot;: true,    &quot;dns_config&quot;: &#123;        &quot;enable_truncate&quot;: true,        &quot;only_passing&quot;: true    &#125;,    &quot;enable_syslog&quot;: true,    &quot;encrypt&quot;: &quot;Ao8dtyz2Clor34Zxh8zviWZECboXeM+mBj97kq2mxtk&#x3D;&quot;,#将上门的srcret替换    &quot;leave_on_terminate&quot;: true,    &quot;log_level&quot;: &quot;INFO&quot;,    &quot;rejoin_after_leave&quot;: true,    &quot;retry_join&quot;: [     &quot;consul-01&quot;,     &quot;consul-02&quot;,     &quot;consul-03&quot;    ],    &quot;server&quot;: true,    &quot;start_join&quot;: [        &quot;consul-01&quot;,        &quot;consul-02&quot;,        &quot;consul-03&quot;    ],    &quot;ui&quot;: true&#125;EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置参数说明：</p><p>datacenter：此标志控制运行代理的数据中心。如果未提供，则默认为dc1。Consul 对多个数据中心有一流的支持，但它依赖于正确的配置。同一数据中心中的节点应位于单个 LAN 上。</p><p>data_dir：该标志为代理提供了一个数据目录来存储状态。</p><p>node_name：节点名字，一般为主机名。</p><p>server：指定是否为server节点。</p><p>bootstrap_expect：在一个datacenter中期望提供的server节点数目，当提供该值的时候，consul一直等到达到指定sever数目才会引导整个集群，该标记不能和bootstrap公用。</p><p>bind_addr：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0。</p><p>client_addr：Consul 将绑定客户端接口的地址，包括 HTTP 和 DNS 服务器。默认情况下，这是127.0.0.1，仅允许环回连接。在 Consul 1.0 及更高版本中，这可以设置为要绑定到的以空格分隔的地址列表。</p><p>log_json：此标志使代理能够以 JSON 格式输出日志。默认为false。</p><p>log_level:在 Consul 代理启动后显示的日志级别。默认为 info 。可用的日志级别是trace、debug、info、warn和err。</p><p>retry_join：指定将要置入集群的IP列表，如果失败，会自动重试，知道直到成功加入。</p><p>start_join：启动时加入集群的地址</p><p>ui_config：此对象允许设置多个子键，用于控制 UI 中可用的显示或功能。</p><p>rejoin_after_leave ：允许重新加入集群</p><p>3、Client 节点配置</p><p>client是consul客户端，客户端不保存数据，客户端将接收到的请求转发给Server端。Server之间通过局域网或广域网通信实现数据一致性。每个Server或Client都是一个consul agent。</p><p>创建consul-client节点配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &gt;&#x2F;data&#x2F;consul&#x2F;config&#x2F;consul.json&lt;&lt;EOF&#123;    &quot;advertise_addr&quot;: &quot;10.181.0.152&quot;,    &quot;bind_addr&quot;: &quot;10.181.0.152&quot;,    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,    &quot;datacenter&quot;: &quot;DC1&quot;,    &quot;node_name&quot;: &quot;consul-client&quot;,     &quot;data_dir&quot;: &quot;&#x2F;data&#x2F;consul&#x2F;data&quot;,    &quot;domain&quot;: &quot;consul&quot;,    &quot;enable_script_checks&quot;: true,    &quot;dns_config&quot;: &#123;        &quot;enable_truncate&quot;: true,        &quot;only_passing&quot;: true    &#125;,    &quot;enable_syslog&quot;: true,    &quot;encrypt&quot;: &quot;Ao8dtyz2Clor34Zxh8zviWZECboXeM+mBj97kq2mxtk&#x3D;&quot;,    &quot;leave_on_terminate&quot;: true,    &quot;log_level&quot;: &quot;INFO&quot;,    &quot;rejoin_after_leave&quot;: true,    &quot;retry_join&quot;: [     &quot;consul-01&quot;,     &quot;consul-02&quot;,     &quot;consul-03&quot;    ],    &quot;server&quot;: false,    &quot;start_join&quot;: [        &quot;consul-01&quot;,        &quot;consul-02&quot;,        &quot;consul-03&quot;    ],    &quot;ui&quot;: true&#125;EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、systemd 启动文件</p><p>所有节点创建systemd 服务文件<code>/etc/systemd/system/consul.service</code>，所有节点具有相同内容，配置如下：</p><pre class="line-numbers language-none"><code class="language-none">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;consul.service&lt;&lt;EOF[Unit]Description&#x3D;Consul Service Discovery AgentDocumentation&#x3D;https:&#x2F;&#x2F;www.consul.io&#x2F;After&#x3D;network-online.targetWants&#x3D;network-online.target[Service]Type&#x3D;simpleUser&#x3D;consulGroup&#x3D;consulExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;consul agent -config-dir&#x3D;&#x2F;data&#x2F;consul&#x2F;config&#x2F;consul.jsonExecReload&#x3D;&#x2F;bin&#x2F;kill -HUP $MAINPIDKillSignal&#x3D;SIGINTTimeoutStopSec&#x3D;5Restart&#x3D;on-failureSyslogIdentifier&#x3D;consul[Install]WantedBy&#x3D;multi-user.targetEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有节点启动consul服务</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable --now consul.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="端口介绍"><a href="#端口介绍" class="headerlink" title="端口介绍"></a>端口介绍</h4><p><img data-src="consul/image-20220921143904555.png" alt="consul-port"></p><p>这5个端口的作用：</p><ul><li>8300：集群内数据的读写和复制</li><li>8301：单个数据中心gossip协议通讯</li><li>8302：跨数据中心gossip协议通讯</li><li>8500：提供获取服务列表、注册服务、注销服务等HTTP接口；提供UI服务</li><li>8600：采用DNS协议提供服务发现功能</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>查看成员</p><pre class="line-numbers language-none"><code class="language-none">consul members<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看版本号</p><pre class="line-numbers language-none"><code class="language-none">consul  version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出所有服务</p><pre class="line-numbers language-none"><code class="language-none">consul catalog services -http-addr&#x3D;localhost:8500<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h3&gt;&lt;p&gt;Consul是HashiCorp公司推出的开源软件，基于 GO 语言编写，提供服务注册和发现、配置、多数据中心的高可用方案等能力，分布式一致方面采用 raft 算法实现，并且很容易和 Spring Cloud 等微服务框架集成，使用起来非常简单，具有简单、易用、可插排等特点&lt;/p&gt;
&lt;p&gt;但是，如果只使用Consul的Server模式有以下2个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因为Consul Server数量受到控制所以压力承载（扩展性）是个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server很少导致一个Server下会注册很多微服务，当Server挂掉，这个Server节点下注册的微服务都会视为无效。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="分布式" scheme="https://running-dpf.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>kubeadm高可用部署K8S1.22.2-istio（五）</title>
    <link href="https://running-dpf.github.io/post/k8s-istio.html"/>
    <id>https://running-dpf.github.io/post/k8s-istio.html</id>
    <published>2022-09-06T03:41:42.000Z</published>
    <updated>2022-09-29T10:41:23.870Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>kubeadm-cert-expired</title>
    <link href="https://running-dpf.github.io/post/kubeadm-cert-expired.html"/>
    <id>https://running-dpf.github.io/post/kubeadm-cert-expired.html</id>
    <published>2022-09-05T08:42:37.000Z</published>
    <updated>2022-09-05T09:38:42.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为什么要修改-kubeadm-证书时间"><a href="#1-为什么要修改-kubeadm-证书时间" class="headerlink" title="1.为什么要修改 kubeadm 证书时间"></a>1.为什么要修改 kubeadm 证书时间</h2><p>Kubernetes 官方提供了 kubeadm 工具安装 kubernetes 集群，使用这个工具安装集群非常便捷，使部署和升级 Kubernetes 变得简单起来。</p><span id="more"></span><p>不过该工具有点坑的就是，使用其安装的 kubernetes 集群的大部分证书有效期只有一年，需要在证书过期前，使用更新操作更新集群，使证书的有效期再续一年。如果忘记这个操作，那么在使用过程中证书到期将导致集群不可用，使用过程中会出现以下报错：x509: certificate has expired or is not yet valid，应用无法访问，急急忙忙解决也需要半天时间，这个问题是致命的。</p><p>不过实际情况下，在现网环境中大部分人追求稳定，一般不会大改 Kubernetes 版本，所以解决 kubeadm 集群证书有效期只有一年的最好办法就是重新编译 kubeadm 源码，将里面的 1 年有效期修改为 10 年或者 100 年，也不会影响使用 kubeadm 后续的升级，所以修改源码能很好的规避这个证书过期风险。</p><h2 id="2-查看证书有的效期"><a href="#2-查看证书有的效期" class="headerlink" title="2.查看证书有的效期"></a>2.查看证书有的效期</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd &#x2F;etc&#x2F;kubernetes&#x2F;pkifor i in $(ls *.crt); do echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; $i &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;; openssl x509 -in $i -text -noout | grep -A 3 &#39;Validity&#39; ; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; apiserver.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        Validity            Not Before: Sep  5 08:32:57 2022 GMT            Not After : Sep  5 08:32:58 2023 GMT        Subject: CN&#x3D;kube-apiserver&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; apiserver-etcd-client.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        Validity            Not Before: Sep  5 08:32:58 2022 GMT            Not After : Sep  5 08:32:59 2023 GMT        Subject: O&#x3D;system:masters, CN&#x3D;kube-apiserver-etcd-client&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; apiserver-kubelet-client.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        Validity            Not Before: Sep  5 08:32:57 2022 GMT            Not After : Sep  5 08:32:58 2023 GMT        Subject: O&#x3D;system:masters, CN&#x3D;kube-apiserver-kubelet-client&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ca.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        Validity            Not Before: Sep  5 08:32:57 2022 GMT            Not After : Sep  2 08:32:57 2032 GMT        Subject: CN&#x3D;kubernetes&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; front-proxy-ca.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        Validity            Not Before: Sep  5 08:32:58 2022 GMT            Not After : Sep  2 08:32:58 2032 GMT        Subject: CN&#x3D;front-proxy-ca&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; front-proxy-client.crt &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        Validity            Not Before: Sep  5 08:32:58 2022 GMT            Not After : Sep  5 08:32:58 2023 GMT        Subject: CN&#x3D;front-proxy-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><pre class="line-numbers language-none"><code class="language-none">kubeadm certs check-expiration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">[check-expiration] Reading configuration from the cluster...[check-expiration] FYI: You can look at this config file with &#39;kubectl -n kube-system get cm kubeadm-config -o yaml&#39;CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGEDadmin.conf                 Sep 05, 2023 08:33 UTC   364d                                    noapiserver                  Sep 05, 2023 08:32 UTC   364d            ca                      noapiserver-etcd-client      Sep 05, 2023 08:32 UTC   364d            etcd-ca                 noapiserver-kubelet-client   Sep 05, 2023 08:32 UTC   364d            ca                      nocontroller-manager.conf    Sep 05, 2023 08:33 UTC   364d                                    noetcd-healthcheck-client    Sep 05, 2023 08:32 UTC   364d            etcd-ca                 noetcd-peer                  Sep 05, 2023 08:32 UTC   364d            etcd-ca                 noetcd-server                Sep 05, 2023 08:32 UTC   364d            etcd-ca                 nofront-proxy-client         Sep 05, 2023 08:32 UTC   364d            front-proxy-ca          noscheduler.conf             Sep 05, 2023 08:33 UTC   364d                                    noCERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGEDca                      Sep 02, 2032 08:32 UTC   9y              noetcd-ca                 Sep 02, 2032 08:32 UTC   9y              nofront-proxy-ca          Sep 02, 2032 08:32 UTC   9y              no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-证书有效期修改方法"><a href="#3-证书有效期修改方法" class="headerlink" title="3.证书有效期修改方法"></a>3.证书有效期修改方法</h2><h3 id="3-1-部署go环境"><a href="#3-1-部署go环境" class="headerlink" title="3.1 部署go环境"></a>3.1 部署go环境</h3><p>查看go版本(1.16.8)</p><pre class="line-numbers language-none"><code class="language-none">kubeadm version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">kubeadm version: &amp;version.Info&#123;Major:&quot;1&quot;, Minor:&quot;22&quot;, GitVersion:&quot;v1.22.2&quot;, GitCommit:&quot;8b5a19147530eaac9476b0ab82980b4088bbc1b2&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2021-09-15T21:37:34Z&quot;, GoVersion:&quot;go1.16.8&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载</p><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;opt&#x2F;datacd &#x2F;opt&#x2F;datawget  https:&#x2F;&#x2F;studygolang.com&#x2F;dl&#x2F;golang&#x2F;go1.16.8.linux-amd64.tar.gztar -xvf go1.16.8.linux-amd64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-配置环境变量"><a href="#3-2-配置环境变量" class="headerlink" title="3.2 配置环境变量"></a>3.2 配置环境变量</h3><pre class="line-numbers language-none"><code class="language-none">echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin&quot; &gt;&gt;&#x2F;etc&#x2F;profilesource &#x2F;etc&#x2F;profilego version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-Kubernetes源码下载"><a href="#3-3-Kubernetes源码下载" class="headerlink" title="3.3 Kubernetes源码下载"></a>3.3 Kubernetes源码下载</h3><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt&#x2F;data&#x2F;git clone --branch v1.22.2 https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-4-修改源代码文件"><a href="#3-4-修改源代码文件" class="headerlink" title="3.4 修改源代码文件"></a>3.4 修改源代码文件</h3><p>1、修改constants.go文件</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt&#x2F;data&#x2F;kubernetesvim .&#x2F;cmd&#x2F;kubeadm&#x2F;app&#x2F;constants&#x2F;constants.go查找CertificateValidity字段const (        &#x2F;&#x2F; KubernetesDir is the directory Kubernetes owns for storing various configuration files        KubernetesDir &#x3D; &quot;&#x2F;etc&#x2F;kubernetes&quot;        &#x2F;&#x2F; ManifestsSubDirName defines directory name to store manifests        ManifestsSubDirName &#x3D; &quot;manifests&quot;        &#x2F;&#x2F; TempDirForKubeadm defines temporary directory for kubeadm        &#x2F;&#x2F; should be joined with KubernetesDir.        TempDirForKubeadm &#x3D; &quot;tmp&quot;        &#x2F;&#x2F; CertificateValidity defines the validity for all the signed certificates generated by kubeadm        &#x2F;&#x2F; 修改这个地方        CertificateValidity &#x3D; time.Hour * 24 * 365 * 100        &#x2F;&#x2F; CACertAndKeyBaseName defines certificate authority base name        CACertAndKeyBaseName &#x3D; &quot;ca&quot;        &#x2F;&#x2F; CACertName defines certificate name        CACertName &#x3D; &quot;ca.crt&quot;        &#x2F;&#x2F; CAKeyName defines certificate name        CAKeyName &#x3D; &quot;ca.key&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、修改cert.go文件</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt&#x2F;data&#x2F;kubernetesvim staging&#x2F;src&#x2F;k8s.io&#x2F;client-go&#x2F;util&#x2F;cert&#x2F;cert.go 查找NotAfter字段&#x2F;&#x2F; NewSelfSignedCACert creates a CA certificatefunc NewSelfSignedCACert(cfg Config, key crypto.Signer) (*x509.Certificate, error) &#123;        now :&#x3D; time.Now()        tmpl :&#x3D; x509.Certificate&#123;                SerialNumber: new(big.Int).SetInt64(0),                Subject: pkix.Name&#123;                        CommonName:   cfg.CommonName,                        Organization: cfg.Organization,                &#125;,                DNSNames:              []string&#123;cfg.CommonName&#125;,                NotBefore:             now.UTC(),                NotAfter:              now.Add(duration365d * 100).UTC(),                KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,                BasicConstraintsValid: true,                IsCA:                  true,        &#125;        certDERBytes, err :&#x3D; x509.CreateCertificate(cryptorand.Reader, &amp;tmpl, &amp;tmpl, key.Public(), key)        if err !&#x3D; nil &#123;                return nil, err        &#125;        return x509.ParseCertificate(certDERBytes)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-编译源码"><a href="#3-5-编译源码" class="headerlink" title="3.5 编译源码"></a>3.5 编译源码</h3><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt&#x2F;data&#x2F;kubernetesmake WHAT&#x3D;cmd&#x2F;kubeadm GOFLAGS&#x3D;-v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-6-编译完后查看结果，就可以看到生成的kubeadm二进文件"><a href="#3-6-编译完后查看结果，就可以看到生成的kubeadm二进文件" class="headerlink" title="3.6 编译完后查看结果，就可以看到生成的kubeadm二进文件"></a>3.6 编译完后查看结果，就可以看到生成的kubeadm二进文件</h3><pre class="line-numbers language-none"><code class="language-none">ls -l &#x2F;opt&#x2F;data&#x2F;kubernetes&#x2F;_output&#x2F;bin&#x2F;-rwxr-xr-x 1 root root  7540736 Sep  5 17:20 conversion-gen-rwxr-xr-x 1 root root  7200768 Sep  5 17:19 deepcopy-gen-rwxr-xr-x 1 root root  7233536 Sep  5 17:19 defaulter-gen-rwxr-xr-x 1 root root  3555847 Sep  5 17:19 go2make-rwxr-xr-x 1 root root 45789184 Sep  5 17:22 kubeadm-rwxr-xr-x 1 root root 10141696 Sep  5 17:20 openapi-gen-rwxr-xr-x 1 root root  7168000 Sep  5 17:19 prerelease-lifecycle-gen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7-备份"><a href="#3-7-备份" class="headerlink" title="3.7 备份"></a>3.7 备份</h3><pre class="line-numbers language-none"><code class="language-none">备份cp &#x2F;usr&#x2F;bin&#x2F;kubeadm &#x2F;usr&#x2F;bin&#x2F;kubeadm.20220905备份旧的证书文件，记住3台master都需要备份一下cp -R &#x2F;etc&#x2F;kubernetes&#x2F;pki &#x2F;etc&#x2F;kubernetes&#x2F;pki.20220905<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8-替换"><a href="#3-8-替换" class="headerlink" title="3.8 替换"></a>3.8 替换</h3><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;opt&#x2F;data&#x2F;kubernetes&#x2F;_output&#x2F;bin&#x2F;kubeadm &#x2F;usr&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-9-证书更新"><a href="#3-9-证书更新" class="headerlink" title="3.9 证书更新"></a>3.9 证书更新</h3><pre class="line-numbers language-none"><code class="language-none">kubeadm certs renew all[renew] Reading configuration from the cluster...[renew] FYI: You can look at this config file with &#39;kubectl -n kube-system get cm kubeadm-config -o yaml&#39;certificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewedcertificate for serving the Kubernetes API renewedcertificate the apiserver uses to access etcd renewedcertificate for the API server to connect to kubelet renewedcertificate embedded in the kubeconfig file for the controller manager to use renewedcertificate for liveness probes to healthcheck etcd renewedcertificate for etcd nodes to communicate with each other renewedcertificate for serving etcd renewedcertificate for the front proxy client renewedcertificate embedded in the kubeconfig file for the scheduler manager to use renewedDone renewing certificates. You must restart the kube-apiserver, kube-controller-manager, kube-scheduler and etcd, so that they can use the new certificates.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-10-重启apiserver、controller、scheduler配置生效"><a href="#3-10-重启apiserver、controller、scheduler配置生效" class="headerlink" title="3.10 重启apiserver、controller、scheduler配置生效"></a>3.10 重启apiserver、controller、scheduler配置生效</h3><pre class="line-numbers language-none"><code class="language-none">docker ps |grep -E &#39;k8s_kube-apiserver|k8s_kube-controller-manager|k8s_kube-scheduler|k8s_etcd_etcd&#39;|awk &#39;&#123;print $1&#125;&#39; |xargs docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-11-其他master节点"><a href="#3-11-其他master节点" class="headerlink" title="3.11 其他master节点"></a>3.11 其他master节点</h3><p>同理另外2台的master，只需要把kubeadm文件，从第一台更新过的scp过去，然后按上面步骤，重新生成新的证书文件就可以了。记住更新过需要重启一下服务或者服务器。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-为什么要修改-kubeadm-证书时间&quot;&gt;&lt;a href=&quot;#1-为什么要修改-kubeadm-证书时间&quot; class=&quot;headerlink&quot; title=&quot;1.为什么要修改 kubeadm 证书时间&quot;&gt;&lt;/a&gt;1.为什么要修改 kubeadm 证书时间&lt;/h2&gt;&lt;p&gt;Kubernetes 官方提供了 kubeadm 工具安装 kubernetes 集群，使用这个工具安装集群非常便捷，使部署和升级 Kubernetes 变得简单起来。&lt;/p&gt;</summary>
    
    
    
    <category term="k8s" scheme="https://running-dpf.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://running-dpf.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm初始化集群报错</title>
    <link href="https://running-dpf.github.io/post/kubeadm-join-fatal.html"/>
    <id>https://running-dpf.github.io/post/kubeadm-join-fatal.html</id>
    <published>2022-09-05T07:27:02.000Z</published>
    <updated>2022-09-06T01:21:37.010Z</updated>
    
    <content type="html"><![CDATA[<p>报错信息如下</p><pre class="line-numbers language-none"><code class="language-none">error execution phase preflight: [preflight] Some fatal errors occurred:[ERROR CRI]: container runtime is not running: output: E0905 15:24:41.698370   29432 remote_runtime.go:925] &quot;Status from runtime service failed&quot; err&#x3D;&quot;rpc error: code &#x3D; Unimplemented desc &#x3D; unknown service runtime.v1alpha2.RuntimeService&quot;time&#x3D;&quot;2022-09-05T15:24:41+08:00&quot; level&#x3D;fatal msg&#x3D;&quot;getting status of runtime: rpc error: code &#x3D; Unimplemented desc &#x3D; unknown service runtime.v1alpha2.RuntimeService&quot;, error: exit status 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p><img data-src="kubeadm-join-fatal/image-20220905152740852.png" alt="报错截图"></p><p>解决方法：</p><pre class="line-numbers language-none"><code class="language-none">mv &#x2F;etc&#x2F;containerd&#x2F;config.toml &#x2F;tmp&#x2F;systemctl restart container<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后重新初始化集群即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;报错信息如下&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;error execution phase preflight: [preflight] Some fatal errors occurred:
[ERROR CRI]: container runtime is not running: output: E0905 15:24:41.698370   29432 remote_runtime.go:925] &amp;quot;Status from runtime service failed&amp;quot; err&amp;#x3D;&amp;quot;rpc error: code &amp;#x3D; Unimplemented desc &amp;#x3D; unknown service runtime.v1alpha2.RuntimeService&amp;quot;
time&amp;#x3D;&amp;quot;2022-09-05T15:24:41+08:00&amp;quot; level&amp;#x3D;fatal msg&amp;#x3D;&amp;quot;getting status of runtime: rpc error: code &amp;#x3D; Unimplemented desc &amp;#x3D; unknown service runtime.v1alpha2.RuntimeService&amp;quot;
, error: exit status 1&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="k8s" scheme="https://running-dpf.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://running-dpf.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>kubectl获取内存使用率不同</title>
    <link href="https://running-dpf.github.io/post/kubectl%20top%20pod%20%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E9%87%8Fcontainer_memory_working_set_bytes.html"/>
    <id>https://running-dpf.github.io/post/kubectl%20top%20pod%20%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E9%87%8Fcontainer_memory_working_set_bytes.html</id>
    <published>2022-09-05T07:27:02.000Z</published>
    <updated>2022-09-29T11:03:31.609Z</updated>
    
    <content type="html"><![CDATA[<p>kubectl top pod 内存使用量container_memory_working_set_bytes</p><span id="more"></span><p>计算方式：</p><p>container_memory_working_set_bytes = container_memory_usage_bytes – total_inactive_file（未激活的匿名缓存页）</p><p>cadvisor 内存使用量 container_memory_usage_bytes</p><p>计算公式：</p><p>container_memory_usage_bytes = container_memory_rss + container_memory_cache + kernel memory</p><p>container_memory_working_set_bytes 是容器真实使用的内存量，也是 limit限制时的 oom 判断依据</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;kubectl top pod 内存使用量container_memory_working_set_bytes&lt;/p&gt;</summary>
    
    
    
    <category term="k8s" scheme="https://running-dpf.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://running-dpf.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>go-context</title>
    <link href="https://running-dpf.github.io/post/go-context.html"/>
    <id>https://running-dpf.github.io/post/go-context.html</id>
    <published>2022-08-17T02:48:35.000Z</published>
    <updated>2022-09-05T09:10:47.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Context初识"><a href="#Context初识" class="headerlink" title="Context初识"></a>Context初识</h1><p>Go1.7加入一个新的标准库context，他定义了context类型，专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、请求信号、截止时间等相关操作，这些操作可能涉及多个API调用。</p><span id="more"></span><p>对服务器传入的请求应该创建上下文，而对服务器的传出调用应该接受上下文。他们之间的函数调用链必须传递上下文，或者可以使用withCancel、WithDeadline、WithTimeout、或WithValue创建的派生上下文，当一个上下文被取消时，他派生的所有上下文也被取消。</p><p>Context接口</p><p>context.Context是一个接口，该接口定义了四个需要实现的方法。具体如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">type Context interface &#123;    Deadline() (deadline time.Time, ok bool)    Done() &lt;-chan struct&#123;&#125;    Err() error    Value(key any) any&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Deadline</code>方法需要返回当前<code>Context</code>被取消的时间，也就是完成工作的截止时间（deadline）；</li><li><code>Done</code>方法需要返回一个<code>Channel</code>，这个Channel会在当前工作完成或者上下文被取消之后关闭，多次调用<code>Done</code>方法会返回同一个Channel；</li><li><code>err</code>方法会返回当前Context结束的原因，它只会在Done返回的Channel被关闭时才会返回非空的值；<ul><li>如果当前<code>Context</code>被取消就会返回<code>Canceled</code>错误；</li><li>如果当前<code>Context</code>超时就会返回<code>DeadlineExceeded</code>错误；</li></ul></li><li><code>Value</code>方法会从<code>Context</code>中返回键对应的值，对于同一个上下文来说，多次调用<code>Value</code> 并传入相同的<code>Key</code>会返回相同的结果，该方法仅用于传递跨API和进程间跟请求域的数据；</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Context初识&quot;&gt;&lt;a href=&quot;#Context初识&quot; class=&quot;headerlink&quot; title=&quot;Context初识&quot;&gt;&lt;/a&gt;Context初识&lt;/h1&gt;&lt;p&gt;Go1.7加入一个新的标准库context，他定义了context类型，专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、请求信号、截止时间等相关操作，这些操作可能涉及多个API调用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="go context" scheme="https://running-dpf.github.io/tags/go-context/"/>
    
  </entry>
  
  <entry>
    <title>makevsnew</title>
    <link href="https://running-dpf.github.io/post/makevsnew.html"/>
    <id>https://running-dpf.github.io/post/makevsnew.html</id>
    <published>2022-08-16T02:49:29.000Z</published>
    <updated>2022-09-29T11:02:25.164Z</updated>
    
    <content type="html"><![CDATA[<p>make 和new的区别</p><p>首先，两个都是初始化内存</p><span id="more"></span><p>1、new：多用来为基本数据类型（string、int、bool、struct等）初始化内存，返回的是指针</p><p>2、make：多用来为slice、map、channel的内存，返回对应类型</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;make 和new的区别&lt;/p&gt;
&lt;p&gt;首先，两个都是初始化内存&lt;/p&gt;</summary>
    
    
    
    
    <category term="go" scheme="https://running-dpf.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>protobuf系列-安装</title>
    <link href="https://running-dpf.github.io/post/proto01.html"/>
    <id>https://running-dpf.github.io/post/proto01.html</id>
    <published>2022-08-16T01:49:56.000Z</published>
    <updated>2022-09-05T09:10:47.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="protobuf安装"><a href="#protobuf安装" class="headerlink" title="protobuf安装"></a>protobuf安装</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F;下载protobufgit clone <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;protobuf安装&quot;&gt;&lt;a href=&quot;#protobuf安装&quot; class=&quot;headerlink&quot; title=&quot;protobuf安装&quot;&gt;&lt;/a&gt;protobuf安装&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-go&quot; dat</summary>
      
    
    
    
    <category term="go" scheme="https://running-dpf.github.io/categories/go/"/>
    
    
    <category term="go" scheme="https://running-dpf.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>etcd06-运维命令</title>
    <link href="https://running-dpf.github.io/post/etcd-ops-order.html"/>
    <id>https://running-dpf.github.io/post/etcd-ops-order.html</id>
    <published>2022-08-12T09:57:18.000Z</published>
    <updated>2022-08-12T10:13:11.005Z</updated>
    
    <content type="html"><![CDATA[<p>在此记录一下运维同学常用操作etcd的命令</p><span id="more"></span><h2 id="增-改"><a href="#增-改" class="headerlink" title="增/改"></a>增/改</h2><p>这里是设置键的值的命令 foo 到 bar：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">etcdctl put foo barOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>读取键为 foo 的命令</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl get foofoo &#x2F;&#x2F; keybar &#x2F;&#x2F; value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面同时返回了 key 和 value，怎么只读取 key 对应的值呢：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">etcdctl get foo --print-value-onlybar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按前缀读取：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">etcdctl get --prefix foofoobarfoo1bar1foo2bar2foo3bar3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按前缀只需要key：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">etcdctl get --prefix foo --keys-only=truefoofoo1foo2foo3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p>删除一个key</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl del foo1 &#x2F;&#x2F;删除个数foo &#x2F;&#x2F;删除keybar &#x2F;&#x2F;删除value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除key foo1时并返回被删除的键值对</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl del foo1 &#x2F;&#x2F;删除个数foo1 &#x2F;&#x2F;删除keybar1 &#x2F;&#x2F;删除value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除指定前缀的key</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl del --prev-kv --prefix foo2foo3bar3foo4bar4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除已foo为开头的key，只显示key不显示value</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl  del --prefix foo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除所有数据</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl del --prefix &quot;&quot;4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当删除数据后，发现数据库容量并没有变少，这个时候可以使用数据压缩与碎片整理</p><p>1、获取当前版本</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">rev&#x3D;$(ETCDCTL_API&#x3D;3 etcdctl --endpoints&#x3D;http:&#x2F;&#x2F;127.0.0.1:2379 endpoint status --write-out&#x3D;&quot;json&quot; | egrep -o &#39;&quot;revision&quot;:[0-9]*&#39; | egrep -o &#39;[0-9].*&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、压缩掉所有旧版本</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl --endpoints&#x3D;http:&#x2F;&#x2F;127.0.0.1:2379 compact $rev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、整理多余的空间</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">ETCDCTL_API&#x3D;3 etcdctl --endpoints&#x3D;http:&#x2F;&#x2F;127.0.0.1:2379 defrag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过线上实践发现还是设置自动压缩更靠谱，官方同样提供数据自动压缩方式，历史数据只保留一个小时的</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">ETCDCTL_API&#x3D;3 etcdctl --auto-compaction-retention&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据实践发现只配置auto-compaction-retention只会做碎片整理，不会实际减少空间大小；　如果需要减少大小还是需要使用etcdctl compact 和　etcdctl defrag清理空间</p><p>etcd 3.3.3版本以后的自动压缩方式：</p><p>每5分钟自动压缩”latest revision” - 1000</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl -–auto-compaction-mode&#x3D;revision --auto-compaction-retention&#x3D;1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每1小时自动压缩并保留12小时窗口</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">etcdctl -–auto-compaction-mode&#x3D;periodic --auto-compaction-retention&#x3D;12h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="leader节点切换"><a href="#leader节点切换" class="headerlink" title="leader节点切换"></a>leader节点切换</h2><p>有时候我们运维需要对集群进行操作，为了不影响线上服务，我们可以手动指定leader节点</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">#注意：只能在leader节点进行操作/tmp/etcd-download-test/etcdctl move-leader 219637592b6b26a7 --endpoints 127.0.0.1:2379Leadership transferred from 6f33c9a8402dd6ab to 219637592b6b26a7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在此记录一下运维同学常用操作etcd的命令&lt;/p&gt;</summary>
    
    
    
    
    <category term="etcd" scheme="https://running-dpf.github.io/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>etcd-Overview</title>
    <link href="https://running-dpf.github.io/post/etcd-Overview.html"/>
    <id>https://running-dpf.github.io/post/etcd-Overview.html</id>
    <published>2022-08-12T09:57:02.000Z</published>
    <updated>2022-08-12T09:59:47.604Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>gin中模板的配置</title>
    <link href="https://running-dpf.github.io/post/gin-template.html"/>
    <id>https://running-dpf.github.io/post/gin-template.html</id>
    <published>2022-08-09T07:12:08.000Z</published>
    <updated>2022-08-09T07:19:38.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、全部模板放在一个目录里的配置方法"><a href="#1、全部模板放在一个目录里的配置方法" class="headerlink" title="1、全部模板放在一个目录里的配置方法"></a>1、全部模板放在一个目录里的配置方法</h2><p>现在的目录路径：</p><span id="more"></span><p>![image-20220809151655101](/Users/geminifly/Library/Application Support/typora-user-images/image-20220809151655101.png)</p><p>index.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;&#123;define "index.html"&#125;&#125;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>        <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>&#123;&#123;end&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>news.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;&#123;define "news.html"&#125;&#125;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>        <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>&#123;&#123;end&#125;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">package mainimport &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;func main() &#123;r :&#x3D; gin.Default()&#x2F;&#x2F;加载模板r.LoadHTMLGlob(&quot;templates&#x2F;**&#x2F;**&quot;)r.GET(&quot;&#x2F;index&quot;, func(context *gin.Context) &#123;context.HTML(200, &quot;index.html&quot;, gin.H&#123;&quot;title&quot;: &quot;首页&quot;&#125;)&#125;)r.GET(&quot;&#x2F;news&quot;, func(context *gin.Context) &#123;context.HTML(200, &quot;news.html&quot;, gin.H&#123;&quot;title&quot;: &quot;新闻 页&quot;&#125;)&#125;)r.Run()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、全部模板放在一个目录里的配置方法&quot;&gt;&lt;a href=&quot;#1、全部模板放在一个目录里的配置方法&quot; class=&quot;headerlink&quot; title=&quot;1、全部模板放在一个目录里的配置方法&quot;&gt;&lt;/a&gt;1、全部模板放在一个目录里的配置方法&lt;/h2&gt;&lt;p&gt;现在的目录路径：&lt;/p&gt;</summary>
    
    
    
    
    <category term="gin go" scheme="https://running-dpf.github.io/tags/gin-go/"/>
    
  </entry>
  
  <entry>
    <title>gin-method</title>
    <link href="https://running-dpf.github.io/post/gin-method.html"/>
    <id>https://running-dpf.github.io/post/gin-method.html</id>
    <published>2022-08-09T05:52:46.000Z</published>
    <updated>2022-08-09T05:54:09.124Z</updated>
    
    <content type="html"><![CDATA[<p>实现gin的调用方法，包括post、get、json等</p><span id="more"></span><pre class="line-numbers language-go" data-language="go"><code class="language-go">package mainimport (&quot;net&#x2F;http&quot;&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;)func main() &#123;r :&#x3D; gin.Default()r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;c.JSON(200, gin.H&#123;&quot;default&quot;: true&#125;)&#125;)r.GET(&quot;&#x2F;string&quot;, func(c *gin.Context) &#123;c.String(http.StatusOK, &quot;值：%v&quot;, &quot;首页&quot;)&#125;)r.GET(&quot;&#x2F;json&quot;, func(c *gin.Context) &#123;c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: true,&quot;msg&quot;:    &quot;访问成功&quot;,&#125;)&#125;)r.Run()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现gin的调用方法，包括post、get、json等&lt;/p&gt;</summary>
    
    
    
    
    <category term="go gin" scheme="https://running-dpf.github.io/tags/go-gin/"/>
    
  </entry>
  
  <entry>
    <title>Golang并行运行时设置占用cpu数量</title>
    <link href="https://running-dpf.github.io/post/go-routine-cpu.html"/>
    <id>https://running-dpf.github.io/post/go-routine-cpu.html</id>
    <published>2022-08-08T10:42:15.000Z</published>
    <updated>2022-08-08T10:56:29.346Z</updated>
    
    <content type="html"><![CDATA[<p>Go运行时的调度器使用GOMAXPROCS参数来确定需要使用多少个OS线程来同时执行Go代码。默认值是机器上的VCPU核心数。例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上。</p><span id="more"></span><p>Golang中可以通过runtime.GOMAXPROCS()函数设置当前程序并发时占用的CPU逻辑核心数。</p><p>Golang1.5版本之前，默认使用的是单核心执行。Golang1.5版本之后，默认使用全部的CPU逻辑核心数。</p><p>代码演示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">package mainimport (&quot;fmt&quot;&quot;runtime&quot;)func main() &#123;&#x2F;&#x2F;获取当前计算机上面的Cpu核数CpuNum :&#x3D; runtime.NumCPU()fmt.Println(&quot;cpuNum&#x3D;&quot;, CpuNum)&#x2F;&#x2F;可以自己设置使用多个Cpuruntime.GOMAXPROCS(CpuNum - 2)fmt.Println(&quot;ok&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Go运行时的调度器使用GOMAXPROCS参数来确定需要使用多少个OS线程来同时执行Go代码。默认值是机器上的VCPU核心数。例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上。&lt;/p&gt;</summary>
    
    
    
    
    <category term="go" scheme="https://running-dpf.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-协程说明</title>
    <link href="https://running-dpf.github.io/post/go-goroutine.html"/>
    <id>https://running-dpf.github.io/post/go-goroutine.html</id>
    <published>2022-08-08T07:23:26.000Z</published>
    <updated>2022-08-08T10:10:39.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、关于进程与线程"><a href="#1、关于进程与线程" class="headerlink" title="1、关于进程与线程"></a>1、关于进程与线程</h1><p>进程（process）就是程序在操作系统中的一次执行过程，是系统进行资源分配和调度的基本单位，进程是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间。一个进程至少有5种基本状态，它们是：初始态、执行态、等待状态、就绪状态、终止状态。</p><span id="more"></span><p>通俗的讲，进程就是一个正在执行的程序</p><p>线程 是进程的一个执行实例，是程序执行的最小单元，它是比进程更小的能独立运行的基本单位</p><p>一个进程可以创建多个线程，同一个进程中的多个线程可以并发执行，一个程序要运行的话执行有一个进程</p><h1 id="2、关于并发与并行"><a href="#2、关于并发与并行" class="headerlink" title="2、关于并发与并行"></a>2、关于并发与并行</h1><p>并发：多个线程同时竞争一个位置，竞争到的才可以执行，每一个时间段只有一个线程在执行</p><p>并行：多个线程可以同时执行，每一个时间段，可以有多个线程同时执行<br>通俗的讲：多线程程序在单核CPU上运行就是并发，多线程程序在多核CPU上运行就是并行，如果线程数大于CPU核数，则多线程程序在多个CPU上面运行即有并发又有并行</p><h1 id="3、Golang中的协程（goroutine）以及主线程"><a href="#3、Golang中的协程（goroutine）以及主线程" class="headerlink" title="3、Golang中的协程（goroutine）以及主线程"></a>3、Golang中的协程（goroutine）以及主线程</h1><p>Golang中的主线程：（可以理解为线程/也可以理解为进程），在一个Golang程序的主线程上可以起多个协程。Golang中多协程可以实现并行或者并发。<br>协程：可以理解为用户级线程，这是对内核透明的，也就是系统并不知道有协程的存在，是完全有用户自己的程序进行调度的。Golang的一大特色就是i次哦那个语言层面原生支持协程，在函数或者方法前面加 go 关键字姐可以创建一个携程。可以说Golang中的协程就是goroutine。<br>多线程和多协程：Golang中每个goroutine（协程）默认占用内存远比java、c的线程少。os线程（操作系统线程）一般都有固定的栈内存（通常为2MB左右），一个goroutine（协程）占用内存非常小，只有2Kb左右，多协程goroutine切换调度开销方面远比线程要少。这也是为什么越来越多的公司开始使用golang的原因之一。</p><h1 id="4、goroutine的使用以及sync-WaitGroup"><a href="#4、goroutine的使用以及sync-WaitGroup" class="headerlink" title="4、goroutine的使用以及sync.WaitGroup"></a>4、goroutine的使用以及sync.WaitGroup</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1、关于进程与线程&quot;&gt;&lt;a href=&quot;#1、关于进程与线程&quot; class=&quot;headerlink&quot; title=&quot;1、关于进程与线程&quot;&gt;&lt;/a&gt;1、关于进程与线程&lt;/h1&gt;&lt;p&gt;进程（process）就是程序在操作系统中的一次执行过程，是系统进行资源分配和调度的基本单位，进程是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间。一个进程至少有5种基本状态，它们是：初始态、执行态、等待状态、就绪状态、终止状态。&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="https://running-dpf.github.io/categories/go/"/>
    
    
    <category term="go" scheme="https://running-dpf.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 语言精粹笔记1-语法、对象、函数</title>
    <link href="https://running-dpf.github.io/post/JavaScript-good-parts-note1.html"/>
    <id>https://running-dpf.github.io/post/JavaScript-good-parts-note1.html</id>
    <published>2022-08-08T06:30:13.142Z</published>
    <updated>2022-08-08T06:30:13.145Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。</p><p><img data-src="https://img3.doubanio.com/lpic/s3651235.jpg"></p><p>原书中第一章为精华，做了一些周边介绍，略去。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h3><p>这里说一下JavaScript的注释，一种是 <code>/* */</code> 包围的块注释，另一种是 <code>//</code> 开头的行注释。</p><p>因为块注释的字符可能是JavaScript中正则表达式字面量，因此不是很安全，如：</p><span id="more"></span><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*    var rm_a = /a*/</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符由一个字母开头，后面可选择性的加上一个或多个字母、数字或下划线。要避免保留字。</p><p>标识符被用于语句、变量、参数、属性名、运算符和标记。</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>可以存在指数部分，100和1e2完全相等</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">100</span> <span class="token operator">===</span> <span class="token number">1e2</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>isNaN</code>来检测<code>NaN</code>。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>当年 JavaScript 被创建的时候，Unicode 是16位字符集，因此 JavaScript 字符串是16位的。</p><p>用双引号或单引号包裹。</p><p>重点说一下转义字符<code>\</code></p><p>反斜杠后面可以跟<code>&quot;</code>, <code>&#39;</code>, <code>\</code>, <code>/</code>, <code>b</code> (backspace), <code>f</code> (formfeed), <code>n</code>, <code>r</code> (carriage return), <code>t</code>, <code>u1234</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">'A'</span> <span class="token operator">===</span> <span class="token string">'\u0041'</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>每个<code>&lt;script&gt;</code>标签的内容被一起抛到一个公共的全局名字空间中。</p><p><code>&#123;...&#125;</code>代码块不会创建新的作用域，因此变量应该被定义在函数的头部，而不是在代码块中。</p><p>下列值当做假：</p><ul><li><code>false</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>&#39;&#39;</code></li><li><code>0</code></li><li><code>NaN</code></li></ul><p>其他所有值都当做真</p><p><code>for in</code>语句枚举对象的所有属性名（键名），使用<code>object.hasOwnProperty(variable)</code>来确定这个属性名是该对象成员，还是来自原型链。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>myvar <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>myvar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>运算符优先级</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code> <code>[]</code> <code>()</code></td><td>提取属性与调用函数</td></tr><tr><td><code>delete</code> <code>new</code> <code>typeof</code> <code>+</code> <code>-</code> <code>!</code></td><td>一元运算符</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code></td><td></td></tr><tr><td><code>+</code> <code>-</code></td><td></td></tr><tr><td><code>&gt;=</code> <code>&lt;=</code> <code>&gt;</code> <code>&lt;</code></td><td></td></tr><tr><td><code>===</code> <code>!==</code></td><td></td></tr><tr><td><code>&amp;&amp;</code></td><td>逻辑与</td></tr><tr><td>`</td><td></td></tr><tr><td><code>?:</code></td><td>三目</td></tr></tbody></table><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>对象字面量是一种可以方便地按指定规格创建新对象的表示法。</p><p>数组字面量是一种可以方便地按指定规格创建新数组的表示法。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数字面量定义了函数值。后续章节详谈。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是属性的容器，每一个属性都拥有名字和值。属性的名字可以是包含空字符串在内的任意字符串。属性的值可以是除<code>undefined</code>值之外的任何值。</p><p>JavaScript 包含一种原型链的特性，允许对象继承另一个对象的属性。正确地使用它能减少对象初始化时消耗的时间和内存。</p><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p>一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> empty_object <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> stooge <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'Haoyang'</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Gao'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Haoyang</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">[</span><span class="token string">'firstName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Haoyang</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不存在的属性返回<code>undefined</code>。</p><p>使用<code>||</code>来填充默认值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">.</span>firstName <span class="token operator">||</span> <span class="token string">'Joe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Haoyang</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">.</span>age <span class="token operator">||</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>直接使用赋值语句更新，若不存在这个属性，则作为扩充操作。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">stooge<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">'aaa'</span>stooge<span class="token punctuation">.</span>nickName <span class="token operator">=</span> <span class="token string">'peip'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stooge<span class="token punctuation">)</span> <span class="token comment">//Object &#123;firstName: "aaa", lastName: "Gao", nickName: "peip"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>对象通过引用来传递他们永远不会被复制。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> stoogex<span class="token punctuation">.</span>hair <span class="token operator">=</span> <span class="token string">'black'</span>stooge<span class="token punctuation">.</span>hair <span class="token comment">//"black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>每一个对象都连接到一个原型对象，并且它可以从中继承属性。所有通过字面量创建的对象都连接到<code>Object.prototype</code>，它是JavaScript中的标配对象。</p><p>可以使用<code>Object.create()</code>方法创建一个使用原对象作为其原型的新对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> anotherStooge <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>stooge<span class="token punctuation">)</span>anotherStooge<span class="token punctuation">.</span>firstName <span class="token comment">//"aaa"</span>anotherStooge<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">'bbb'</span>anotherStooge<span class="token punctuation">.</span>firstName <span class="token comment">//"bbb"</span>anotherStooge<span class="token punctuation">.</span>hair <span class="token comment">//"black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新对象先查找自己的属性，若不存在则会向原型方向查找。</p><p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4ieu7focqj207h05caaf.jpg"></p><p>当我们对某个对象作出改变时，不会触及该对象的原型。</p><p>原型关系是一种动态关系。如果我们添加一个新的属性到原型中，该属性会立即对所有基于该原型创建的对象可见。</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。</p><p>检查对象并确定对象有什么属性是很容易的事情，只要试着去检索该属性并验证取得的值。</p><p><code>typeof</code>用来确定对象属性的类型。</p><p><code>hasOwnProperty</code>，若对象拥有独有的属性，它将返回<code>true</code>。不会检查原型链。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>使用<code>for in</code>可以遍历一个对象中的所有属性名，包括原型链上的属性名。可以使用<code>hasOwnProperty</code>过滤原型链上的属性，使用<code>typeof</code>来排除函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> anotherStooge<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anotherStooge<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> anotherStooge<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'--->'</span> <span class="token operator">+</span> anotherStooge<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// firstName--->bbb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>属性名是无序的，若想保持顺序应使用数组和<code>for</code>循环。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>delete</code>可以用来删除对象的属性。若对象包含该属性，则会被移除。它不会触及原型链中的任何对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">anotherStooge<span class="token punctuation">.</span>firstName <span class="token comment">//"bbb"</span><span class="token keyword">delete</span> anotherStooge<span class="token punctuation">.</span>firstNameanotherStooge<span class="token punctuation">.</span>firstName <span class="token comment">//"aaa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="减少全局变量污染"><a href="#减少全局变量污染" class="headerlink" title="减少全局变量污染"></a>减少全局变量污染</h3><p>JavaScript 可以随意的定义全局变量来容纳应用的所有资源。但这会削弱程序的灵活性，应避免使用全局变量。</p><p>最小化使用全局变量的方法之一是为应用只创建一个唯一的全局变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">MYAPP</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token constant">MYAPP</span><span class="token punctuation">.</span>stooge <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token constant">MYAPP</span><span class="token punctuation">.</span>flight <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一章将使用闭包来进行信息隐藏，是另一种有效减少全局污染的方法。</p><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>JavaScript 中的函数就是对象。函数对象连接到<code>Function.prototype</code>（该原型对象本身连接到<code>Object.prototype</code>）。每个函数对象在创建时会附加两个隐藏属性：函数的上下文和实现函数行为的代码。</p><p>函数对象在创建时也随配有一个<code>prototype</code>属性。它的值是一个拥有<code>constructor</code>属性且值即为该函数对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4lrei2b3pj208f06et95.jpg"></p><p>因为函数是对象，所以可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。函数也可以拥有方法。</p><p>函数的与众不同之处在于可以被调用。</p><h3 id="函数字面量"><a href="#函数字面量" class="headerlink" title="函数字面量"></a>函数字面量</h3><p>函数对象通过函数字面量来创建。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数字面量包含4部分，分别是：保留字 function、函数名、参数、花括号中的语句。</p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形式参数，还有两个附加参数：<code>this</code>和<code>arguments</code>。参数<code>this</code>在面向对象编程中非常重要，它的值取决于调用的模式。JavaScript中一共有4中调用模式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。</p><p>实参和形参个数不匹配时，不会有运行时错误。实参过多时，超出的实参被忽略。形参过多时，缺失的值被替换为<code>undefined</code>。</p><p>下面的内容也可以参考我以前的博文 <a href="http://gaohaoyang.github.io/2015/06/12/JavaScript-this/">JavaScript 中的 this</a></p><h4 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h4><p>当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，<code>this</code>被绑定到该对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">inc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token keyword">typeof</span> inc <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">?</span> inc <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>myObject<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">//1</span>myObject<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h4><p>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。</p><p>此时<code>this</code>被绑定到全局对象。即时是内部函数也会将<code>this</code>绑定到全局对象。</p><p>可以在函数内创建一个属性并赋值为<code>this</code>来解决这个问题。如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span>myObject<span class="token punctuation">.</span><span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">var</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        that<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">,</span> that<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>myObject<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">//8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造器调用模式"><a href="#构造器调用模式" class="headerlink" title="构造器调用模式"></a>构造器调用模式</h4><p>JavaScript是一门基于原型继承的语言。对象可以直接从其他对象继承属性。该语言是无类型的。</p><p>如果在一个函数前面带上<code>new</code>来调用，那么背地里将会创建一个连接到该函数的<code>prototype</code>成员的新对象，同时<code>this</code>会被绑定到那个新对象上。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//创建构造器函数</span><span class="token keyword">var</span> <span class="token function-variable function">Quo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> string<span class="token punctuation">&#125;</span><span class="token comment">//给Que的所有实例提供一个公共方法</span><span class="token class-name">Quo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getStatus</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">&#125;</span><span class="token comment">//实例化</span><span class="token keyword">var</span> myQuo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Quo</span><span class="token punctuation">(</span><span class="token string">'confused'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myQuo<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//confused</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>书中不推荐这种形式的构造器函数，下一章有更好的解决方案。</p><h4 id="Apply-调用模式"><a href="#Apply-调用模式" class="headerlink" title="Apply 调用模式"></a>Apply 调用模式</h4><p><code>apply</code>方法让我们构建一个参数数组传递给调用函数。他也允许我们选择<code>this</code>的值。<code>apply</code>方法接受两个参数，第一个是要绑定给<code>this</code>的值，第二个是参数数组。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment">//7</span><span class="token keyword">var</span> statusObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token class-name">Quo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>statusObject<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token comment">//hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>当函数被调用时，会得到一个<code>arguments</code>数组。通过此参数可以访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形参的多余参数。这使得编写一个无须指定参数个数的函数成为可能。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因语言的设计错误，<code>arguments</code>并不是一个真正的数组。是一个“类似数组”的对象。有<code>length</code>属性，但没有任何数组的方法。</p><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>函数执行时遇到关闭函数体的<code>&#125;</code>时结束。然后把控制权交还给调用该函数的程序。</p><p><code>return</code>可以使函数提前返回，不在执行余下的语句。</p><p>函数总是会返回一个值，若没有指定，则返回<code>undefined</code>。</p><p>若函数调用时在前面加上了<code>new</code>前缀，且返回值不是一个对象的时候，则返回<code>this</code>（该新对象）。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常是干扰程序的正常流畅的不寻常的事故。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">add2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">!==</span> <span class="token string">'number'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">!==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'TypeError'</span><span class="token punctuation">,</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'add needs numbers'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4mprafcvhj20ml00xjrj.jpg"></p><p><code>throw</code>语句中断函数的执行。抛出一个<code>exception</code>对象，该对象包含一个用来识别异常类型的<code>name</code>属性和一个描述性的<code>message</code>属性。也可以自定义其他属性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">try_it</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">add2</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">try_it</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//TypeError: add needs numbers</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在<code>try</code>代码块内抛出一个异常，控制权就会跳转到它的<code>catch</code>语句中。</p><h3 id="扩充类型的功能"><a href="#扩充类型的功能" class="headerlink" title="扩充类型的功能"></a>扩充类型的功能</h3><p>JavaScript 允许给语言的基本类型扩充功能。通过<code>Object.prototype</code>添加方法，可以让该方法对所有对象都适用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 先添加方法使得该方法对所有函数可用</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> func    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token comment">//添加一个取整方法</span>Number<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'integer'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">[</span><span class="token keyword">this</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'ceil'</span> <span class="token operator">:</span> <span class="token string">'floor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//-3</span><span class="token comment">//添加 trim()</span>String<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'trim'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  hello alibaba  '</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//hello alibaba</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript 原型继承是动态的，因此新的方法立刻被赋予到所有的对象实例上，即使对象实例是在方法被增加之前就创建好了。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归函数就是会直接或者间接地调用自身的一种函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">walkTheDom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">func</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>    node <span class="token operator">=</span> node<span class="token punctuation">.</span>firstChild    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> func<span class="token punctuation">)</span>        node <span class="token operator">=</span> node<span class="token punctuation">.</span>nextSibling    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token function-variable function">getElementsByAttribute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">att<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">walkTheDom</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> actual <span class="token operator">=</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>att<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> actual <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>actual <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span class="token punctuation">&#125;</span><span class="token comment">//在知乎主页上操作</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getElementsByAttribute</span><span class="token punctuation">(</span><span class="token string">'data-za-module'</span><span class="token punctuation">,</span> <span class="token string">'AnswerItem'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//得到下列数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域控制着变量与参数的可见性及生命周期。它减少了名称冲突，并提供了自动内存管理。</p><p>无块级作用域。</p><p>有函数作用域。</p><p>建议在函数体的顶部声明函数中可能用到的所有变量。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了<code>this</code>和<code>arguments</code>）。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">quo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">get_status</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> status        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myQuo <span class="token operator">=</span> <span class="token function">quo</span><span class="token punctuation">(</span><span class="token string">'amazed'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myQuo<span class="token punctuation">.</span><span class="token function">get_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//amazed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>狭义的说，返回的那个对象即闭包，它里面的方法可以访问它被创建时所处的上下文环境。</p><p>避免在循环中创建函数，容易引起混淆。可以现在循环之外创建一个辅助函数，让辅助函数在返回一个绑定了当前<code>i</code>值的函数，这样就不会导致混淆了。</p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>将一个函数作为参数，一旦接收到响应，再调用这个函数。</p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>可以用函数和闭包构造模块。</p><p>模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问到的地方。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> numberCal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token function-variable function">half</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n <span class="token operator">/</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> <span class="token function-variable function">tribble</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">3</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">half</span><span class="token operator">:</span> half<span class="token punctuation">,</span>        <span class="token literal-property property">double</span><span class="token operator">:</span> double<span class="token punctuation">,</span>        <span class="token literal-property property">tribble</span><span class="token operator">:</span> tribble    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberCal<span class="token punctuation">.</span><span class="token function">half</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//2.5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberCal<span class="token punctuation">.</span><span class="token function">half</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberCal<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//14</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberCal<span class="token punctuation">.</span><span class="token function">tribble</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p>如果让方法返回<code>this</code>而不是默认的<code>undefined</code>，就可以启用级联，即连续调用。</p><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数。</p><p>详情见以前的博文 <a href="http://gaohaoyang.github.io/2015/06/11/JavaScript-function/#bind--currying">JavaScript 函数 -bind 与 currying</a>。</p><h3 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h3><p>函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算。这种优化被称为记忆（memoization）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://img3.doubanio.com/lpic/s3651235.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;原书中第一章为精华，做了一些周边介绍，略去。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;h3 id=&quot;空白&quot;&gt;&lt;a href=&quot;#空白&quot; class=&quot;headerlink&quot; title=&quot;空白&quot;&gt;&lt;/a&gt;空白&lt;/h3&gt;&lt;p&gt;这里说一下JavaScript的注释，一种是 &lt;code&gt;/* */&lt;/code&gt; 包围的块注释，另一种是 &lt;code&gt;//&lt;/code&gt; 开头的行注释。&lt;/p&gt;
&lt;p&gt;因为块注释的字符可能是JavaScript中正则表达式字面量，因此不是很安全，如：&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://running-dpf.github.io/categories/JavaScript/"/>
    
    
    <category term="对象 函数 this 闭包 面向对象 作用域" scheme="https://running-dpf.github.io/tags/%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0-this-%E9%97%AD%E5%8C%85-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 语言精粹笔记2-继承、数组、正则表达式</title>
    <link href="https://running-dpf.github.io/post/JavaScript-good-parts-note2.html"/>
    <id>https://running-dpf.github.io/post/JavaScript-good-parts-note2.html</id>
    <published>2022-08-08T06:30:13.066Z</published>
    <updated>2022-08-08T06:30:13.067Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为书中以下章节的笔记：继承、数组和正则表达式。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承的两大好处：代码重用，引入一套类型系统的规范。</p><span id="more"></span><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>JavaScript 通过构造器函数产生对象。</p><p>构造器调用模式，即用<code>new</code>前缀去调用一个函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">Mammal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token class-name">Mammal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Mammal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">says</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saying <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> myMammal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mammal</span><span class="token punctuation">(</span><span class="token string">'Herb'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMammal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Herb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>书中不推荐这样的写法。有很多风险。若忘记添加<code>new</code>前缀，<code>this</code>无法绑定到新的对象上。而是绑定到了全局对象上，破坏了全局变量环境。</p><h3 id="对象说明符"><a href="#对象说明符" class="headerlink" title="对象说明符"></a>对象说明符</h3><p>上一节中的构造器可能要接受一大串参数。我们可以这样写：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token function">Maker</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">first</span><span class="token operator">:</span> f<span class="token punctuation">,</span>    <span class="token literal-property property">middle</span><span class="token operator">:</span> m<span class="token punctuation">,</span>    <span class="token literal-property property">last</span><span class="token operator">:</span> l<span class="token punctuation">,</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> s<span class="token punctuation">,</span>    <span class="token literal-property property">city</span><span class="token operator">:</span> c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将JSON对象传递给构造器，而它返回一个构造完全的对象。</p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>在一个纯粹的原型模式中，我们将摒弃类，转而专注于对象。一个新对象可以继承一个就对象的属性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myMammal <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MM'</span><span class="token punctuation">,</span>    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">says</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saying <span class="token operator">||</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myCat <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>myMammal<span class="token punctuation">)</span>myCat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kitty'</span>myCat<span class="token punctuation">.</span>saying <span class="token operator">=</span> <span class="token string">'meow'</span>myCat<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'Kitty is running'</span><span class="token punctuation">&#125;</span>myCat<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>says <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>says<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一种差异化继承。</p><h3 id="函数化"><a href="#函数化" class="headerlink" title="函数化"></a>函数化</h3><p>前文看到的继承模式没法保护隐私。对象的所有属性都是可见的。无法得到私有变量和私有函数。为了解决这一问题，我们有模块模式。</p><p>构造一个生成对象的函数需要4步骤：</p><ol><li>创建一个新对象。</li><li>有选择的定义私有变量和方法。</li><li>给这个新对象扩充方法。</li><li>返回那个新对象。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">mammal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">spec</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    that<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> spec<span class="token punctuation">.</span>name    <span class="token punctuation">&#125;</span>    that<span class="token punctuation">.</span><span class="token function-variable function">says</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> spec<span class="token punctuation">.</span>saying <span class="token operator">||</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> that<span class="token punctuation">&#125;</span><span class="token keyword">var</span> myMammal <span class="token operator">=</span> <span class="token function">mammal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Herb'</span><span class="token punctuation">,</span>    <span class="token literal-property property">saying</span><span class="token operator">:</span> <span class="token string">'Cheers!'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMammal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Herb</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMammal<span class="token punctuation">.</span><span class="token function">says</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Cheers!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以参考上一篇文章，<a href="http://gaohaoyang.github.io/2016/06/07/JavaScript-good-parts-note1/#section-34">JavaScript 语言精粹笔记1-语法、对象、函数 之模块部分</a>。</p><h3 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h3><p>这一部分看的不是特别懂，我想等我学完ES2015中的类和模块部分后再看看吧。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h3><p>一个数组字面量是在一对方括号中包围零个或多个用逗号分隔的值的表达式。</p><p>再大多数语言中，一个数组的多有元素都要求是相同的类型。JavaScript 允许数组包含任意混合类型的值。</p><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>JavaScript 数组的<code>length</code>属性是没有上界的。如果用大于或等于当前<code>length</code>的数字作为下标来存储一个元素，那么<code>length</code>值会被增大以容纳新元素，不会发生数组越界错误。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>数组也是对象，可以用<code>delete</code>来删除元素</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'wu'</span><span class="token punctuation">]</span><span class="token keyword">delete</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>splice</code>方法，进行删除和修改操作。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">numbers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//two</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>使用常规<code>for</code>循环即可，可以保证数组的顺序。</p><h3 id="容易混淆的地方"><a href="#容易混淆的地方" class="headerlink" title="容易混淆的地方"></a>容易混淆的地方</h3><p>当属性名是小而连续的整数时，应该使用数组，否则使用对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//object</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回数组的类型是<code>object</code>，没有任何意义。</p><p>判断数组类型的方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ECMAScript 5.1 (ECMA-262) 和 ECMAScript 2015 (6th Edition, ECMA-262) 标准中的方法。</p><p>或者下面这个方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">is_array</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>数组的方法被存储在<code>Array.prototype</code>中的函数。</p><p>数组是对象，因此<code>Array.prototype</code>也是可扩充的。</p><h3 id="指定初始值"><a href="#指定初始值" class="headerlink" title="指定初始值"></a>指定初始值</h3><p>JavaScript 的数组不会预制值。</p><p>JavaScript 没有多维数组，单项大多数类 C 语言一样，支持元素为数组的数组。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>关于正则表达式，以前的博文写的比较多了，详情见：</p><p><a href="http://gaohaoyang.github.io/2015/04/22/baidu-ife-2-javascript/#section-10">百度Web前端技术学院(2)-JavaScript 基础 之正则表达式部分1</a></p><p><a href="http://gaohaoyang.github.io/2015/04/22/baidu-ife-2-javascript/#section-12">百度Web前端技术学院(2)-JavaScript 基础 之正则表达式部分2</a></p><p><a href="http://gaohaoyang.github.io/2016/05/06/regular-expression-group/">浅谈正则表达式中的分组和引用</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为书中以下章节的笔记：继承、数组和正则表达式。&lt;/p&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p&gt;继承的两大好处：代码重用，引入一套类型系统的规范。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://running-dpf.github.io/categories/JavaScript/"/>
    
    
    <category term="继承 对象 原型 Array 正则" scheme="https://running-dpf.github.io/tags/%E7%BB%A7%E6%89%BF-%E5%AF%B9%E8%B1%A1-%E5%8E%9F%E5%9E%8B-Array-%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 语言精粹笔记3-方法、毒瘤等</title>
    <link href="https://running-dpf.github.io/post/JavaScript-good-parts-note3.html"/>
    <id>https://running-dpf.github.io/post/JavaScript-good-parts-note3.html</id>
    <published>2022-08-08T06:30:12.907Z</published>
    <updated>2022-08-08T06:30:12.908Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>这一章主要介绍了一些方法集。这里写几个我不太熟悉的方法和要点吧。</p><span id="more"></span><ul><li><p><code>array.join()</code></p><blockquote><p>对于IE6/7，使用<code>array.join()</code>连接大量字符串的效率确实优于使用<code>+</code>元素运算符。但是目前主流的浏览器，包括IE8以后的版本，都对<code>+</code>元素运算符连接字符串做了特别优化，性能已经显著高于<code>array.join()</code>。</p></blockquote></li><li><p><code>number.toExponential(fractionDigits)</code></p><p>  把这个<code>number</code>转换成一个指数形式的字符串。</p></li><li><p><code>number.toFixed(fractionDigits)</code></p><p>  将这个<code>number</code>转换成一个十进制形式的字符串。</p></li></ul><h2 id="毒瘤"><a href="#毒瘤" class="headerlink" title="毒瘤"></a>毒瘤</h2><ul><li><p>注意全局变量的引入。</p></li><li><p>JavaScript 中 Unicode 是16位的。包含65536个字符（基本多文种平面 Basic Multilingual Plane）。剩下的百万字符中的每一个都可以用一对字符来表示。Unicode 把一对字符视为一个单一的字符，而 JavaScript 认为一对字符是两个不同的字符。</p></li><li><p>检测<code>null</code>的方式。</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//object</span>myValue <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token comment">//检测 null</span><span class="token keyword">if</span> <span class="token punctuation">(</span>myValue <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> myValue <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// myValue 是一个对象或数组！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>parseInt</code> 把字符串转化为整数的函数。它遇到非数字时会停止解析，所以<code>parseInt(&#39;16&#39;)</code>和<code>parseInt(&#39;16ton&#39;)</code>产生相同的结果。</p><p>  如果该字符串第一个字符是0，那么该字符串会基于八进制而不是十进制来求职。在八进制中，8和9不是数字，所以<code>parseInt(&#39;08&#39;)</code>和<code>parseInt(&#39;09&#39;)</code>都产生0作为结果。但<code>parseInt()</code>可以接受基数，因此<code>parseInt(&#39;08&#39;,10)</code>结果为8，建议总是加上这个基数参数。</p></li><li><p>JavaScript 的对象永远不会是真的空对象，因为它们可以送原型链中取得成员属性。</p></li></ul><h2 id="糟粕"><a href="#糟粕" class="headerlink" title="糟粕"></a>糟粕</h2><ul><li><p>避免使用<code>with</code>语句。</p></li><li><p>避免使用<code>eval</code>语句。</p></li><li><p><code>continue</code>可能会降低运算性能。</p></li><li><p>位运算符在 JavaScript 会非常慢。</p><p>  Java 里，位运算符处理的是整数。JavaScript 没有整数类型，它只有双精度的浮点数，因此，位运算符把它们的数字运算数先转换为整数，执行运算，在转换回去。JavaScript 的执行环境一般接触不到硬件，所以非常慢。</p></li><li><p>避免使用包装对象。<code>new Object</code>和<code>new Array</code>等。</p></li><li><p>避免使用<code>void</code>。</p></li></ul><p>本系列结束。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;这一章主要介绍了一些方法集。这里写几个我不太熟悉的方法和要点吧。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://running-dpf.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://running-dpf.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
